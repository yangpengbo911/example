// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TogetherCall.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TogetherCall_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TogetherCall_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TogetherCall_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TogetherCall_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[40]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_TogetherCall_2eproto();
namespace message {
class DiagnosisAcceptCallPush;
class DiagnosisAcceptCallPushDefaultTypeInternal;
extern DiagnosisAcceptCallPushDefaultTypeInternal _DiagnosisAcceptCallPush_default_instance_;
class DiagnosisBeginRequest;
class DiagnosisBeginRequestDefaultTypeInternal;
extern DiagnosisBeginRequestDefaultTypeInternal _DiagnosisBeginRequest_default_instance_;
class DiagnosisBeginResponse;
class DiagnosisBeginResponseDefaultTypeInternal;
extern DiagnosisBeginResponseDefaultTypeInternal _DiagnosisBeginResponse_default_instance_;
class DiagnosisCompleteRequest;
class DiagnosisCompleteRequestDefaultTypeInternal;
extern DiagnosisCompleteRequestDefaultTypeInternal _DiagnosisCompleteRequest_default_instance_;
class DiagnosisCompleteResponse;
class DiagnosisCompleteResponseDefaultTypeInternal;
extern DiagnosisCompleteResponseDefaultTypeInternal _DiagnosisCompleteResponse_default_instance_;
class DiagnosisInfoResponse;
class DiagnosisInfoResponseDefaultTypeInternal;
extern DiagnosisInfoResponseDefaultTypeInternal _DiagnosisInfoResponse_default_instance_;
class DiagnosisLeaveRecoverRequest;
class DiagnosisLeaveRecoverRequestDefaultTypeInternal;
extern DiagnosisLeaveRecoverRequestDefaultTypeInternal _DiagnosisLeaveRecoverRequest_default_instance_;
class DiagnosisLeaveRecoverResponse;
class DiagnosisLeaveRecoverResponseDefaultTypeInternal;
extern DiagnosisLeaveRecoverResponseDefaultTypeInternal _DiagnosisLeaveRecoverResponse_default_instance_;
class DiagnosisLeaveRequest;
class DiagnosisLeaveRequestDefaultTypeInternal;
extern DiagnosisLeaveRequestDefaultTypeInternal _DiagnosisLeaveRequest_default_instance_;
class DiagnosisLeaveResponse;
class DiagnosisLeaveResponseDefaultTypeInternal;
extern DiagnosisLeaveResponseDefaultTypeInternal _DiagnosisLeaveResponse_default_instance_;
class DiagnosisPassRecoverRequest;
class DiagnosisPassRecoverRequestDefaultTypeInternal;
extern DiagnosisPassRecoverRequestDefaultTypeInternal _DiagnosisPassRecoverRequest_default_instance_;
class DiagnosisPassRecoverResponse;
class DiagnosisPassRecoverResponseDefaultTypeInternal;
extern DiagnosisPassRecoverResponseDefaultTypeInternal _DiagnosisPassRecoverResponse_default_instance_;
class DiagnosisPausePush;
class DiagnosisPausePushDefaultTypeInternal;
extern DiagnosisPausePushDefaultTypeInternal _DiagnosisPausePush_default_instance_;
class DiagnosisPauseRecoverRequest;
class DiagnosisPauseRecoverRequestDefaultTypeInternal;
extern DiagnosisPauseRecoverRequestDefaultTypeInternal _DiagnosisPauseRecoverRequest_default_instance_;
class DiagnosisPauseRecoverResponse;
class DiagnosisPauseRecoverResponseDefaultTypeInternal;
extern DiagnosisPauseRecoverResponseDefaultTypeInternal _DiagnosisPauseRecoverResponse_default_instance_;
class DiagnosisResponseCallRequest;
class DiagnosisResponseCallRequestDefaultTypeInternal;
extern DiagnosisResponseCallRequestDefaultTypeInternal _DiagnosisResponseCallRequest_default_instance_;
class DiagnosisResponseCallResponse;
class DiagnosisResponseCallResponseDefaultTypeInternal;
extern DiagnosisResponseCallResponseDefaultTypeInternal _DiagnosisResponseCallResponse_default_instance_;
class DiagnosisSpareRequest;
class DiagnosisSpareRequestDefaultTypeInternal;
extern DiagnosisSpareRequestDefaultTypeInternal _DiagnosisSpareRequest_default_instance_;
class DiagnosisSpareResponse;
class DiagnosisSpareResponseDefaultTypeInternal;
extern DiagnosisSpareResponseDefaultTypeInternal _DiagnosisSpareResponse_default_instance_;
class DioctorCallRequest;
class DioctorCallRequestDefaultTypeInternal;
extern DioctorCallRequestDefaultTypeInternal _DioctorCallRequest_default_instance_;
class DoctorAcceptCallResultPush;
class DoctorAcceptCallResultPushDefaultTypeInternal;
extern DoctorAcceptCallResultPushDefaultTypeInternal _DoctorAcceptCallResultPush_default_instance_;
class DoctorBeginRequest;
class DoctorBeginRequestDefaultTypeInternal;
extern DoctorBeginRequestDefaultTypeInternal _DoctorBeginRequest_default_instance_;
class DoctorBeginResponse;
class DoctorBeginResponseDefaultTypeInternal;
extern DoctorBeginResponseDefaultTypeInternal _DoctorBeginResponse_default_instance_;
class DoctorCallResponse;
class DoctorCallResponseDefaultTypeInternal;
extern DoctorCallResponseDefaultTypeInternal _DoctorCallResponse_default_instance_;
class DoctorCompletePush;
class DoctorCompletePushDefaultTypeInternal;
extern DoctorCompletePushDefaultTypeInternal _DoctorCompletePush_default_instance_;
class DoctorCompleteRequest;
class DoctorCompleteRequestDefaultTypeInternal;
extern DoctorCompleteRequestDefaultTypeInternal _DoctorCompleteRequest_default_instance_;
class DoctorCompleteResponse;
class DoctorCompleteResponseDefaultTypeInternal;
extern DoctorCompleteResponseDefaultTypeInternal _DoctorCompleteResponse_default_instance_;
class DoctorInfoResponse;
class DoctorInfoResponseDefaultTypeInternal;
extern DoctorInfoResponseDefaultTypeInternal _DoctorInfoResponse_default_instance_;
class DoctorLeaveRecoverRequest;
class DoctorLeaveRecoverRequestDefaultTypeInternal;
extern DoctorLeaveRecoverRequestDefaultTypeInternal _DoctorLeaveRecoverRequest_default_instance_;
class DoctorLeaveRecoverResponse;
class DoctorLeaveRecoverResponseDefaultTypeInternal;
extern DoctorLeaveRecoverResponseDefaultTypeInternal _DoctorLeaveRecoverResponse_default_instance_;
class DoctorLeaveRequest;
class DoctorLeaveRequestDefaultTypeInternal;
extern DoctorLeaveRequestDefaultTypeInternal _DoctorLeaveRequest_default_instance_;
class DoctorLeaveResponse;
class DoctorLeaveResponseDefaultTypeInternal;
extern DoctorLeaveResponseDefaultTypeInternal _DoctorLeaveResponse_default_instance_;
class DoctorPauseRequest;
class DoctorPauseRequestDefaultTypeInternal;
extern DoctorPauseRequestDefaultTypeInternal _DoctorPauseRequest_default_instance_;
class DoctorPauseResponse;
class DoctorPauseResponseDefaultTypeInternal;
extern DoctorPauseResponseDefaultTypeInternal _DoctorPauseResponse_default_instance_;
class DoctorStopRequest;
class DoctorStopRequestDefaultTypeInternal;
extern DoctorStopRequestDefaultTypeInternal _DoctorStopRequest_default_instance_;
class DoctorStopResponse;
class DoctorStopResponseDefaultTypeInternal;
extern DoctorStopResponseDefaultTypeInternal _DoctorStopResponse_default_instance_;
class DoctorSurePassPush;
class DoctorSurePassPushDefaultTypeInternal;
extern DoctorSurePassPushDefaultTypeInternal _DoctorSurePassPush_default_instance_;
class DoctorSurePassRequest;
class DoctorSurePassRequestDefaultTypeInternal;
extern DoctorSurePassRequestDefaultTypeInternal _DoctorSurePassRequest_default_instance_;
class DoctorSurePassResponse;
class DoctorSurePassResponseDefaultTypeInternal;
extern DoctorSurePassResponseDefaultTypeInternal _DoctorSurePassResponse_default_instance_;
class PatientBaseInfo;
class PatientBaseInfoDefaultTypeInternal;
extern PatientBaseInfoDefaultTypeInternal _PatientBaseInfo_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::DiagnosisAcceptCallPush* Arena::CreateMaybeMessage<::message::DiagnosisAcceptCallPush>(Arena*);
template<> ::message::DiagnosisBeginRequest* Arena::CreateMaybeMessage<::message::DiagnosisBeginRequest>(Arena*);
template<> ::message::DiagnosisBeginResponse* Arena::CreateMaybeMessage<::message::DiagnosisBeginResponse>(Arena*);
template<> ::message::DiagnosisCompleteRequest* Arena::CreateMaybeMessage<::message::DiagnosisCompleteRequest>(Arena*);
template<> ::message::DiagnosisCompleteResponse* Arena::CreateMaybeMessage<::message::DiagnosisCompleteResponse>(Arena*);
template<> ::message::DiagnosisInfoResponse* Arena::CreateMaybeMessage<::message::DiagnosisInfoResponse>(Arena*);
template<> ::message::DiagnosisLeaveRecoverRequest* Arena::CreateMaybeMessage<::message::DiagnosisLeaveRecoverRequest>(Arena*);
template<> ::message::DiagnosisLeaveRecoverResponse* Arena::CreateMaybeMessage<::message::DiagnosisLeaveRecoverResponse>(Arena*);
template<> ::message::DiagnosisLeaveRequest* Arena::CreateMaybeMessage<::message::DiagnosisLeaveRequest>(Arena*);
template<> ::message::DiagnosisLeaveResponse* Arena::CreateMaybeMessage<::message::DiagnosisLeaveResponse>(Arena*);
template<> ::message::DiagnosisPassRecoverRequest* Arena::CreateMaybeMessage<::message::DiagnosisPassRecoverRequest>(Arena*);
template<> ::message::DiagnosisPassRecoverResponse* Arena::CreateMaybeMessage<::message::DiagnosisPassRecoverResponse>(Arena*);
template<> ::message::DiagnosisPausePush* Arena::CreateMaybeMessage<::message::DiagnosisPausePush>(Arena*);
template<> ::message::DiagnosisPauseRecoverRequest* Arena::CreateMaybeMessage<::message::DiagnosisPauseRecoverRequest>(Arena*);
template<> ::message::DiagnosisPauseRecoverResponse* Arena::CreateMaybeMessage<::message::DiagnosisPauseRecoverResponse>(Arena*);
template<> ::message::DiagnosisResponseCallRequest* Arena::CreateMaybeMessage<::message::DiagnosisResponseCallRequest>(Arena*);
template<> ::message::DiagnosisResponseCallResponse* Arena::CreateMaybeMessage<::message::DiagnosisResponseCallResponse>(Arena*);
template<> ::message::DiagnosisSpareRequest* Arena::CreateMaybeMessage<::message::DiagnosisSpareRequest>(Arena*);
template<> ::message::DiagnosisSpareResponse* Arena::CreateMaybeMessage<::message::DiagnosisSpareResponse>(Arena*);
template<> ::message::DioctorCallRequest* Arena::CreateMaybeMessage<::message::DioctorCallRequest>(Arena*);
template<> ::message::DoctorAcceptCallResultPush* Arena::CreateMaybeMessage<::message::DoctorAcceptCallResultPush>(Arena*);
template<> ::message::DoctorBeginRequest* Arena::CreateMaybeMessage<::message::DoctorBeginRequest>(Arena*);
template<> ::message::DoctorBeginResponse* Arena::CreateMaybeMessage<::message::DoctorBeginResponse>(Arena*);
template<> ::message::DoctorCallResponse* Arena::CreateMaybeMessage<::message::DoctorCallResponse>(Arena*);
template<> ::message::DoctorCompletePush* Arena::CreateMaybeMessage<::message::DoctorCompletePush>(Arena*);
template<> ::message::DoctorCompleteRequest* Arena::CreateMaybeMessage<::message::DoctorCompleteRequest>(Arena*);
template<> ::message::DoctorCompleteResponse* Arena::CreateMaybeMessage<::message::DoctorCompleteResponse>(Arena*);
template<> ::message::DoctorInfoResponse* Arena::CreateMaybeMessage<::message::DoctorInfoResponse>(Arena*);
template<> ::message::DoctorLeaveRecoverRequest* Arena::CreateMaybeMessage<::message::DoctorLeaveRecoverRequest>(Arena*);
template<> ::message::DoctorLeaveRecoverResponse* Arena::CreateMaybeMessage<::message::DoctorLeaveRecoverResponse>(Arena*);
template<> ::message::DoctorLeaveRequest* Arena::CreateMaybeMessage<::message::DoctorLeaveRequest>(Arena*);
template<> ::message::DoctorLeaveResponse* Arena::CreateMaybeMessage<::message::DoctorLeaveResponse>(Arena*);
template<> ::message::DoctorPauseRequest* Arena::CreateMaybeMessage<::message::DoctorPauseRequest>(Arena*);
template<> ::message::DoctorPauseResponse* Arena::CreateMaybeMessage<::message::DoctorPauseResponse>(Arena*);
template<> ::message::DoctorStopRequest* Arena::CreateMaybeMessage<::message::DoctorStopRequest>(Arena*);
template<> ::message::DoctorStopResponse* Arena::CreateMaybeMessage<::message::DoctorStopResponse>(Arena*);
template<> ::message::DoctorSurePassPush* Arena::CreateMaybeMessage<::message::DoctorSurePassPush>(Arena*);
template<> ::message::DoctorSurePassRequest* Arena::CreateMaybeMessage<::message::DoctorSurePassRequest>(Arena*);
template<> ::message::DoctorSurePassResponse* Arena::CreateMaybeMessage<::message::DoctorSurePassResponse>(Arena*);
template<> ::message::PatientBaseInfo* Arena::CreateMaybeMessage<::message::PatientBaseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class PatientBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.PatientBaseInfo) */ {
 public:
  PatientBaseInfo();
  virtual ~PatientBaseInfo();

  PatientBaseInfo(const PatientBaseInfo& from);
  PatientBaseInfo(PatientBaseInfo&& from) noexcept
    : PatientBaseInfo() {
    *this = ::std::move(from);
  }

  inline PatientBaseInfo& operator=(const PatientBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatientBaseInfo& operator=(PatientBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PatientBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientBaseInfo* internal_default_instance() {
    return reinterpret_cast<const PatientBaseInfo*>(
               &_PatientBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PatientBaseInfo* other);
  friend void swap(PatientBaseInfo& a, PatientBaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientBaseInfo* New() const final {
    return CreateMaybeMessage<PatientBaseInfo>(nullptr);
  }

  PatientBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatientBaseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatientBaseInfo& from);
  void MergeFrom(const PatientBaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientBaseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.PatientBaseInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string patient_id = 1;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 1;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string sex = 4;
  void clear_sex();
  static const int kSexFieldNumber = 4;
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);

  // string id_card = 5;
  void clear_id_card();
  static const int kIdCardFieldNumber = 5;
  const std::string& id_card() const;
  void set_id_card(const std::string& value);
  void set_id_card(std::string&& value);
  void set_id_card(const char* value);
  void set_id_card(const char* value, size_t size);
  std::string* mutable_id_card();
  std::string* release_id_card();
  void set_allocated_id_card(std::string* id_card);

  // string phone = 6;
  void clear_phone();
  static const int kPhoneFieldNumber = 6;
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);

  // string birthday = 7;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 7;
  const std::string& birthday() const;
  void set_birthday(const std::string& value);
  void set_birthday(std::string&& value);
  void set_birthday(const char* value);
  void set_birthday(const char* value, size_t size);
  std::string* mutable_birthday();
  std::string* release_birthday();
  void set_allocated_birthday(std::string* birthday);

  // string address = 8;
  void clear_address();
  static const int kAddressFieldNumber = 8;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes avatar = 9;
  void clear_avatar();
  static const int kAvatarFieldNumber = 9;
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);

  // @@protoc_insertion_point(class_scope:message.PatientBaseInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_card_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birthday_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisInfoResponse) */ {
 public:
  DiagnosisInfoResponse();
  virtual ~DiagnosisInfoResponse();

  DiagnosisInfoResponse(const DiagnosisInfoResponse& from);
  DiagnosisInfoResponse(DiagnosisInfoResponse&& from) noexcept
    : DiagnosisInfoResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisInfoResponse& operator=(const DiagnosisInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisInfoResponse& operator=(DiagnosisInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisInfoResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisInfoResponse*>(
               &_DiagnosisInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DiagnosisInfoResponse* other);
  friend void swap(DiagnosisInfoResponse& a, DiagnosisInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisInfoResponse* New() const final {
    return CreateMaybeMessage<DiagnosisInfoResponse>(nullptr);
  }

  DiagnosisInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisInfoResponse& from);
  void MergeFrom(const DiagnosisInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string organize_id = 1;
  void clear_organize_id();
  static const int kOrganizeIdFieldNumber = 1;
  const std::string& organize_id() const;
  void set_organize_id(const std::string& value);
  void set_organize_id(std::string&& value);
  void set_organize_id(const char* value);
  void set_organize_id(const char* value, size_t size);
  std::string* mutable_organize_id();
  std::string* release_organize_id();
  void set_allocated_organize_id(std::string* organize_id);

  // string organize_name = 2;
  void clear_organize_name();
  static const int kOrganizeNameFieldNumber = 2;
  const std::string& organize_name() const;
  void set_organize_name(const std::string& value);
  void set_organize_name(std::string&& value);
  void set_organize_name(const char* value);
  void set_organize_name(const char* value, size_t size);
  std::string* mutable_organize_name();
  std::string* release_organize_name();
  void set_allocated_organize_name(std::string* organize_name);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string owner = 4;
  void clear_owner();
  static const int kOwnerFieldNumber = 4;
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);

  // string phone = 5;
  void clear_phone();
  static const int kPhoneFieldNumber = 5;
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);

  // string address = 6;
  void clear_address();
  static const int kAddressFieldNumber = 6;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string detail_address = 7;
  void clear_detail_address();
  static const int kDetailAddressFieldNumber = 7;
  const std::string& detail_address() const;
  void set_detail_address(const std::string& value);
  void set_detail_address(std::string&& value);
  void set_detail_address(const char* value);
  void set_detail_address(const char* value, size_t size);
  std::string* mutable_detail_address();
  std::string* release_detail_address();
  void set_allocated_detail_address(std::string* detail_address);

  // bytes head_image = 10;
  void clear_head_image();
  static const int kHeadImageFieldNumber = 10;
  const std::string& head_image() const;
  void set_head_image(const std::string& value);
  void set_head_image(std::string&& value);
  void set_head_image(const char* value);
  void set_head_image(const void* value, size_t size);
  std::string* mutable_head_image();
  std::string* release_head_image();
  void set_allocated_head_image(std::string* head_image);

  // float longitude = 8;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 8;
  float longitude() const;
  void set_longitude(float value);

  // float latitude = 9;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 9;
  float latitude() const;
  void set_latitude(float value);

  // @@protoc_insertion_point(class_scope:message.DiagnosisInfoResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organize_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organize_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_image_;
  float longitude_;
  float latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorInfoResponse) */ {
 public:
  DoctorInfoResponse();
  virtual ~DoctorInfoResponse();

  DoctorInfoResponse(const DoctorInfoResponse& from);
  DoctorInfoResponse(DoctorInfoResponse&& from) noexcept
    : DoctorInfoResponse() {
    *this = ::std::move(from);
  }

  inline DoctorInfoResponse& operator=(const DoctorInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorInfoResponse& operator=(DoctorInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorInfoResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorInfoResponse*>(
               &_DoctorInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DoctorInfoResponse* other);
  friend void swap(DoctorInfoResponse& a, DoctorInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorInfoResponse* New() const final {
    return CreateMaybeMessage<DoctorInfoResponse>(nullptr);
  }

  DoctorInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorInfoResponse& from);
  void MergeFrom(const DoctorInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string doctor_name = 2;
  void clear_doctor_name();
  static const int kDoctorNameFieldNumber = 2;
  const std::string& doctor_name() const;
  void set_doctor_name(const std::string& value);
  void set_doctor_name(std::string&& value);
  void set_doctor_name(const char* value);
  void set_doctor_name(const char* value, size_t size);
  std::string* mutable_doctor_name();
  std::string* release_doctor_name();
  void set_allocated_doctor_name(std::string* doctor_name);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);

  // string sex = 4;
  void clear_sex();
  static const int kSexFieldNumber = 4;
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);

  // string hospital_uuid = 5;
  void clear_hospital_uuid();
  static const int kHospitalUuidFieldNumber = 5;
  const std::string& hospital_uuid() const;
  void set_hospital_uuid(const std::string& value);
  void set_hospital_uuid(std::string&& value);
  void set_hospital_uuid(const char* value);
  void set_hospital_uuid(const char* value, size_t size);
  std::string* mutable_hospital_uuid();
  std::string* release_hospital_uuid();
  void set_allocated_hospital_uuid(std::string* hospital_uuid);

  // string hospital_name = 6;
  void clear_hospital_name();
  static const int kHospitalNameFieldNumber = 6;
  const std::string& hospital_name() const;
  void set_hospital_name(const std::string& value);
  void set_hospital_name(std::string&& value);
  void set_hospital_name(const char* value);
  void set_hospital_name(const char* value, size_t size);
  std::string* mutable_hospital_name();
  std::string* release_hospital_name();
  void set_allocated_hospital_name(std::string* hospital_name);

  // string office_uuid = 7;
  void clear_office_uuid();
  static const int kOfficeUuidFieldNumber = 7;
  const std::string& office_uuid() const;
  void set_office_uuid(const std::string& value);
  void set_office_uuid(std::string&& value);
  void set_office_uuid(const char* value);
  void set_office_uuid(const char* value, size_t size);
  std::string* mutable_office_uuid();
  std::string* release_office_uuid();
  void set_allocated_office_uuid(std::string* office_uuid);

  // string office_name = 8;
  void clear_office_name();
  static const int kOfficeNameFieldNumber = 8;
  const std::string& office_name() const;
  void set_office_name(const std::string& value);
  void set_office_name(std::string&& value);
  void set_office_name(const char* value);
  void set_office_name(const char* value, size_t size);
  std::string* mutable_office_name();
  std::string* release_office_name();
  void set_allocated_office_name(std::string* office_name);

  // string duty_name = 9;
  void clear_duty_name();
  static const int kDutyNameFieldNumber = 9;
  const std::string& duty_name() const;
  void set_duty_name(const std::string& value);
  void set_duty_name(std::string&& value);
  void set_duty_name(const char* value);
  void set_duty_name(const char* value, size_t size);
  std::string* mutable_duty_name();
  std::string* release_duty_name();
  void set_allocated_duty_name(std::string* duty_name);

  // string phone = 10;
  void clear_phone();
  static const int kPhoneFieldNumber = 10;
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);

  // bytes head_image = 11;
  void clear_head_image();
  static const int kHeadImageFieldNumber = 11;
  const std::string& head_image() const;
  void set_head_image(const std::string& value);
  void set_head_image(std::string&& value);
  void set_head_image(const char* value);
  void set_head_image(const void* value, size_t size);
  std::string* mutable_head_image();
  std::string* release_head_image();
  void set_allocated_head_image(std::string* head_image);

  // @@protoc_insertion_point(class_scope:message.DoctorInfoResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hospital_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hospital_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr office_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr office_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duty_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorBeginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorBeginRequest) */ {
 public:
  DoctorBeginRequest();
  virtual ~DoctorBeginRequest();

  DoctorBeginRequest(const DoctorBeginRequest& from);
  DoctorBeginRequest(DoctorBeginRequest&& from) noexcept
    : DoctorBeginRequest() {
    *this = ::std::move(from);
  }

  inline DoctorBeginRequest& operator=(const DoctorBeginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorBeginRequest& operator=(DoctorBeginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorBeginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorBeginRequest* internal_default_instance() {
    return reinterpret_cast<const DoctorBeginRequest*>(
               &_DoctorBeginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DoctorBeginRequest* other);
  friend void swap(DoctorBeginRequest& a, DoctorBeginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorBeginRequest* New() const final {
    return CreateMaybeMessage<DoctorBeginRequest>(nullptr);
  }

  DoctorBeginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorBeginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorBeginRequest& from);
  void MergeFrom(const DoctorBeginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorBeginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorBeginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string begin_type = 1;
  void clear_begin_type();
  static const int kBeginTypeFieldNumber = 1;
  const std::string& begin_type() const;
  void set_begin_type(const std::string& value);
  void set_begin_type(std::string&& value);
  void set_begin_type(const char* value);
  void set_begin_type(const char* value, size_t size);
  std::string* mutable_begin_type();
  std::string* release_begin_type();
  void set_allocated_begin_type(std::string* begin_type);

  // string doctor_id = 2;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 2;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // @@protoc_insertion_point(class_scope:message.DoctorBeginRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr begin_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorBeginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorBeginResponse) */ {
 public:
  DoctorBeginResponse();
  virtual ~DoctorBeginResponse();

  DoctorBeginResponse(const DoctorBeginResponse& from);
  DoctorBeginResponse(DoctorBeginResponse&& from) noexcept
    : DoctorBeginResponse() {
    *this = ::std::move(from);
  }

  inline DoctorBeginResponse& operator=(const DoctorBeginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorBeginResponse& operator=(DoctorBeginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorBeginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorBeginResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorBeginResponse*>(
               &_DoctorBeginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DoctorBeginResponse* other);
  friend void swap(DoctorBeginResponse& a, DoctorBeginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorBeginResponse* New() const final {
    return CreateMaybeMessage<DoctorBeginResponse>(nullptr);
  }

  DoctorBeginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorBeginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorBeginResponse& from);
  void MergeFrom(const DoctorBeginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorBeginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorBeginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:message.DoctorBeginResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisBeginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisBeginRequest) */ {
 public:
  DiagnosisBeginRequest();
  virtual ~DiagnosisBeginRequest();

  DiagnosisBeginRequest(const DiagnosisBeginRequest& from);
  DiagnosisBeginRequest(DiagnosisBeginRequest&& from) noexcept
    : DiagnosisBeginRequest() {
    *this = ::std::move(from);
  }

  inline DiagnosisBeginRequest& operator=(const DiagnosisBeginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisBeginRequest& operator=(DiagnosisBeginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisBeginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisBeginRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnosisBeginRequest*>(
               &_DiagnosisBeginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DiagnosisBeginRequest* other);
  friend void swap(DiagnosisBeginRequest& a, DiagnosisBeginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisBeginRequest* New() const final {
    return CreateMaybeMessage<DiagnosisBeginRequest>(nullptr);
  }

  DiagnosisBeginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisBeginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisBeginRequest& from);
  void MergeFrom(const DiagnosisBeginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisBeginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisBeginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisBeginRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisBeginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisBeginResponse) */ {
 public:
  DiagnosisBeginResponse();
  virtual ~DiagnosisBeginResponse();

  DiagnosisBeginResponse(const DiagnosisBeginResponse& from);
  DiagnosisBeginResponse(DiagnosisBeginResponse&& from) noexcept
    : DiagnosisBeginResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisBeginResponse& operator=(const DiagnosisBeginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisBeginResponse& operator=(DiagnosisBeginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisBeginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisBeginResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisBeginResponse*>(
               &_DiagnosisBeginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DiagnosisBeginResponse* other);
  friend void swap(DiagnosisBeginResponse& a, DiagnosisBeginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisBeginResponse* New() const final {
    return CreateMaybeMessage<DiagnosisBeginResponse>(nullptr);
  }

  DiagnosisBeginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisBeginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisBeginResponse& from);
  void MergeFrom(const DiagnosisBeginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisBeginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisBeginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string datetime = 1;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 1;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DiagnosisBeginResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DioctorCallRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DioctorCallRequest) */ {
 public:
  DioctorCallRequest();
  virtual ~DioctorCallRequest();

  DioctorCallRequest(const DioctorCallRequest& from);
  DioctorCallRequest(DioctorCallRequest&& from) noexcept
    : DioctorCallRequest() {
    *this = ::std::move(from);
  }

  inline DioctorCallRequest& operator=(const DioctorCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DioctorCallRequest& operator=(DioctorCallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DioctorCallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DioctorCallRequest* internal_default_instance() {
    return reinterpret_cast<const DioctorCallRequest*>(
               &_DioctorCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DioctorCallRequest* other);
  friend void swap(DioctorCallRequest& a, DioctorCallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DioctorCallRequest* New() const final {
    return CreateMaybeMessage<DioctorCallRequest>(nullptr);
  }

  DioctorCallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DioctorCallRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DioctorCallRequest& from);
  void MergeFrom(const DioctorCallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DioctorCallRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DioctorCallRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // @@protoc_insertion_point(class_scope:message.DioctorCallRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorCallResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorCallResponse) */ {
 public:
  DoctorCallResponse();
  virtual ~DoctorCallResponse();

  DoctorCallResponse(const DoctorCallResponse& from);
  DoctorCallResponse(DoctorCallResponse&& from) noexcept
    : DoctorCallResponse() {
    *this = ::std::move(from);
  }

  inline DoctorCallResponse& operator=(const DoctorCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorCallResponse& operator=(DoctorCallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorCallResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorCallResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorCallResponse*>(
               &_DoctorCallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DoctorCallResponse* other);
  friend void swap(DoctorCallResponse& a, DoctorCallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorCallResponse* New() const final {
    return CreateMaybeMessage<DoctorCallResponse>(nullptr);
  }

  DoctorCallResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorCallResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorCallResponse& from);
  void MergeFrom(const DoctorCallResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorCallResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorCallResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string res = 1;
  void clear_res();
  static const int kResFieldNumber = 1;
  const std::string& res() const;
  void set_res(const std::string& value);
  void set_res(std::string&& value);
  void set_res(const char* value);
  void set_res(const char* value, size_t size);
  std::string* mutable_res();
  std::string* release_res();
  void set_allocated_res(std::string* res);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string now_id = 3;
  void clear_now_id();
  static const int kNowIdFieldNumber = 3;
  const std::string& now_id() const;
  void set_now_id(const std::string& value);
  void set_now_id(std::string&& value);
  void set_now_id(const char* value);
  void set_now_id(const char* value, size_t size);
  std::string* mutable_now_id();
  std::string* release_now_id();
  void set_allocated_now_id(std::string* now_id);

  // string next_id = 4;
  void clear_next_id();
  static const int kNextIdFieldNumber = 4;
  const std::string& next_id() const;
  void set_next_id(const std::string& value);
  void set_next_id(std::string&& value);
  void set_next_id(const char* value);
  void set_next_id(const char* value, size_t size);
  std::string* mutable_next_id();
  std::string* release_next_id();
  void set_allocated_next_id(std::string* next_id);

  // string now = 5;
  void clear_now();
  static const int kNowFieldNumber = 5;
  const std::string& now() const;
  void set_now(const std::string& value);
  void set_now(std::string&& value);
  void set_now(const char* value);
  void set_now(const char* value, size_t size);
  std::string* mutable_now();
  std::string* release_now();
  void set_allocated_now(std::string* now);

  // string next = 6;
  void clear_next();
  static const int kNextFieldNumber = 6;
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const char* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);

  // string diagnosis_id = 7;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 7;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string diagnosis_name = 8;
  void clear_diagnosis_name();
  static const int kDiagnosisNameFieldNumber = 8;
  const std::string& diagnosis_name() const;
  void set_diagnosis_name(const std::string& value);
  void set_diagnosis_name(std::string&& value);
  void set_diagnosis_name(const char* value);
  void set_diagnosis_name(const char* value, size_t size);
  std::string* mutable_diagnosis_name();
  std::string* release_diagnosis_name();
  void set_allocated_diagnosis_name(std::string* diagnosis_name);

  // .message.PatientBaseInfo patient_info = 9;
  bool has_patient_info() const;
  void clear_patient_info();
  static const int kPatientInfoFieldNumber = 9;
  const ::message::PatientBaseInfo& patient_info() const;
  ::message::PatientBaseInfo* release_patient_info();
  ::message::PatientBaseInfo* mutable_patient_info();
  void set_allocated_patient_info(::message::PatientBaseInfo* patient_info);

  // .message.DiagnosisInfoResponse diagnosis_info = 10;
  bool has_diagnosis_info() const;
  void clear_diagnosis_info();
  static const int kDiagnosisInfoFieldNumber = 10;
  const ::message::DiagnosisInfoResponse& diagnosis_info() const;
  ::message::DiagnosisInfoResponse* release_diagnosis_info();
  ::message::DiagnosisInfoResponse* mutable_diagnosis_info();
  void set_allocated_diagnosis_info(::message::DiagnosisInfoResponse* diagnosis_info);

  // @@protoc_insertion_point(class_scope:message.DoctorCallResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr now_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr now_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_name_;
  ::message::PatientBaseInfo* patient_info_;
  ::message::DiagnosisInfoResponse* diagnosis_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisAcceptCallPush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisAcceptCallPush) */ {
 public:
  DiagnosisAcceptCallPush();
  virtual ~DiagnosisAcceptCallPush();

  DiagnosisAcceptCallPush(const DiagnosisAcceptCallPush& from);
  DiagnosisAcceptCallPush(DiagnosisAcceptCallPush&& from) noexcept
    : DiagnosisAcceptCallPush() {
    *this = ::std::move(from);
  }

  inline DiagnosisAcceptCallPush& operator=(const DiagnosisAcceptCallPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisAcceptCallPush& operator=(DiagnosisAcceptCallPush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisAcceptCallPush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisAcceptCallPush* internal_default_instance() {
    return reinterpret_cast<const DiagnosisAcceptCallPush*>(
               &_DiagnosisAcceptCallPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DiagnosisAcceptCallPush* other);
  friend void swap(DiagnosisAcceptCallPush& a, DiagnosisAcceptCallPush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisAcceptCallPush* New() const final {
    return CreateMaybeMessage<DiagnosisAcceptCallPush>(nullptr);
  }

  DiagnosisAcceptCallPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisAcceptCallPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisAcceptCallPush& from);
  void MergeFrom(const DiagnosisAcceptCallPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisAcceptCallPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisAcceptCallPush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string register_id = 1;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 1;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string now_id = 2;
  void clear_now_id();
  static const int kNowIdFieldNumber = 2;
  const std::string& now_id() const;
  void set_now_id(const std::string& value);
  void set_now_id(std::string&& value);
  void set_now_id(const char* value);
  void set_now_id(const char* value, size_t size);
  std::string* mutable_now_id();
  std::string* release_now_id();
  void set_allocated_now_id(std::string* now_id);

  // string next_id = 3;
  void clear_next_id();
  static const int kNextIdFieldNumber = 3;
  const std::string& next_id() const;
  void set_next_id(const std::string& value);
  void set_next_id(std::string&& value);
  void set_next_id(const char* value);
  void set_next_id(const char* value, size_t size);
  std::string* mutable_next_id();
  std::string* release_next_id();
  void set_allocated_next_id(std::string* next_id);

  // string now = 4;
  void clear_now();
  static const int kNowFieldNumber = 4;
  const std::string& now() const;
  void set_now(const std::string& value);
  void set_now(std::string&& value);
  void set_now(const char* value);
  void set_now(const char* value, size_t size);
  std::string* mutable_now();
  std::string* release_now();
  void set_allocated_now(std::string* now);

  // string next = 5;
  void clear_next();
  static const int kNextFieldNumber = 5;
  const std::string& next() const;
  void set_next(const std::string& value);
  void set_next(std::string&& value);
  void set_next(const char* value);
  void set_next(const char* value, size_t size);
  std::string* mutable_next();
  std::string* release_next();
  void set_allocated_next(std::string* next);

  // string doctor_id = 6;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 6;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string doctor_name = 7;
  void clear_doctor_name();
  static const int kDoctorNameFieldNumber = 7;
  const std::string& doctor_name() const;
  void set_doctor_name(const std::string& value);
  void set_doctor_name(std::string&& value);
  void set_doctor_name(const char* value);
  void set_doctor_name(const char* value, size_t size);
  std::string* mutable_doctor_name();
  std::string* release_doctor_name();
  void set_allocated_doctor_name(std::string* doctor_name);

  // .message.PatientBaseInfo patient_info = 8;
  bool has_patient_info() const;
  void clear_patient_info();
  static const int kPatientInfoFieldNumber = 8;
  const ::message::PatientBaseInfo& patient_info() const;
  ::message::PatientBaseInfo* release_patient_info();
  ::message::PatientBaseInfo* mutable_patient_info();
  void set_allocated_patient_info(::message::PatientBaseInfo* patient_info);

  // .message.DoctorInfoResponse doctor_info = 9;
  bool has_doctor_info() const;
  void clear_doctor_info();
  static const int kDoctorInfoFieldNumber = 9;
  const ::message::DoctorInfoResponse& doctor_info() const;
  ::message::DoctorInfoResponse* release_doctor_info();
  ::message::DoctorInfoResponse* mutable_doctor_info();
  void set_allocated_doctor_info(::message::DoctorInfoResponse* doctor_info);

  // @@protoc_insertion_point(class_scope:message.DiagnosisAcceptCallPush)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr now_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr now_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_name_;
  ::message::PatientBaseInfo* patient_info_;
  ::message::DoctorInfoResponse* doctor_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisResponseCallRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisResponseCallRequest) */ {
 public:
  DiagnosisResponseCallRequest();
  virtual ~DiagnosisResponseCallRequest();

  DiagnosisResponseCallRequest(const DiagnosisResponseCallRequest& from);
  DiagnosisResponseCallRequest(DiagnosisResponseCallRequest&& from) noexcept
    : DiagnosisResponseCallRequest() {
    *this = ::std::move(from);
  }

  inline DiagnosisResponseCallRequest& operator=(const DiagnosisResponseCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisResponseCallRequest& operator=(DiagnosisResponseCallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisResponseCallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisResponseCallRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnosisResponseCallRequest*>(
               &_DiagnosisResponseCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DiagnosisResponseCallRequest* other);
  friend void swap(DiagnosisResponseCallRequest& a, DiagnosisResponseCallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisResponseCallRequest* New() const final {
    return CreateMaybeMessage<DiagnosisResponseCallRequest>(nullptr);
  }

  DiagnosisResponseCallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisResponseCallRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisResponseCallRequest& from);
  void MergeFrom(const DiagnosisResponseCallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisResponseCallRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisResponseCallRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);

  // string doctor_id = 2;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 2;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string register_id = 3;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 3;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisResponseCallRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisResponseCallResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisResponseCallResponse) */ {
 public:
  DiagnosisResponseCallResponse();
  virtual ~DiagnosisResponseCallResponse();

  DiagnosisResponseCallResponse(const DiagnosisResponseCallResponse& from);
  DiagnosisResponseCallResponse(DiagnosisResponseCallResponse&& from) noexcept
    : DiagnosisResponseCallResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisResponseCallResponse& operator=(const DiagnosisResponseCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisResponseCallResponse& operator=(DiagnosisResponseCallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisResponseCallResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisResponseCallResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisResponseCallResponse*>(
               &_DiagnosisResponseCallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(DiagnosisResponseCallResponse* other);
  friend void swap(DiagnosisResponseCallResponse& a, DiagnosisResponseCallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisResponseCallResponse* New() const final {
    return CreateMaybeMessage<DiagnosisResponseCallResponse>(nullptr);
  }

  DiagnosisResponseCallResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisResponseCallResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisResponseCallResponse& from);
  void MergeFrom(const DiagnosisResponseCallResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisResponseCallResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisResponseCallResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);

  // string room = 2;
  void clear_room();
  static const int kRoomFieldNumber = 2;
  const std::string& room() const;
  void set_room(const std::string& value);
  void set_room(std::string&& value);
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  std::string* mutable_room();
  std::string* release_room();
  void set_allocated_room(std::string* room);

  // string register_id = 3;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 3;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // string reason = 5;
  void clear_reason();
  static const int kReasonFieldNumber = 5;
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:message.DiagnosisResponseCallResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorAcceptCallResultPush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorAcceptCallResultPush) */ {
 public:
  DoctorAcceptCallResultPush();
  virtual ~DoctorAcceptCallResultPush();

  DoctorAcceptCallResultPush(const DoctorAcceptCallResultPush& from);
  DoctorAcceptCallResultPush(DoctorAcceptCallResultPush&& from) noexcept
    : DoctorAcceptCallResultPush() {
    *this = ::std::move(from);
  }

  inline DoctorAcceptCallResultPush& operator=(const DoctorAcceptCallResultPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorAcceptCallResultPush& operator=(DoctorAcceptCallResultPush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorAcceptCallResultPush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorAcceptCallResultPush* internal_default_instance() {
    return reinterpret_cast<const DoctorAcceptCallResultPush*>(
               &_DoctorAcceptCallResultPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DoctorAcceptCallResultPush* other);
  friend void swap(DoctorAcceptCallResultPush& a, DoctorAcceptCallResultPush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorAcceptCallResultPush* New() const final {
    return CreateMaybeMessage<DoctorAcceptCallResultPush>(nullptr);
  }

  DoctorAcceptCallResultPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorAcceptCallResultPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorAcceptCallResultPush& from);
  void MergeFrom(const DoctorAcceptCallResultPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorAcceptCallResultPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorAcceptCallResultPush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // @@protoc_insertion_point(class_scope:message.DoctorAcceptCallResultPush)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorSurePassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorSurePassRequest) */ {
 public:
  DoctorSurePassRequest();
  virtual ~DoctorSurePassRequest();

  DoctorSurePassRequest(const DoctorSurePassRequest& from);
  DoctorSurePassRequest(DoctorSurePassRequest&& from) noexcept
    : DoctorSurePassRequest() {
    *this = ::std::move(from);
  }

  inline DoctorSurePassRequest& operator=(const DoctorSurePassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorSurePassRequest& operator=(DoctorSurePassRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorSurePassRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorSurePassRequest* internal_default_instance() {
    return reinterpret_cast<const DoctorSurePassRequest*>(
               &_DoctorSurePassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DoctorSurePassRequest* other);
  friend void swap(DoctorSurePassRequest& a, DoctorSurePassRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorSurePassRequest* New() const final {
    return CreateMaybeMessage<DoctorSurePassRequest>(nullptr);
  }

  DoctorSurePassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorSurePassRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorSurePassRequest& from);
  void MergeFrom(const DoctorSurePassRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorSurePassRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorSurePassRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // sint32 wait_time = 3;
  void clear_wait_time();
  static const int kWaitTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_time() const;
  void set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:message.DoctorSurePassRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorSurePassResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorSurePassResponse) */ {
 public:
  DoctorSurePassResponse();
  virtual ~DoctorSurePassResponse();

  DoctorSurePassResponse(const DoctorSurePassResponse& from);
  DoctorSurePassResponse(DoctorSurePassResponse&& from) noexcept
    : DoctorSurePassResponse() {
    *this = ::std::move(from);
  }

  inline DoctorSurePassResponse& operator=(const DoctorSurePassResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorSurePassResponse& operator=(DoctorSurePassResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorSurePassResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorSurePassResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorSurePassResponse*>(
               &_DoctorSurePassResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DoctorSurePassResponse* other);
  friend void swap(DoctorSurePassResponse& a, DoctorSurePassResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorSurePassResponse* New() const final {
    return CreateMaybeMessage<DoctorSurePassResponse>(nullptr);
  }

  DoctorSurePassResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorSurePassResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorSurePassResponse& from);
  void MergeFrom(const DoctorSurePassResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorSurePassResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorSurePassResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string datetime = 1;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 1;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string doctor_id = 3;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 3;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string result = 4;
  void clear_result();
  static const int kResultFieldNumber = 4;
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // string reason = 5;
  void clear_reason();
  static const int kReasonFieldNumber = 5;
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:message.DoctorSurePassResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorSurePassPush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorSurePassPush) */ {
 public:
  DoctorSurePassPush();
  virtual ~DoctorSurePassPush();

  DoctorSurePassPush(const DoctorSurePassPush& from);
  DoctorSurePassPush(DoctorSurePassPush&& from) noexcept
    : DoctorSurePassPush() {
    *this = ::std::move(from);
  }

  inline DoctorSurePassPush& operator=(const DoctorSurePassPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorSurePassPush& operator=(DoctorSurePassPush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorSurePassPush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorSurePassPush* internal_default_instance() {
    return reinterpret_cast<const DoctorSurePassPush*>(
               &_DoctorSurePassPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(DoctorSurePassPush* other);
  friend void swap(DoctorSurePassPush& a, DoctorSurePassPush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorSurePassPush* New() const final {
    return CreateMaybeMessage<DoctorSurePassPush>(nullptr);
  }

  DoctorSurePassPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorSurePassPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorSurePassPush& from);
  void MergeFrom(const DoctorSurePassPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorSurePassPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorSurePassPush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string datetime = 1;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 1;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string doctor_id = 3;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 3;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string patient_id = 4;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 4;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.DoctorSurePassPush)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorStopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorStopRequest) */ {
 public:
  DoctorStopRequest();
  virtual ~DoctorStopRequest();

  DoctorStopRequest(const DoctorStopRequest& from);
  DoctorStopRequest(DoctorStopRequest&& from) noexcept
    : DoctorStopRequest() {
    *this = ::std::move(from);
  }

  inline DoctorStopRequest& operator=(const DoctorStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorStopRequest& operator=(DoctorStopRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorStopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorStopRequest* internal_default_instance() {
    return reinterpret_cast<const DoctorStopRequest*>(
               &_DoctorStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(DoctorStopRequest* other);
  friend void swap(DoctorStopRequest& a, DoctorStopRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorStopRequest* New() const final {
    return CreateMaybeMessage<DoctorStopRequest>(nullptr);
  }

  DoctorStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorStopRequest& from);
  void MergeFrom(const DoctorStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorStopRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string patient_id = 3;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 3;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // string diagnosis_id = 4;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 4;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string datetime = 5;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 5;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // string treat_main = 6;
  void clear_treat_main();
  static const int kTreatMainFieldNumber = 6;
  const std::string& treat_main() const;
  void set_treat_main(const std::string& value);
  void set_treat_main(std::string&& value);
  void set_treat_main(const char* value);
  void set_treat_main(const char* value, size_t size);
  std::string* mutable_treat_main();
  std::string* release_treat_main();
  void set_allocated_treat_main(std::string* treat_main);

  // string treat_propose = 7;
  void clear_treat_propose();
  static const int kTreatProposeFieldNumber = 7;
  const std::string& treat_propose() const;
  void set_treat_propose(const std::string& value);
  void set_treat_propose(std::string&& value);
  void set_treat_propose(const char* value);
  void set_treat_propose(const char* value, size_t size);
  std::string* mutable_treat_propose();
  std::string* release_treat_propose();
  void set_allocated_treat_propose(std::string* treat_propose);

  // string deal_propose = 8;
  void clear_deal_propose();
  static const int kDealProposeFieldNumber = 8;
  const std::string& deal_propose() const;
  void set_deal_propose(const std::string& value);
  void set_deal_propose(std::string&& value);
  void set_deal_propose(const char* value);
  void set_deal_propose(const char* value, size_t size);
  std::string* mutable_deal_propose();
  std::string* release_deal_propose();
  void set_allocated_deal_propose(std::string* deal_propose);

  // string prescript_propose = 9;
  void clear_prescript_propose();
  static const int kPrescriptProposeFieldNumber = 9;
  const std::string& prescript_propose() const;
  void set_prescript_propose(const std::string& value);
  void set_prescript_propose(std::string&& value);
  void set_prescript_propose(const char* value);
  void set_prescript_propose(const char* value, size_t size);
  std::string* mutable_prescript_propose();
  std::string* release_prescript_propose();
  void set_allocated_prescript_propose(std::string* prescript_propose);

  // @@protoc_insertion_point(class_scope:message.DoctorStopRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr treat_main_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr treat_propose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deal_propose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prescript_propose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorCompletePush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorCompletePush) */ {
 public:
  DoctorCompletePush();
  virtual ~DoctorCompletePush();

  DoctorCompletePush(const DoctorCompletePush& from);
  DoctorCompletePush(DoctorCompletePush&& from) noexcept
    : DoctorCompletePush() {
    *this = ::std::move(from);
  }

  inline DoctorCompletePush& operator=(const DoctorCompletePush& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorCompletePush& operator=(DoctorCompletePush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorCompletePush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorCompletePush* internal_default_instance() {
    return reinterpret_cast<const DoctorCompletePush*>(
               &_DoctorCompletePush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(DoctorCompletePush* other);
  friend void swap(DoctorCompletePush& a, DoctorCompletePush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorCompletePush* New() const final {
    return CreateMaybeMessage<DoctorCompletePush>(nullptr);
  }

  DoctorCompletePush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorCompletePush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorCompletePush& from);
  void MergeFrom(const DoctorCompletePush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorCompletePush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorCompletePush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string treat_main = 2;
  void clear_treat_main();
  static const int kTreatMainFieldNumber = 2;
  const std::string& treat_main() const;
  void set_treat_main(const std::string& value);
  void set_treat_main(std::string&& value);
  void set_treat_main(const char* value);
  void set_treat_main(const char* value, size_t size);
  std::string* mutable_treat_main();
  std::string* release_treat_main();
  void set_allocated_treat_main(std::string* treat_main);

  // string treat_propose = 3;
  void clear_treat_propose();
  static const int kTreatProposeFieldNumber = 3;
  const std::string& treat_propose() const;
  void set_treat_propose(const std::string& value);
  void set_treat_propose(std::string&& value);
  void set_treat_propose(const char* value);
  void set_treat_propose(const char* value, size_t size);
  std::string* mutable_treat_propose();
  std::string* release_treat_propose();
  void set_allocated_treat_propose(std::string* treat_propose);

  // string deal_propose = 4;
  void clear_deal_propose();
  static const int kDealProposeFieldNumber = 4;
  const std::string& deal_propose() const;
  void set_deal_propose(const std::string& value);
  void set_deal_propose(std::string&& value);
  void set_deal_propose(const char* value);
  void set_deal_propose(const char* value, size_t size);
  std::string* mutable_deal_propose();
  std::string* release_deal_propose();
  void set_allocated_deal_propose(std::string* deal_propose);

  // string prescript_propose = 5;
  void clear_prescript_propose();
  static const int kPrescriptProposeFieldNumber = 5;
  const std::string& prescript_propose() const;
  void set_prescript_propose(const std::string& value);
  void set_prescript_propose(std::string&& value);
  void set_prescript_propose(const char* value);
  void set_prescript_propose(const char* value, size_t size);
  std::string* mutable_prescript_propose();
  std::string* release_prescript_propose();
  void set_allocated_prescript_propose(std::string* prescript_propose);

  // @@protoc_insertion_point(class_scope:message.DoctorCompletePush)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr treat_main_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr treat_propose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deal_propose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prescript_propose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorStopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorStopResponse) */ {
 public:
  DoctorStopResponse();
  virtual ~DoctorStopResponse();

  DoctorStopResponse(const DoctorStopResponse& from);
  DoctorStopResponse(DoctorStopResponse&& from) noexcept
    : DoctorStopResponse() {
    *this = ::std::move(from);
  }

  inline DoctorStopResponse& operator=(const DoctorStopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorStopResponse& operator=(DoctorStopResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorStopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorStopResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorStopResponse*>(
               &_DoctorStopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(DoctorStopResponse* other);
  friend void swap(DoctorStopResponse& a, DoctorStopResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorStopResponse* New() const final {
    return CreateMaybeMessage<DoctorStopResponse>(nullptr);
  }

  DoctorStopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorStopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorStopResponse& from);
  void MergeFrom(const DoctorStopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorStopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorStopResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:message.DoctorStopResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorPauseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorPauseRequest) */ {
 public:
  DoctorPauseRequest();
  virtual ~DoctorPauseRequest();

  DoctorPauseRequest(const DoctorPauseRequest& from);
  DoctorPauseRequest(DoctorPauseRequest&& from) noexcept
    : DoctorPauseRequest() {
    *this = ::std::move(from);
  }

  inline DoctorPauseRequest& operator=(const DoctorPauseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorPauseRequest& operator=(DoctorPauseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorPauseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorPauseRequest* internal_default_instance() {
    return reinterpret_cast<const DoctorPauseRequest*>(
               &_DoctorPauseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(DoctorPauseRequest* other);
  friend void swap(DoctorPauseRequest& a, DoctorPauseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorPauseRequest* New() const final {
    return CreateMaybeMessage<DoctorPauseRequest>(nullptr);
  }

  DoctorPauseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorPauseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorPauseRequest& from);
  void MergeFrom(const DoctorPauseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorPauseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorPauseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string diagnosis_id = 3;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 3;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string patient_id = 4;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 4;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.DoctorPauseRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorPauseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorPauseResponse) */ {
 public:
  DoctorPauseResponse();
  virtual ~DoctorPauseResponse();

  DoctorPauseResponse(const DoctorPauseResponse& from);
  DoctorPauseResponse(DoctorPauseResponse&& from) noexcept
    : DoctorPauseResponse() {
    *this = ::std::move(from);
  }

  inline DoctorPauseResponse& operator=(const DoctorPauseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorPauseResponse& operator=(DoctorPauseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorPauseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorPauseResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorPauseResponse*>(
               &_DoctorPauseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(DoctorPauseResponse* other);
  friend void swap(DoctorPauseResponse& a, DoctorPauseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorPauseResponse* New() const final {
    return CreateMaybeMessage<DoctorPauseResponse>(nullptr);
  }

  DoctorPauseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorPauseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorPauseResponse& from);
  void MergeFrom(const DoctorPauseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorPauseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorPauseResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string doctor_id = 3;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 3;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string patient_id = 4;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 4;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.DoctorPauseResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisPausePush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisPausePush) */ {
 public:
  DiagnosisPausePush();
  virtual ~DiagnosisPausePush();

  DiagnosisPausePush(const DiagnosisPausePush& from);
  DiagnosisPausePush(DiagnosisPausePush&& from) noexcept
    : DiagnosisPausePush() {
    *this = ::std::move(from);
  }

  inline DiagnosisPausePush& operator=(const DiagnosisPausePush& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisPausePush& operator=(DiagnosisPausePush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisPausePush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisPausePush* internal_default_instance() {
    return reinterpret_cast<const DiagnosisPausePush*>(
               &_DiagnosisPausePush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(DiagnosisPausePush* other);
  friend void swap(DiagnosisPausePush& a, DiagnosisPausePush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisPausePush* New() const final {
    return CreateMaybeMessage<DiagnosisPausePush>(nullptr);
  }

  DiagnosisPausePush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisPausePush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisPausePush& from);
  void MergeFrom(const DiagnosisPausePush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisPausePush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisPausePush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string doctor_id = 3;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 3;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string patient_id = 4;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 4;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisPausePush)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisPauseRecoverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisPauseRecoverRequest) */ {
 public:
  DiagnosisPauseRecoverRequest();
  virtual ~DiagnosisPauseRecoverRequest();

  DiagnosisPauseRecoverRequest(const DiagnosisPauseRecoverRequest& from);
  DiagnosisPauseRecoverRequest(DiagnosisPauseRecoverRequest&& from) noexcept
    : DiagnosisPauseRecoverRequest() {
    *this = ::std::move(from);
  }

  inline DiagnosisPauseRecoverRequest& operator=(const DiagnosisPauseRecoverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisPauseRecoverRequest& operator=(DiagnosisPauseRecoverRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisPauseRecoverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisPauseRecoverRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnosisPauseRecoverRequest*>(
               &_DiagnosisPauseRecoverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(DiagnosisPauseRecoverRequest* other);
  friend void swap(DiagnosisPauseRecoverRequest& a, DiagnosisPauseRecoverRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisPauseRecoverRequest* New() const final {
    return CreateMaybeMessage<DiagnosisPauseRecoverRequest>(nullptr);
  }

  DiagnosisPauseRecoverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisPauseRecoverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisPauseRecoverRequest& from);
  void MergeFrom(const DiagnosisPauseRecoverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisPauseRecoverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisPauseRecoverRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string patient_id = 3;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 3;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisPauseRecoverRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisPauseRecoverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisPauseRecoverResponse) */ {
 public:
  DiagnosisPauseRecoverResponse();
  virtual ~DiagnosisPauseRecoverResponse();

  DiagnosisPauseRecoverResponse(const DiagnosisPauseRecoverResponse& from);
  DiagnosisPauseRecoverResponse(DiagnosisPauseRecoverResponse&& from) noexcept
    : DiagnosisPauseRecoverResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisPauseRecoverResponse& operator=(const DiagnosisPauseRecoverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisPauseRecoverResponse& operator=(DiagnosisPauseRecoverResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisPauseRecoverResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisPauseRecoverResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisPauseRecoverResponse*>(
               &_DiagnosisPauseRecoverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(DiagnosisPauseRecoverResponse* other);
  friend void swap(DiagnosisPauseRecoverResponse& a, DiagnosisPauseRecoverResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisPauseRecoverResponse* New() const final {
    return CreateMaybeMessage<DiagnosisPauseRecoverResponse>(nullptr);
  }

  DiagnosisPauseRecoverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisPauseRecoverResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisPauseRecoverResponse& from);
  void MergeFrom(const DiagnosisPauseRecoverResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisPauseRecoverResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisPauseRecoverResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string patient_id = 3;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 3;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisPauseRecoverResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisPassRecoverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisPassRecoverRequest) */ {
 public:
  DiagnosisPassRecoverRequest();
  virtual ~DiagnosisPassRecoverRequest();

  DiagnosisPassRecoverRequest(const DiagnosisPassRecoverRequest& from);
  DiagnosisPassRecoverRequest(DiagnosisPassRecoverRequest&& from) noexcept
    : DiagnosisPassRecoverRequest() {
    *this = ::std::move(from);
  }

  inline DiagnosisPassRecoverRequest& operator=(const DiagnosisPassRecoverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisPassRecoverRequest& operator=(DiagnosisPassRecoverRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisPassRecoverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisPassRecoverRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnosisPassRecoverRequest*>(
               &_DiagnosisPassRecoverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(DiagnosisPassRecoverRequest* other);
  friend void swap(DiagnosisPassRecoverRequest& a, DiagnosisPassRecoverRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisPassRecoverRequest* New() const final {
    return CreateMaybeMessage<DiagnosisPassRecoverRequest>(nullptr);
  }

  DiagnosisPassRecoverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisPassRecoverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisPassRecoverRequest& from);
  void MergeFrom(const DiagnosisPassRecoverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisPassRecoverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisPassRecoverRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string patient_id = 3;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 3;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisPassRecoverRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisPassRecoverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisPassRecoverResponse) */ {
 public:
  DiagnosisPassRecoverResponse();
  virtual ~DiagnosisPassRecoverResponse();

  DiagnosisPassRecoverResponse(const DiagnosisPassRecoverResponse& from);
  DiagnosisPassRecoverResponse(DiagnosisPassRecoverResponse&& from) noexcept
    : DiagnosisPassRecoverResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisPassRecoverResponse& operator=(const DiagnosisPassRecoverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisPassRecoverResponse& operator=(DiagnosisPassRecoverResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisPassRecoverResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisPassRecoverResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisPassRecoverResponse*>(
               &_DiagnosisPassRecoverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(DiagnosisPassRecoverResponse* other);
  friend void swap(DiagnosisPassRecoverResponse& a, DiagnosisPassRecoverResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisPassRecoverResponse* New() const final {
    return CreateMaybeMessage<DiagnosisPassRecoverResponse>(nullptr);
  }

  DiagnosisPassRecoverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisPassRecoverResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisPassRecoverResponse& from);
  void MergeFrom(const DiagnosisPassRecoverResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisPassRecoverResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisPassRecoverResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string register_id = 2;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 2;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string patient_id = 3;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 3;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisPassRecoverResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorLeaveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorLeaveRequest) */ {
 public:
  DoctorLeaveRequest();
  virtual ~DoctorLeaveRequest();

  DoctorLeaveRequest(const DoctorLeaveRequest& from);
  DoctorLeaveRequest(DoctorLeaveRequest&& from) noexcept
    : DoctorLeaveRequest() {
    *this = ::std::move(from);
  }

  inline DoctorLeaveRequest& operator=(const DoctorLeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorLeaveRequest& operator=(DoctorLeaveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorLeaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorLeaveRequest* internal_default_instance() {
    return reinterpret_cast<const DoctorLeaveRequest*>(
               &_DoctorLeaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(DoctorLeaveRequest* other);
  friend void swap(DoctorLeaveRequest& a, DoctorLeaveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorLeaveRequest* New() const final {
    return CreateMaybeMessage<DoctorLeaveRequest>(nullptr);
  }

  DoctorLeaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorLeaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorLeaveRequest& from);
  void MergeFrom(const DoctorLeaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorLeaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorLeaveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // @@protoc_insertion_point(class_scope:message.DoctorLeaveRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorLeaveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorLeaveResponse) */ {
 public:
  DoctorLeaveResponse();
  virtual ~DoctorLeaveResponse();

  DoctorLeaveResponse(const DoctorLeaveResponse& from);
  DoctorLeaveResponse(DoctorLeaveResponse&& from) noexcept
    : DoctorLeaveResponse() {
    *this = ::std::move(from);
  }

  inline DoctorLeaveResponse& operator=(const DoctorLeaveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorLeaveResponse& operator=(DoctorLeaveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorLeaveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorLeaveResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorLeaveResponse*>(
               &_DoctorLeaveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(DoctorLeaveResponse* other);
  friend void swap(DoctorLeaveResponse& a, DoctorLeaveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorLeaveResponse* New() const final {
    return CreateMaybeMessage<DoctorLeaveResponse>(nullptr);
  }

  DoctorLeaveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorLeaveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorLeaveResponse& from);
  void MergeFrom(const DoctorLeaveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorLeaveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorLeaveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DoctorLeaveResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorLeaveRecoverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorLeaveRecoverRequest) */ {
 public:
  DoctorLeaveRecoverRequest();
  virtual ~DoctorLeaveRecoverRequest();

  DoctorLeaveRecoverRequest(const DoctorLeaveRecoverRequest& from);
  DoctorLeaveRecoverRequest(DoctorLeaveRecoverRequest&& from) noexcept
    : DoctorLeaveRecoverRequest() {
    *this = ::std::move(from);
  }

  inline DoctorLeaveRecoverRequest& operator=(const DoctorLeaveRecoverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorLeaveRecoverRequest& operator=(DoctorLeaveRecoverRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorLeaveRecoverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorLeaveRecoverRequest* internal_default_instance() {
    return reinterpret_cast<const DoctorLeaveRecoverRequest*>(
               &_DoctorLeaveRecoverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(DoctorLeaveRecoverRequest* other);
  friend void swap(DoctorLeaveRecoverRequest& a, DoctorLeaveRecoverRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorLeaveRecoverRequest* New() const final {
    return CreateMaybeMessage<DoctorLeaveRecoverRequest>(nullptr);
  }

  DoctorLeaveRecoverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorLeaveRecoverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorLeaveRecoverRequest& from);
  void MergeFrom(const DoctorLeaveRecoverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorLeaveRecoverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorLeaveRecoverRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // @@protoc_insertion_point(class_scope:message.DoctorLeaveRecoverRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorLeaveRecoverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorLeaveRecoverResponse) */ {
 public:
  DoctorLeaveRecoverResponse();
  virtual ~DoctorLeaveRecoverResponse();

  DoctorLeaveRecoverResponse(const DoctorLeaveRecoverResponse& from);
  DoctorLeaveRecoverResponse(DoctorLeaveRecoverResponse&& from) noexcept
    : DoctorLeaveRecoverResponse() {
    *this = ::std::move(from);
  }

  inline DoctorLeaveRecoverResponse& operator=(const DoctorLeaveRecoverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorLeaveRecoverResponse& operator=(DoctorLeaveRecoverResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorLeaveRecoverResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorLeaveRecoverResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorLeaveRecoverResponse*>(
               &_DoctorLeaveRecoverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(DoctorLeaveRecoverResponse* other);
  friend void swap(DoctorLeaveRecoverResponse& a, DoctorLeaveRecoverResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorLeaveRecoverResponse* New() const final {
    return CreateMaybeMessage<DoctorLeaveRecoverResponse>(nullptr);
  }

  DoctorLeaveRecoverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorLeaveRecoverResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorLeaveRecoverResponse& from);
  void MergeFrom(const DoctorLeaveRecoverResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorLeaveRecoverResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorLeaveRecoverResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DoctorLeaveRecoverResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorCompleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorCompleteRequest) */ {
 public:
  DoctorCompleteRequest();
  virtual ~DoctorCompleteRequest();

  DoctorCompleteRequest(const DoctorCompleteRequest& from);
  DoctorCompleteRequest(DoctorCompleteRequest&& from) noexcept
    : DoctorCompleteRequest() {
    *this = ::std::move(from);
  }

  inline DoctorCompleteRequest& operator=(const DoctorCompleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorCompleteRequest& operator=(DoctorCompleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorCompleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorCompleteRequest* internal_default_instance() {
    return reinterpret_cast<const DoctorCompleteRequest*>(
               &_DoctorCompleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(DoctorCompleteRequest* other);
  friend void swap(DoctorCompleteRequest& a, DoctorCompleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorCompleteRequest* New() const final {
    return CreateMaybeMessage<DoctorCompleteRequest>(nullptr);
  }

  DoctorCompleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorCompleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorCompleteRequest& from);
  void MergeFrom(const DoctorCompleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorCompleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorCompleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DoctorCompleteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DoctorCompleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorCompleteResponse) */ {
 public:
  DoctorCompleteResponse();
  virtual ~DoctorCompleteResponse();

  DoctorCompleteResponse(const DoctorCompleteResponse& from);
  DoctorCompleteResponse(DoctorCompleteResponse&& from) noexcept
    : DoctorCompleteResponse() {
    *this = ::std::move(from);
  }

  inline DoctorCompleteResponse& operator=(const DoctorCompleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorCompleteResponse& operator=(DoctorCompleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorCompleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorCompleteResponse* internal_default_instance() {
    return reinterpret_cast<const DoctorCompleteResponse*>(
               &_DoctorCompleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(DoctorCompleteResponse* other);
  friend void swap(DoctorCompleteResponse& a, DoctorCompleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorCompleteResponse* New() const final {
    return CreateMaybeMessage<DoctorCompleteResponse>(nullptr);
  }

  DoctorCompleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorCompleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorCompleteResponse& from);
  void MergeFrom(const DoctorCompleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorCompleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorCompleteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string doctor_id = 1;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 1;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DoctorCompleteResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisLeaveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisLeaveRequest) */ {
 public:
  DiagnosisLeaveRequest();
  virtual ~DiagnosisLeaveRequest();

  DiagnosisLeaveRequest(const DiagnosisLeaveRequest& from);
  DiagnosisLeaveRequest(DiagnosisLeaveRequest&& from) noexcept
    : DiagnosisLeaveRequest() {
    *this = ::std::move(from);
  }

  inline DiagnosisLeaveRequest& operator=(const DiagnosisLeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisLeaveRequest& operator=(DiagnosisLeaveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisLeaveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisLeaveRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnosisLeaveRequest*>(
               &_DiagnosisLeaveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(DiagnosisLeaveRequest* other);
  friend void swap(DiagnosisLeaveRequest& a, DiagnosisLeaveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisLeaveRequest* New() const final {
    return CreateMaybeMessage<DiagnosisLeaveRequest>(nullptr);
  }

  DiagnosisLeaveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisLeaveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisLeaveRequest& from);
  void MergeFrom(const DiagnosisLeaveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisLeaveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisLeaveRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisLeaveRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisLeaveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisLeaveResponse) */ {
 public:
  DiagnosisLeaveResponse();
  virtual ~DiagnosisLeaveResponse();

  DiagnosisLeaveResponse(const DiagnosisLeaveResponse& from);
  DiagnosisLeaveResponse(DiagnosisLeaveResponse&& from) noexcept
    : DiagnosisLeaveResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisLeaveResponse& operator=(const DiagnosisLeaveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisLeaveResponse& operator=(DiagnosisLeaveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisLeaveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisLeaveResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisLeaveResponse*>(
               &_DiagnosisLeaveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(DiagnosisLeaveResponse* other);
  friend void swap(DiagnosisLeaveResponse& a, DiagnosisLeaveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisLeaveResponse* New() const final {
    return CreateMaybeMessage<DiagnosisLeaveResponse>(nullptr);
  }

  DiagnosisLeaveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisLeaveResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisLeaveResponse& from);
  void MergeFrom(const DiagnosisLeaveResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisLeaveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisLeaveResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DiagnosisLeaveResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisLeaveRecoverRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisLeaveRecoverRequest) */ {
 public:
  DiagnosisLeaveRecoverRequest();
  virtual ~DiagnosisLeaveRecoverRequest();

  DiagnosisLeaveRecoverRequest(const DiagnosisLeaveRecoverRequest& from);
  DiagnosisLeaveRecoverRequest(DiagnosisLeaveRecoverRequest&& from) noexcept
    : DiagnosisLeaveRecoverRequest() {
    *this = ::std::move(from);
  }

  inline DiagnosisLeaveRecoverRequest& operator=(const DiagnosisLeaveRecoverRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisLeaveRecoverRequest& operator=(DiagnosisLeaveRecoverRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisLeaveRecoverRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisLeaveRecoverRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnosisLeaveRecoverRequest*>(
               &_DiagnosisLeaveRecoverRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(DiagnosisLeaveRecoverRequest* other);
  friend void swap(DiagnosisLeaveRecoverRequest& a, DiagnosisLeaveRecoverRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisLeaveRecoverRequest* New() const final {
    return CreateMaybeMessage<DiagnosisLeaveRecoverRequest>(nullptr);
  }

  DiagnosisLeaveRecoverRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisLeaveRecoverRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisLeaveRecoverRequest& from);
  void MergeFrom(const DiagnosisLeaveRecoverRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisLeaveRecoverRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisLeaveRecoverRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // @@protoc_insertion_point(class_scope:message.DiagnosisLeaveRecoverRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisLeaveRecoverResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisLeaveRecoverResponse) */ {
 public:
  DiagnosisLeaveRecoverResponse();
  virtual ~DiagnosisLeaveRecoverResponse();

  DiagnosisLeaveRecoverResponse(const DiagnosisLeaveRecoverResponse& from);
  DiagnosisLeaveRecoverResponse(DiagnosisLeaveRecoverResponse&& from) noexcept
    : DiagnosisLeaveRecoverResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisLeaveRecoverResponse& operator=(const DiagnosisLeaveRecoverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisLeaveRecoverResponse& operator=(DiagnosisLeaveRecoverResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisLeaveRecoverResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisLeaveRecoverResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisLeaveRecoverResponse*>(
               &_DiagnosisLeaveRecoverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(DiagnosisLeaveRecoverResponse* other);
  friend void swap(DiagnosisLeaveRecoverResponse& a, DiagnosisLeaveRecoverResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisLeaveRecoverResponse* New() const final {
    return CreateMaybeMessage<DiagnosisLeaveRecoverResponse>(nullptr);
  }

  DiagnosisLeaveRecoverResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisLeaveRecoverResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisLeaveRecoverResponse& from);
  void MergeFrom(const DiagnosisLeaveRecoverResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisLeaveRecoverResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisLeaveRecoverResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DiagnosisLeaveRecoverResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisCompleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisCompleteRequest) */ {
 public:
  DiagnosisCompleteRequest();
  virtual ~DiagnosisCompleteRequest();

  DiagnosisCompleteRequest(const DiagnosisCompleteRequest& from);
  DiagnosisCompleteRequest(DiagnosisCompleteRequest&& from) noexcept
    : DiagnosisCompleteRequest() {
    *this = ::std::move(from);
  }

  inline DiagnosisCompleteRequest& operator=(const DiagnosisCompleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisCompleteRequest& operator=(DiagnosisCompleteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisCompleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisCompleteRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnosisCompleteRequest*>(
               &_DiagnosisCompleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(DiagnosisCompleteRequest* other);
  friend void swap(DiagnosisCompleteRequest& a, DiagnosisCompleteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisCompleteRequest* New() const final {
    return CreateMaybeMessage<DiagnosisCompleteRequest>(nullptr);
  }

  DiagnosisCompleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisCompleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisCompleteRequest& from);
  void MergeFrom(const DiagnosisCompleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisCompleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisCompleteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DiagnosisCompleteRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisCompleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisCompleteResponse) */ {
 public:
  DiagnosisCompleteResponse();
  virtual ~DiagnosisCompleteResponse();

  DiagnosisCompleteResponse(const DiagnosisCompleteResponse& from);
  DiagnosisCompleteResponse(DiagnosisCompleteResponse&& from) noexcept
    : DiagnosisCompleteResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisCompleteResponse& operator=(const DiagnosisCompleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisCompleteResponse& operator=(DiagnosisCompleteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisCompleteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisCompleteResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisCompleteResponse*>(
               &_DiagnosisCompleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(DiagnosisCompleteResponse* other);
  friend void swap(DiagnosisCompleteResponse& a, DiagnosisCompleteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisCompleteResponse* New() const final {
    return CreateMaybeMessage<DiagnosisCompleteResponse>(nullptr);
  }

  DiagnosisCompleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisCompleteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisCompleteResponse& from);
  void MergeFrom(const DiagnosisCompleteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisCompleteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisCompleteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DiagnosisCompleteResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisSpareRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisSpareRequest) */ {
 public:
  DiagnosisSpareRequest();
  virtual ~DiagnosisSpareRequest();

  DiagnosisSpareRequest(const DiagnosisSpareRequest& from);
  DiagnosisSpareRequest(DiagnosisSpareRequest&& from) noexcept
    : DiagnosisSpareRequest() {
    *this = ::std::move(from);
  }

  inline DiagnosisSpareRequest& operator=(const DiagnosisSpareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisSpareRequest& operator=(DiagnosisSpareRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisSpareRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisSpareRequest* internal_default_instance() {
    return reinterpret_cast<const DiagnosisSpareRequest*>(
               &_DiagnosisSpareRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(DiagnosisSpareRequest* other);
  friend void swap(DiagnosisSpareRequest& a, DiagnosisSpareRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisSpareRequest* New() const final {
    return CreateMaybeMessage<DiagnosisSpareRequest>(nullptr);
  }

  DiagnosisSpareRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisSpareRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisSpareRequest& from);
  void MergeFrom(const DiagnosisSpareRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisSpareRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisSpareRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:message.DiagnosisSpareRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisSpareResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisSpareResponse) */ {
 public:
  DiagnosisSpareResponse();
  virtual ~DiagnosisSpareResponse();

  DiagnosisSpareResponse(const DiagnosisSpareResponse& from);
  DiagnosisSpareResponse(DiagnosisSpareResponse&& from) noexcept
    : DiagnosisSpareResponse() {
    *this = ::std::move(from);
  }

  inline DiagnosisSpareResponse& operator=(const DiagnosisSpareResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisSpareResponse& operator=(DiagnosisSpareResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisSpareResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisSpareResponse* internal_default_instance() {
    return reinterpret_cast<const DiagnosisSpareResponse*>(
               &_DiagnosisSpareResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(DiagnosisSpareResponse* other);
  friend void swap(DiagnosisSpareResponse& a, DiagnosisSpareResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisSpareResponse* New() const final {
    return CreateMaybeMessage<DiagnosisSpareResponse>(nullptr);
  }

  DiagnosisSpareResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisSpareResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisSpareResponse& from);
  void MergeFrom(const DiagnosisSpareResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisSpareResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisSpareResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diagnosis_id = 1;
  void clear_diagnosis_id();
  static const int kDiagnosisIdFieldNumber = 1;
  const std::string& diagnosis_id() const;
  void set_diagnosis_id(const std::string& value);
  void set_diagnosis_id(std::string&& value);
  void set_diagnosis_id(const char* value);
  void set_diagnosis_id(const char* value, size_t size);
  std::string* mutable_diagnosis_id();
  std::string* release_diagnosis_id();
  void set_allocated_diagnosis_id(std::string* diagnosis_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.DiagnosisSpareResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diagnosis_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TogetherCall_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PatientBaseInfo

// string patient_id = 1;
inline void PatientBaseInfo::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::patient_id() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.patient_id)
  return patient_id_.GetNoArena();
}
inline void PatientBaseInfo::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.patient_id)
}
inline void PatientBaseInfo::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.patient_id)
}
inline void PatientBaseInfo::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.patient_id)
}
inline void PatientBaseInfo::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.patient_id)
}
inline std::string* PatientBaseInfo::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.patient_id)
}

// string code = 2;
inline void PatientBaseInfo::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::code() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.code)
  return code_.GetNoArena();
}
inline void PatientBaseInfo::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.code)
}
inline void PatientBaseInfo::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.code)
}
inline void PatientBaseInfo::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.code)
}
inline void PatientBaseInfo::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.code)
}
inline std::string* PatientBaseInfo::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_code() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.code)
}

// string name = 3;
inline void PatientBaseInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.name)
  return name_.GetNoArena();
}
inline void PatientBaseInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.name)
}
inline void PatientBaseInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.name)
}
inline void PatientBaseInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.name)
}
inline void PatientBaseInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.name)
}
inline std::string* PatientBaseInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.name)
}

// string sex = 4;
inline void PatientBaseInfo::clear_sex() {
  sex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::sex() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.sex)
  return sex_.GetNoArena();
}
inline void PatientBaseInfo::set_sex(const std::string& value) {
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.sex)
}
inline void PatientBaseInfo::set_sex(std::string&& value) {
  
  sex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.sex)
}
inline void PatientBaseInfo::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.sex)
}
inline void PatientBaseInfo::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.sex)
}
inline std::string* PatientBaseInfo::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.sex)
  return sex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_sex() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.sex)
  
  return sex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.sex)
}

// string id_card = 5;
inline void PatientBaseInfo::clear_id_card() {
  id_card_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::id_card() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.id_card)
  return id_card_.GetNoArena();
}
inline void PatientBaseInfo::set_id_card(const std::string& value) {
  
  id_card_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.id_card)
}
inline void PatientBaseInfo::set_id_card(std::string&& value) {
  
  id_card_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.id_card)
}
inline void PatientBaseInfo::set_id_card(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_card_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.id_card)
}
inline void PatientBaseInfo::set_id_card(const char* value, size_t size) {
  
  id_card_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.id_card)
}
inline std::string* PatientBaseInfo::mutable_id_card() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.id_card)
  return id_card_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_id_card() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.id_card)
  
  return id_card_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_id_card(std::string* id_card) {
  if (id_card != nullptr) {
    
  } else {
    
  }
  id_card_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id_card);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.id_card)
}

// string phone = 6;
inline void PatientBaseInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::phone() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.phone)
  return phone_.GetNoArena();
}
inline void PatientBaseInfo::set_phone(const std::string& value) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.phone)
}
inline void PatientBaseInfo::set_phone(std::string&& value) {
  
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.phone)
}
inline void PatientBaseInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.phone)
}
inline void PatientBaseInfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.phone)
}
inline std::string* PatientBaseInfo::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.phone)
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_phone() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.phone)
  
  return phone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.phone)
}

// string birthday = 7;
inline void PatientBaseInfo::clear_birthday() {
  birthday_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::birthday() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.birthday)
  return birthday_.GetNoArena();
}
inline void PatientBaseInfo::set_birthday(const std::string& value) {
  
  birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.birthday)
}
inline void PatientBaseInfo::set_birthday(std::string&& value) {
  
  birthday_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.birthday)
}
inline void PatientBaseInfo::set_birthday(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.birthday)
}
inline void PatientBaseInfo::set_birthday(const char* value, size_t size) {
  
  birthday_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.birthday)
}
inline std::string* PatientBaseInfo::mutable_birthday() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.birthday)
  return birthday_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_birthday() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.birthday)
  
  return birthday_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_birthday(std::string* birthday) {
  if (birthday != nullptr) {
    
  } else {
    
  }
  birthday_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birthday);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.birthday)
}

// string address = 8;
inline void PatientBaseInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::address() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.address)
  return address_.GetNoArena();
}
inline void PatientBaseInfo::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.address)
}
inline void PatientBaseInfo::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.address)
}
inline void PatientBaseInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.address)
}
inline void PatientBaseInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.address)
}
inline std::string* PatientBaseInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_address() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.address)
}

// bytes avatar = 9;
inline void PatientBaseInfo::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PatientBaseInfo::avatar() const {
  // @@protoc_insertion_point(field_get:message.PatientBaseInfo.avatar)
  return avatar_.GetNoArena();
}
inline void PatientBaseInfo::set_avatar(const std::string& value) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.PatientBaseInfo.avatar)
}
inline void PatientBaseInfo::set_avatar(std::string&& value) {
  
  avatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.PatientBaseInfo.avatar)
}
inline void PatientBaseInfo::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.PatientBaseInfo.avatar)
}
inline void PatientBaseInfo::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.PatientBaseInfo.avatar)
}
inline std::string* PatientBaseInfo::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:message.PatientBaseInfo.avatar)
  return avatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PatientBaseInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:message.PatientBaseInfo.avatar)
  
  return avatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PatientBaseInfo::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:message.PatientBaseInfo.avatar)
}

// -------------------------------------------------------------------

// DiagnosisInfoResponse

// string organize_id = 1;
inline void DiagnosisInfoResponse::clear_organize_id() {
  organize_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisInfoResponse::organize_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.organize_id)
  return organize_id_.GetNoArena();
}
inline void DiagnosisInfoResponse::set_organize_id(const std::string& value) {
  
  organize_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.organize_id)
}
inline void DiagnosisInfoResponse::set_organize_id(std::string&& value) {
  
  organize_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisInfoResponse.organize_id)
}
inline void DiagnosisInfoResponse::set_organize_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organize_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisInfoResponse.organize_id)
}
inline void DiagnosisInfoResponse::set_organize_id(const char* value, size_t size) {
  
  organize_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisInfoResponse.organize_id)
}
inline std::string* DiagnosisInfoResponse::mutable_organize_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisInfoResponse.organize_id)
  return organize_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisInfoResponse::release_organize_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisInfoResponse.organize_id)
  
  return organize_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisInfoResponse::set_allocated_organize_id(std::string* organize_id) {
  if (organize_id != nullptr) {
    
  } else {
    
  }
  organize_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organize_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisInfoResponse.organize_id)
}

// string organize_name = 2;
inline void DiagnosisInfoResponse::clear_organize_name() {
  organize_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisInfoResponse::organize_name() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.organize_name)
  return organize_name_.GetNoArena();
}
inline void DiagnosisInfoResponse::set_organize_name(const std::string& value) {
  
  organize_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.organize_name)
}
inline void DiagnosisInfoResponse::set_organize_name(std::string&& value) {
  
  organize_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisInfoResponse.organize_name)
}
inline void DiagnosisInfoResponse::set_organize_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organize_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisInfoResponse.organize_name)
}
inline void DiagnosisInfoResponse::set_organize_name(const char* value, size_t size) {
  
  organize_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisInfoResponse.organize_name)
}
inline std::string* DiagnosisInfoResponse::mutable_organize_name() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisInfoResponse.organize_name)
  return organize_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisInfoResponse::release_organize_name() {
  // @@protoc_insertion_point(field_release:message.DiagnosisInfoResponse.organize_name)
  
  return organize_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisInfoResponse::set_allocated_organize_name(std::string* organize_name) {
  if (organize_name != nullptr) {
    
  } else {
    
  }
  organize_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organize_name);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisInfoResponse.organize_name)
}

// string username = 3;
inline void DiagnosisInfoResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisInfoResponse::username() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.username)
  return username_.GetNoArena();
}
inline void DiagnosisInfoResponse::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.username)
}
inline void DiagnosisInfoResponse::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisInfoResponse.username)
}
inline void DiagnosisInfoResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisInfoResponse.username)
}
inline void DiagnosisInfoResponse::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisInfoResponse.username)
}
inline std::string* DiagnosisInfoResponse::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisInfoResponse.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisInfoResponse::release_username() {
  // @@protoc_insertion_point(field_release:message.DiagnosisInfoResponse.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisInfoResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisInfoResponse.username)
}

// string owner = 4;
inline void DiagnosisInfoResponse::clear_owner() {
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisInfoResponse::owner() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.owner)
  return owner_.GetNoArena();
}
inline void DiagnosisInfoResponse::set_owner(const std::string& value) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.owner)
}
inline void DiagnosisInfoResponse::set_owner(std::string&& value) {
  
  owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisInfoResponse.owner)
}
inline void DiagnosisInfoResponse::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisInfoResponse.owner)
}
inline void DiagnosisInfoResponse::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisInfoResponse.owner)
}
inline std::string* DiagnosisInfoResponse::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisInfoResponse.owner)
  return owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisInfoResponse::release_owner() {
  // @@protoc_insertion_point(field_release:message.DiagnosisInfoResponse.owner)
  
  return owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisInfoResponse::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisInfoResponse.owner)
}

// string phone = 5;
inline void DiagnosisInfoResponse::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisInfoResponse::phone() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.phone)
  return phone_.GetNoArena();
}
inline void DiagnosisInfoResponse::set_phone(const std::string& value) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.phone)
}
inline void DiagnosisInfoResponse::set_phone(std::string&& value) {
  
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisInfoResponse.phone)
}
inline void DiagnosisInfoResponse::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisInfoResponse.phone)
}
inline void DiagnosisInfoResponse::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisInfoResponse.phone)
}
inline std::string* DiagnosisInfoResponse::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisInfoResponse.phone)
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisInfoResponse::release_phone() {
  // @@protoc_insertion_point(field_release:message.DiagnosisInfoResponse.phone)
  
  return phone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisInfoResponse::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisInfoResponse.phone)
}

// string address = 6;
inline void DiagnosisInfoResponse::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisInfoResponse::address() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.address)
  return address_.GetNoArena();
}
inline void DiagnosisInfoResponse::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.address)
}
inline void DiagnosisInfoResponse::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisInfoResponse.address)
}
inline void DiagnosisInfoResponse::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisInfoResponse.address)
}
inline void DiagnosisInfoResponse::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisInfoResponse.address)
}
inline std::string* DiagnosisInfoResponse::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisInfoResponse.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisInfoResponse::release_address() {
  // @@protoc_insertion_point(field_release:message.DiagnosisInfoResponse.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisInfoResponse::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisInfoResponse.address)
}

// string detail_address = 7;
inline void DiagnosisInfoResponse::clear_detail_address() {
  detail_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisInfoResponse::detail_address() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.detail_address)
  return detail_address_.GetNoArena();
}
inline void DiagnosisInfoResponse::set_detail_address(const std::string& value) {
  
  detail_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.detail_address)
}
inline void DiagnosisInfoResponse::set_detail_address(std::string&& value) {
  
  detail_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisInfoResponse.detail_address)
}
inline void DiagnosisInfoResponse::set_detail_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisInfoResponse.detail_address)
}
inline void DiagnosisInfoResponse::set_detail_address(const char* value, size_t size) {
  
  detail_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisInfoResponse.detail_address)
}
inline std::string* DiagnosisInfoResponse::mutable_detail_address() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisInfoResponse.detail_address)
  return detail_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisInfoResponse::release_detail_address() {
  // @@protoc_insertion_point(field_release:message.DiagnosisInfoResponse.detail_address)
  
  return detail_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisInfoResponse::set_allocated_detail_address(std::string* detail_address) {
  if (detail_address != nullptr) {
    
  } else {
    
  }
  detail_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail_address);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisInfoResponse.detail_address)
}

// float longitude = 8;
inline void DiagnosisInfoResponse::clear_longitude() {
  longitude_ = 0;
}
inline float DiagnosisInfoResponse::longitude() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.longitude)
  return longitude_;
}
inline void DiagnosisInfoResponse::set_longitude(float value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.longitude)
}

// float latitude = 9;
inline void DiagnosisInfoResponse::clear_latitude() {
  latitude_ = 0;
}
inline float DiagnosisInfoResponse::latitude() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.latitude)
  return latitude_;
}
inline void DiagnosisInfoResponse::set_latitude(float value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.latitude)
}

// bytes head_image = 10;
inline void DiagnosisInfoResponse::clear_head_image() {
  head_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisInfoResponse::head_image() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisInfoResponse.head_image)
  return head_image_.GetNoArena();
}
inline void DiagnosisInfoResponse::set_head_image(const std::string& value) {
  
  head_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisInfoResponse.head_image)
}
inline void DiagnosisInfoResponse::set_head_image(std::string&& value) {
  
  head_image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisInfoResponse.head_image)
}
inline void DiagnosisInfoResponse::set_head_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisInfoResponse.head_image)
}
inline void DiagnosisInfoResponse::set_head_image(const void* value, size_t size) {
  
  head_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisInfoResponse.head_image)
}
inline std::string* DiagnosisInfoResponse::mutable_head_image() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisInfoResponse.head_image)
  return head_image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisInfoResponse::release_head_image() {
  // @@protoc_insertion_point(field_release:message.DiagnosisInfoResponse.head_image)
  
  return head_image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisInfoResponse::set_allocated_head_image(std::string* head_image) {
  if (head_image != nullptr) {
    
  } else {
    
  }
  head_image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_image);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisInfoResponse.head_image)
}

// -------------------------------------------------------------------

// DoctorInfoResponse

// string doctor_id = 1;
inline void DoctorInfoResponse::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorInfoResponse::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.doctor_id)
}
inline void DoctorInfoResponse::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.doctor_id)
}
inline void DoctorInfoResponse::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.doctor_id)
}
inline void DoctorInfoResponse::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.doctor_id)
}
inline std::string* DoctorInfoResponse::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.doctor_id)
}

// string doctor_name = 2;
inline void DoctorInfoResponse::clear_doctor_name() {
  doctor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::doctor_name() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.doctor_name)
  return doctor_name_.GetNoArena();
}
inline void DoctorInfoResponse::set_doctor_name(const std::string& value) {
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.doctor_name)
}
inline void DoctorInfoResponse::set_doctor_name(std::string&& value) {
  
  doctor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.doctor_name)
}
inline void DoctorInfoResponse::set_doctor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.doctor_name)
}
inline void DoctorInfoResponse::set_doctor_name(const char* value, size_t size) {
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.doctor_name)
}
inline std::string* DoctorInfoResponse::mutable_doctor_name() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.doctor_name)
  return doctor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_doctor_name() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.doctor_name)
  
  return doctor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_doctor_name(std::string* doctor_name) {
  if (doctor_name != nullptr) {
    
  } else {
    
  }
  doctor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_name);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.doctor_name)
}

// string username = 3;
inline void DoctorInfoResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::username() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.username)
  return username_.GetNoArena();
}
inline void DoctorInfoResponse::set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.username)
}
inline void DoctorInfoResponse::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.username)
}
inline void DoctorInfoResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.username)
}
inline void DoctorInfoResponse::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.username)
}
inline std::string* DoctorInfoResponse::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.username)
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_username() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.username)
}

// string sex = 4;
inline void DoctorInfoResponse::clear_sex() {
  sex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::sex() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.sex)
  return sex_.GetNoArena();
}
inline void DoctorInfoResponse::set_sex(const std::string& value) {
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.sex)
}
inline void DoctorInfoResponse::set_sex(std::string&& value) {
  
  sex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.sex)
}
inline void DoctorInfoResponse::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.sex)
}
inline void DoctorInfoResponse::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.sex)
}
inline std::string* DoctorInfoResponse::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.sex)
  return sex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_sex() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.sex)
  
  return sex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.sex)
}

// string hospital_uuid = 5;
inline void DoctorInfoResponse::clear_hospital_uuid() {
  hospital_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::hospital_uuid() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.hospital_uuid)
  return hospital_uuid_.GetNoArena();
}
inline void DoctorInfoResponse::set_hospital_uuid(const std::string& value) {
  
  hospital_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.hospital_uuid)
}
inline void DoctorInfoResponse::set_hospital_uuid(std::string&& value) {
  
  hospital_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.hospital_uuid)
}
inline void DoctorInfoResponse::set_hospital_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hospital_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.hospital_uuid)
}
inline void DoctorInfoResponse::set_hospital_uuid(const char* value, size_t size) {
  
  hospital_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.hospital_uuid)
}
inline std::string* DoctorInfoResponse::mutable_hospital_uuid() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.hospital_uuid)
  return hospital_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_hospital_uuid() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.hospital_uuid)
  
  return hospital_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_hospital_uuid(std::string* hospital_uuid) {
  if (hospital_uuid != nullptr) {
    
  } else {
    
  }
  hospital_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hospital_uuid);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.hospital_uuid)
}

// string hospital_name = 6;
inline void DoctorInfoResponse::clear_hospital_name() {
  hospital_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::hospital_name() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.hospital_name)
  return hospital_name_.GetNoArena();
}
inline void DoctorInfoResponse::set_hospital_name(const std::string& value) {
  
  hospital_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.hospital_name)
}
inline void DoctorInfoResponse::set_hospital_name(std::string&& value) {
  
  hospital_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.hospital_name)
}
inline void DoctorInfoResponse::set_hospital_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hospital_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.hospital_name)
}
inline void DoctorInfoResponse::set_hospital_name(const char* value, size_t size) {
  
  hospital_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.hospital_name)
}
inline std::string* DoctorInfoResponse::mutable_hospital_name() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.hospital_name)
  return hospital_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_hospital_name() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.hospital_name)
  
  return hospital_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_hospital_name(std::string* hospital_name) {
  if (hospital_name != nullptr) {
    
  } else {
    
  }
  hospital_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hospital_name);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.hospital_name)
}

// string office_uuid = 7;
inline void DoctorInfoResponse::clear_office_uuid() {
  office_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::office_uuid() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.office_uuid)
  return office_uuid_.GetNoArena();
}
inline void DoctorInfoResponse::set_office_uuid(const std::string& value) {
  
  office_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.office_uuid)
}
inline void DoctorInfoResponse::set_office_uuid(std::string&& value) {
  
  office_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.office_uuid)
}
inline void DoctorInfoResponse::set_office_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  office_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.office_uuid)
}
inline void DoctorInfoResponse::set_office_uuid(const char* value, size_t size) {
  
  office_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.office_uuid)
}
inline std::string* DoctorInfoResponse::mutable_office_uuid() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.office_uuid)
  return office_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_office_uuid() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.office_uuid)
  
  return office_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_office_uuid(std::string* office_uuid) {
  if (office_uuid != nullptr) {
    
  } else {
    
  }
  office_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), office_uuid);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.office_uuid)
}

// string office_name = 8;
inline void DoctorInfoResponse::clear_office_name() {
  office_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::office_name() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.office_name)
  return office_name_.GetNoArena();
}
inline void DoctorInfoResponse::set_office_name(const std::string& value) {
  
  office_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.office_name)
}
inline void DoctorInfoResponse::set_office_name(std::string&& value) {
  
  office_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.office_name)
}
inline void DoctorInfoResponse::set_office_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  office_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.office_name)
}
inline void DoctorInfoResponse::set_office_name(const char* value, size_t size) {
  
  office_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.office_name)
}
inline std::string* DoctorInfoResponse::mutable_office_name() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.office_name)
  return office_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_office_name() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.office_name)
  
  return office_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_office_name(std::string* office_name) {
  if (office_name != nullptr) {
    
  } else {
    
  }
  office_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), office_name);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.office_name)
}

// string duty_name = 9;
inline void DoctorInfoResponse::clear_duty_name() {
  duty_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::duty_name() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.duty_name)
  return duty_name_.GetNoArena();
}
inline void DoctorInfoResponse::set_duty_name(const std::string& value) {
  
  duty_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.duty_name)
}
inline void DoctorInfoResponse::set_duty_name(std::string&& value) {
  
  duty_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.duty_name)
}
inline void DoctorInfoResponse::set_duty_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  duty_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.duty_name)
}
inline void DoctorInfoResponse::set_duty_name(const char* value, size_t size) {
  
  duty_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.duty_name)
}
inline std::string* DoctorInfoResponse::mutable_duty_name() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.duty_name)
  return duty_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_duty_name() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.duty_name)
  
  return duty_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_duty_name(std::string* duty_name) {
  if (duty_name != nullptr) {
    
  } else {
    
  }
  duty_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duty_name);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.duty_name)
}

// string phone = 10;
inline void DoctorInfoResponse::clear_phone() {
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::phone() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.phone)
  return phone_.GetNoArena();
}
inline void DoctorInfoResponse::set_phone(const std::string& value) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.phone)
}
inline void DoctorInfoResponse::set_phone(std::string&& value) {
  
  phone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.phone)
}
inline void DoctorInfoResponse::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.phone)
}
inline void DoctorInfoResponse::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.phone)
}
inline std::string* DoctorInfoResponse::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.phone)
  return phone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_phone() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.phone)
  
  return phone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.phone)
}

// bytes head_image = 11;
inline void DoctorInfoResponse::clear_head_image() {
  head_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorInfoResponse::head_image() const {
  // @@protoc_insertion_point(field_get:message.DoctorInfoResponse.head_image)
  return head_image_.GetNoArena();
}
inline void DoctorInfoResponse::set_head_image(const std::string& value) {
  
  head_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorInfoResponse.head_image)
}
inline void DoctorInfoResponse::set_head_image(std::string&& value) {
  
  head_image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorInfoResponse.head_image)
}
inline void DoctorInfoResponse::set_head_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorInfoResponse.head_image)
}
inline void DoctorInfoResponse::set_head_image(const void* value, size_t size) {
  
  head_image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorInfoResponse.head_image)
}
inline std::string* DoctorInfoResponse::mutable_head_image() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorInfoResponse.head_image)
  return head_image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorInfoResponse::release_head_image() {
  // @@protoc_insertion_point(field_release:message.DoctorInfoResponse.head_image)
  
  return head_image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorInfoResponse::set_allocated_head_image(std::string* head_image) {
  if (head_image != nullptr) {
    
  } else {
    
  }
  head_image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_image);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorInfoResponse.head_image)
}

// -------------------------------------------------------------------

// DoctorBeginRequest

// string begin_type = 1;
inline void DoctorBeginRequest::clear_begin_type() {
  begin_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorBeginRequest::begin_type() const {
  // @@protoc_insertion_point(field_get:message.DoctorBeginRequest.begin_type)
  return begin_type_.GetNoArena();
}
inline void DoctorBeginRequest::set_begin_type(const std::string& value) {
  
  begin_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorBeginRequest.begin_type)
}
inline void DoctorBeginRequest::set_begin_type(std::string&& value) {
  
  begin_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorBeginRequest.begin_type)
}
inline void DoctorBeginRequest::set_begin_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  begin_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorBeginRequest.begin_type)
}
inline void DoctorBeginRequest::set_begin_type(const char* value, size_t size) {
  
  begin_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorBeginRequest.begin_type)
}
inline std::string* DoctorBeginRequest::mutable_begin_type() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorBeginRequest.begin_type)
  return begin_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorBeginRequest::release_begin_type() {
  // @@protoc_insertion_point(field_release:message.DoctorBeginRequest.begin_type)
  
  return begin_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorBeginRequest::set_allocated_begin_type(std::string* begin_type) {
  if (begin_type != nullptr) {
    
  } else {
    
  }
  begin_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), begin_type);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorBeginRequest.begin_type)
}

// string doctor_id = 2;
inline void DoctorBeginRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorBeginRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorBeginRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorBeginRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorBeginRequest.doctor_id)
}
inline void DoctorBeginRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorBeginRequest.doctor_id)
}
inline void DoctorBeginRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorBeginRequest.doctor_id)
}
inline void DoctorBeginRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorBeginRequest.doctor_id)
}
inline std::string* DoctorBeginRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorBeginRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorBeginRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorBeginRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorBeginRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorBeginRequest.doctor_id)
}

// -------------------------------------------------------------------

// DoctorBeginResponse

// string result = 1;
inline void DoctorBeginResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorBeginResponse::result() const {
  // @@protoc_insertion_point(field_get:message.DoctorBeginResponse.result)
  return result_.GetNoArena();
}
inline void DoctorBeginResponse::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorBeginResponse.result)
}
inline void DoctorBeginResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorBeginResponse.result)
}
inline void DoctorBeginResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorBeginResponse.result)
}
inline void DoctorBeginResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorBeginResponse.result)
}
inline std::string* DoctorBeginResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorBeginResponse.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorBeginResponse::release_result() {
  // @@protoc_insertion_point(field_release:message.DoctorBeginResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorBeginResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorBeginResponse.result)
}

// string reason = 2;
inline void DoctorBeginResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorBeginResponse::reason() const {
  // @@protoc_insertion_point(field_get:message.DoctorBeginResponse.reason)
  return reason_.GetNoArena();
}
inline void DoctorBeginResponse::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorBeginResponse.reason)
}
inline void DoctorBeginResponse::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorBeginResponse.reason)
}
inline void DoctorBeginResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorBeginResponse.reason)
}
inline void DoctorBeginResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorBeginResponse.reason)
}
inline std::string* DoctorBeginResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorBeginResponse.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorBeginResponse::release_reason() {
  // @@protoc_insertion_point(field_release:message.DoctorBeginResponse.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorBeginResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorBeginResponse.reason)
}

// -------------------------------------------------------------------

// DiagnosisBeginRequest

// string diagnosis_id = 1;
inline void DiagnosisBeginRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisBeginRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisBeginRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisBeginRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisBeginRequest.diagnosis_id)
}
inline void DiagnosisBeginRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisBeginRequest.diagnosis_id)
}
inline void DiagnosisBeginRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisBeginRequest.diagnosis_id)
}
inline void DiagnosisBeginRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisBeginRequest.diagnosis_id)
}
inline std::string* DiagnosisBeginRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisBeginRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisBeginRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisBeginRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisBeginRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisBeginRequest.diagnosis_id)
}

// -------------------------------------------------------------------

// DiagnosisBeginResponse

// string datetime = 1;
inline void DiagnosisBeginResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisBeginResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisBeginResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DiagnosisBeginResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisBeginResponse.datetime)
}
inline void DiagnosisBeginResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisBeginResponse.datetime)
}
inline void DiagnosisBeginResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisBeginResponse.datetime)
}
inline void DiagnosisBeginResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisBeginResponse.datetime)
}
inline std::string* DiagnosisBeginResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisBeginResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisBeginResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DiagnosisBeginResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisBeginResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisBeginResponse.datetime)
}

// -------------------------------------------------------------------

// DioctorCallRequest

// string doctor_id = 1;
inline void DioctorCallRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DioctorCallRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DioctorCallRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DioctorCallRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DioctorCallRequest.doctor_id)
}
inline void DioctorCallRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DioctorCallRequest.doctor_id)
}
inline void DioctorCallRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DioctorCallRequest.doctor_id)
}
inline void DioctorCallRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DioctorCallRequest.doctor_id)
}
inline std::string* DioctorCallRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DioctorCallRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DioctorCallRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DioctorCallRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DioctorCallRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DioctorCallRequest.doctor_id)
}

// -------------------------------------------------------------------

// DoctorCallResponse

// string res = 1;
inline void DoctorCallResponse::clear_res() {
  res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCallResponse::res() const {
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.res)
  return res_.GetNoArena();
}
inline void DoctorCallResponse::set_res(const std::string& value) {
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCallResponse.res)
}
inline void DoctorCallResponse::set_res(std::string&& value) {
  
  res_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCallResponse.res)
}
inline void DoctorCallResponse::set_res(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCallResponse.res)
}
inline void DoctorCallResponse::set_res(const char* value, size_t size) {
  
  res_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCallResponse.res)
}
inline std::string* DoctorCallResponse::mutable_res() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.res)
  return res_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCallResponse::release_res() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.res)
  
  return res_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCallResponse::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    
  } else {
    
  }
  res_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.res)
}

// string register_id = 2;
inline void DoctorCallResponse::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCallResponse::register_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.register_id)
  return register_id_.GetNoArena();
}
inline void DoctorCallResponse::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCallResponse.register_id)
}
inline void DoctorCallResponse::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCallResponse.register_id)
}
inline void DoctorCallResponse::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCallResponse.register_id)
}
inline void DoctorCallResponse::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCallResponse.register_id)
}
inline std::string* DoctorCallResponse::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCallResponse::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCallResponse::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.register_id)
}

// string now_id = 3;
inline void DoctorCallResponse::clear_now_id() {
  now_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCallResponse::now_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.now_id)
  return now_id_.GetNoArena();
}
inline void DoctorCallResponse::set_now_id(const std::string& value) {
  
  now_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCallResponse.now_id)
}
inline void DoctorCallResponse::set_now_id(std::string&& value) {
  
  now_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCallResponse.now_id)
}
inline void DoctorCallResponse::set_now_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  now_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCallResponse.now_id)
}
inline void DoctorCallResponse::set_now_id(const char* value, size_t size) {
  
  now_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCallResponse.now_id)
}
inline std::string* DoctorCallResponse::mutable_now_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.now_id)
  return now_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCallResponse::release_now_id() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.now_id)
  
  return now_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCallResponse::set_allocated_now_id(std::string* now_id) {
  if (now_id != nullptr) {
    
  } else {
    
  }
  now_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), now_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.now_id)
}

// string next_id = 4;
inline void DoctorCallResponse::clear_next_id() {
  next_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCallResponse::next_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.next_id)
  return next_id_.GetNoArena();
}
inline void DoctorCallResponse::set_next_id(const std::string& value) {
  
  next_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCallResponse.next_id)
}
inline void DoctorCallResponse::set_next_id(std::string&& value) {
  
  next_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCallResponse.next_id)
}
inline void DoctorCallResponse::set_next_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCallResponse.next_id)
}
inline void DoctorCallResponse::set_next_id(const char* value, size_t size) {
  
  next_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCallResponse.next_id)
}
inline std::string* DoctorCallResponse::mutable_next_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.next_id)
  return next_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCallResponse::release_next_id() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.next_id)
  
  return next_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCallResponse::set_allocated_next_id(std::string* next_id) {
  if (next_id != nullptr) {
    
  } else {
    
  }
  next_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.next_id)
}

// string now = 5;
inline void DoctorCallResponse::clear_now() {
  now_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCallResponse::now() const {
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.now)
  return now_.GetNoArena();
}
inline void DoctorCallResponse::set_now(const std::string& value) {
  
  now_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCallResponse.now)
}
inline void DoctorCallResponse::set_now(std::string&& value) {
  
  now_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCallResponse.now)
}
inline void DoctorCallResponse::set_now(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  now_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCallResponse.now)
}
inline void DoctorCallResponse::set_now(const char* value, size_t size) {
  
  now_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCallResponse.now)
}
inline std::string* DoctorCallResponse::mutable_now() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.now)
  return now_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCallResponse::release_now() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.now)
  
  return now_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCallResponse::set_allocated_now(std::string* now) {
  if (now != nullptr) {
    
  } else {
    
  }
  now_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), now);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.now)
}

// string next = 6;
inline void DoctorCallResponse::clear_next() {
  next_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCallResponse::next() const {
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.next)
  return next_.GetNoArena();
}
inline void DoctorCallResponse::set_next(const std::string& value) {
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCallResponse.next)
}
inline void DoctorCallResponse::set_next(std::string&& value) {
  
  next_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCallResponse.next)
}
inline void DoctorCallResponse::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCallResponse.next)
}
inline void DoctorCallResponse::set_next(const char* value, size_t size) {
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCallResponse.next)
}
inline std::string* DoctorCallResponse::mutable_next() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.next)
  return next_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCallResponse::release_next() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.next)
  
  return next_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCallResponse::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    
  } else {
    
  }
  next_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.next)
}

// string diagnosis_id = 7;
inline void DoctorCallResponse::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCallResponse::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DoctorCallResponse::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCallResponse.diagnosis_id)
}
inline void DoctorCallResponse::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCallResponse.diagnosis_id)
}
inline void DoctorCallResponse::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCallResponse.diagnosis_id)
}
inline void DoctorCallResponse::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCallResponse.diagnosis_id)
}
inline std::string* DoctorCallResponse::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCallResponse::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCallResponse::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.diagnosis_id)
}

// string diagnosis_name = 8;
inline void DoctorCallResponse::clear_diagnosis_name() {
  diagnosis_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCallResponse::diagnosis_name() const {
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.diagnosis_name)
  return diagnosis_name_.GetNoArena();
}
inline void DoctorCallResponse::set_diagnosis_name(const std::string& value) {
  
  diagnosis_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCallResponse.diagnosis_name)
}
inline void DoctorCallResponse::set_diagnosis_name(std::string&& value) {
  
  diagnosis_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCallResponse.diagnosis_name)
}
inline void DoctorCallResponse::set_diagnosis_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCallResponse.diagnosis_name)
}
inline void DoctorCallResponse::set_diagnosis_name(const char* value, size_t size) {
  
  diagnosis_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCallResponse.diagnosis_name)
}
inline std::string* DoctorCallResponse::mutable_diagnosis_name() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.diagnosis_name)
  return diagnosis_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCallResponse::release_diagnosis_name() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.diagnosis_name)
  
  return diagnosis_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCallResponse::set_allocated_diagnosis_name(std::string* diagnosis_name) {
  if (diagnosis_name != nullptr) {
    
  } else {
    
  }
  diagnosis_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_name);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.diagnosis_name)
}

// .message.PatientBaseInfo patient_info = 9;
inline bool DoctorCallResponse::has_patient_info() const {
  return this != internal_default_instance() && patient_info_ != nullptr;
}
inline void DoctorCallResponse::clear_patient_info() {
  if (GetArenaNoVirtual() == nullptr && patient_info_ != nullptr) {
    delete patient_info_;
  }
  patient_info_ = nullptr;
}
inline const ::message::PatientBaseInfo& DoctorCallResponse::patient_info() const {
  const ::message::PatientBaseInfo* p = patient_info_;
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.patient_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::message::PatientBaseInfo*>(
      &::message::_PatientBaseInfo_default_instance_);
}
inline ::message::PatientBaseInfo* DoctorCallResponse::release_patient_info() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.patient_info)
  
  ::message::PatientBaseInfo* temp = patient_info_;
  patient_info_ = nullptr;
  return temp;
}
inline ::message::PatientBaseInfo* DoctorCallResponse::mutable_patient_info() {
  
  if (patient_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::PatientBaseInfo>(GetArenaNoVirtual());
    patient_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.patient_info)
  return patient_info_;
}
inline void DoctorCallResponse::set_allocated_patient_info(::message::PatientBaseInfo* patient_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patient_info_;
  }
  if (patient_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient_info, submessage_arena);
    }
    
  } else {
    
  }
  patient_info_ = patient_info;
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.patient_info)
}

// .message.DiagnosisInfoResponse diagnosis_info = 10;
inline bool DoctorCallResponse::has_diagnosis_info() const {
  return this != internal_default_instance() && diagnosis_info_ != nullptr;
}
inline void DoctorCallResponse::clear_diagnosis_info() {
  if (GetArenaNoVirtual() == nullptr && diagnosis_info_ != nullptr) {
    delete diagnosis_info_;
  }
  diagnosis_info_ = nullptr;
}
inline const ::message::DiagnosisInfoResponse& DoctorCallResponse::diagnosis_info() const {
  const ::message::DiagnosisInfoResponse* p = diagnosis_info_;
  // @@protoc_insertion_point(field_get:message.DoctorCallResponse.diagnosis_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::message::DiagnosisInfoResponse*>(
      &::message::_DiagnosisInfoResponse_default_instance_);
}
inline ::message::DiagnosisInfoResponse* DoctorCallResponse::release_diagnosis_info() {
  // @@protoc_insertion_point(field_release:message.DoctorCallResponse.diagnosis_info)
  
  ::message::DiagnosisInfoResponse* temp = diagnosis_info_;
  diagnosis_info_ = nullptr;
  return temp;
}
inline ::message::DiagnosisInfoResponse* DoctorCallResponse::mutable_diagnosis_info() {
  
  if (diagnosis_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::DiagnosisInfoResponse>(GetArenaNoVirtual());
    diagnosis_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:message.DoctorCallResponse.diagnosis_info)
  return diagnosis_info_;
}
inline void DoctorCallResponse::set_allocated_diagnosis_info(::message::DiagnosisInfoResponse* diagnosis_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diagnosis_info_;
  }
  if (diagnosis_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diagnosis_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnosis_info, submessage_arena);
    }
    
  } else {
    
  }
  diagnosis_info_ = diagnosis_info;
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCallResponse.diagnosis_info)
}

// -------------------------------------------------------------------

// DiagnosisAcceptCallPush

// string register_id = 1;
inline void DiagnosisAcceptCallPush::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisAcceptCallPush::register_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.register_id)
  return register_id_.GetNoArena();
}
inline void DiagnosisAcceptCallPush::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisAcceptCallPush.register_id)
}
inline void DiagnosisAcceptCallPush::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisAcceptCallPush.register_id)
}
inline void DiagnosisAcceptCallPush::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisAcceptCallPush.register_id)
}
inline void DiagnosisAcceptCallPush::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisAcceptCallPush.register_id)
}
inline std::string* DiagnosisAcceptCallPush::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisAcceptCallPush::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisAcceptCallPush::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.register_id)
}

// string now_id = 2;
inline void DiagnosisAcceptCallPush::clear_now_id() {
  now_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisAcceptCallPush::now_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.now_id)
  return now_id_.GetNoArena();
}
inline void DiagnosisAcceptCallPush::set_now_id(const std::string& value) {
  
  now_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisAcceptCallPush.now_id)
}
inline void DiagnosisAcceptCallPush::set_now_id(std::string&& value) {
  
  now_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisAcceptCallPush.now_id)
}
inline void DiagnosisAcceptCallPush::set_now_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  now_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisAcceptCallPush.now_id)
}
inline void DiagnosisAcceptCallPush::set_now_id(const char* value, size_t size) {
  
  now_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisAcceptCallPush.now_id)
}
inline std::string* DiagnosisAcceptCallPush::mutable_now_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.now_id)
  return now_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisAcceptCallPush::release_now_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.now_id)
  
  return now_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisAcceptCallPush::set_allocated_now_id(std::string* now_id) {
  if (now_id != nullptr) {
    
  } else {
    
  }
  now_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), now_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.now_id)
}

// string next_id = 3;
inline void DiagnosisAcceptCallPush::clear_next_id() {
  next_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisAcceptCallPush::next_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.next_id)
  return next_id_.GetNoArena();
}
inline void DiagnosisAcceptCallPush::set_next_id(const std::string& value) {
  
  next_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisAcceptCallPush.next_id)
}
inline void DiagnosisAcceptCallPush::set_next_id(std::string&& value) {
  
  next_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisAcceptCallPush.next_id)
}
inline void DiagnosisAcceptCallPush::set_next_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisAcceptCallPush.next_id)
}
inline void DiagnosisAcceptCallPush::set_next_id(const char* value, size_t size) {
  
  next_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisAcceptCallPush.next_id)
}
inline std::string* DiagnosisAcceptCallPush::mutable_next_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.next_id)
  return next_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisAcceptCallPush::release_next_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.next_id)
  
  return next_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisAcceptCallPush::set_allocated_next_id(std::string* next_id) {
  if (next_id != nullptr) {
    
  } else {
    
  }
  next_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.next_id)
}

// string now = 4;
inline void DiagnosisAcceptCallPush::clear_now() {
  now_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisAcceptCallPush::now() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.now)
  return now_.GetNoArena();
}
inline void DiagnosisAcceptCallPush::set_now(const std::string& value) {
  
  now_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisAcceptCallPush.now)
}
inline void DiagnosisAcceptCallPush::set_now(std::string&& value) {
  
  now_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisAcceptCallPush.now)
}
inline void DiagnosisAcceptCallPush::set_now(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  now_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisAcceptCallPush.now)
}
inline void DiagnosisAcceptCallPush::set_now(const char* value, size_t size) {
  
  now_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisAcceptCallPush.now)
}
inline std::string* DiagnosisAcceptCallPush::mutable_now() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.now)
  return now_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisAcceptCallPush::release_now() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.now)
  
  return now_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisAcceptCallPush::set_allocated_now(std::string* now) {
  if (now != nullptr) {
    
  } else {
    
  }
  now_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), now);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.now)
}

// string next = 5;
inline void DiagnosisAcceptCallPush::clear_next() {
  next_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisAcceptCallPush::next() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.next)
  return next_.GetNoArena();
}
inline void DiagnosisAcceptCallPush::set_next(const std::string& value) {
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisAcceptCallPush.next)
}
inline void DiagnosisAcceptCallPush::set_next(std::string&& value) {
  
  next_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisAcceptCallPush.next)
}
inline void DiagnosisAcceptCallPush::set_next(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisAcceptCallPush.next)
}
inline void DiagnosisAcceptCallPush::set_next(const char* value, size_t size) {
  
  next_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisAcceptCallPush.next)
}
inline std::string* DiagnosisAcceptCallPush::mutable_next() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.next)
  return next_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisAcceptCallPush::release_next() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.next)
  
  return next_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisAcceptCallPush::set_allocated_next(std::string* next) {
  if (next != nullptr) {
    
  } else {
    
  }
  next_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.next)
}

// string doctor_id = 6;
inline void DiagnosisAcceptCallPush::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisAcceptCallPush::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DiagnosisAcceptCallPush::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisAcceptCallPush.doctor_id)
}
inline void DiagnosisAcceptCallPush::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisAcceptCallPush.doctor_id)
}
inline void DiagnosisAcceptCallPush::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisAcceptCallPush.doctor_id)
}
inline void DiagnosisAcceptCallPush::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisAcceptCallPush.doctor_id)
}
inline std::string* DiagnosisAcceptCallPush::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisAcceptCallPush::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisAcceptCallPush::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.doctor_id)
}

// string doctor_name = 7;
inline void DiagnosisAcceptCallPush::clear_doctor_name() {
  doctor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisAcceptCallPush::doctor_name() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.doctor_name)
  return doctor_name_.GetNoArena();
}
inline void DiagnosisAcceptCallPush::set_doctor_name(const std::string& value) {
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisAcceptCallPush.doctor_name)
}
inline void DiagnosisAcceptCallPush::set_doctor_name(std::string&& value) {
  
  doctor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisAcceptCallPush.doctor_name)
}
inline void DiagnosisAcceptCallPush::set_doctor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisAcceptCallPush.doctor_name)
}
inline void DiagnosisAcceptCallPush::set_doctor_name(const char* value, size_t size) {
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisAcceptCallPush.doctor_name)
}
inline std::string* DiagnosisAcceptCallPush::mutable_doctor_name() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.doctor_name)
  return doctor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisAcceptCallPush::release_doctor_name() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.doctor_name)
  
  return doctor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisAcceptCallPush::set_allocated_doctor_name(std::string* doctor_name) {
  if (doctor_name != nullptr) {
    
  } else {
    
  }
  doctor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_name);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.doctor_name)
}

// .message.PatientBaseInfo patient_info = 8;
inline bool DiagnosisAcceptCallPush::has_patient_info() const {
  return this != internal_default_instance() && patient_info_ != nullptr;
}
inline void DiagnosisAcceptCallPush::clear_patient_info() {
  if (GetArenaNoVirtual() == nullptr && patient_info_ != nullptr) {
    delete patient_info_;
  }
  patient_info_ = nullptr;
}
inline const ::message::PatientBaseInfo& DiagnosisAcceptCallPush::patient_info() const {
  const ::message::PatientBaseInfo* p = patient_info_;
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.patient_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::message::PatientBaseInfo*>(
      &::message::_PatientBaseInfo_default_instance_);
}
inline ::message::PatientBaseInfo* DiagnosisAcceptCallPush::release_patient_info() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.patient_info)
  
  ::message::PatientBaseInfo* temp = patient_info_;
  patient_info_ = nullptr;
  return temp;
}
inline ::message::PatientBaseInfo* DiagnosisAcceptCallPush::mutable_patient_info() {
  
  if (patient_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::PatientBaseInfo>(GetArenaNoVirtual());
    patient_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.patient_info)
  return patient_info_;
}
inline void DiagnosisAcceptCallPush::set_allocated_patient_info(::message::PatientBaseInfo* patient_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete patient_info_;
  }
  if (patient_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      patient_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, patient_info, submessage_arena);
    }
    
  } else {
    
  }
  patient_info_ = patient_info;
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.patient_info)
}

// .message.DoctorInfoResponse doctor_info = 9;
inline bool DiagnosisAcceptCallPush::has_doctor_info() const {
  return this != internal_default_instance() && doctor_info_ != nullptr;
}
inline void DiagnosisAcceptCallPush::clear_doctor_info() {
  if (GetArenaNoVirtual() == nullptr && doctor_info_ != nullptr) {
    delete doctor_info_;
  }
  doctor_info_ = nullptr;
}
inline const ::message::DoctorInfoResponse& DiagnosisAcceptCallPush::doctor_info() const {
  const ::message::DoctorInfoResponse* p = doctor_info_;
  // @@protoc_insertion_point(field_get:message.DiagnosisAcceptCallPush.doctor_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::message::DoctorInfoResponse*>(
      &::message::_DoctorInfoResponse_default_instance_);
}
inline ::message::DoctorInfoResponse* DiagnosisAcceptCallPush::release_doctor_info() {
  // @@protoc_insertion_point(field_release:message.DiagnosisAcceptCallPush.doctor_info)
  
  ::message::DoctorInfoResponse* temp = doctor_info_;
  doctor_info_ = nullptr;
  return temp;
}
inline ::message::DoctorInfoResponse* DiagnosisAcceptCallPush::mutable_doctor_info() {
  
  if (doctor_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::DoctorInfoResponse>(GetArenaNoVirtual());
    doctor_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:message.DiagnosisAcceptCallPush.doctor_info)
  return doctor_info_;
}
inline void DiagnosisAcceptCallPush::set_allocated_doctor_info(::message::DoctorInfoResponse* doctor_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete doctor_info_;
  }
  if (doctor_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      doctor_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doctor_info, submessage_arena);
    }
    
  } else {
    
  }
  doctor_info_ = doctor_info;
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisAcceptCallPush.doctor_info)
}

// -------------------------------------------------------------------

// DiagnosisResponseCallRequest

// string response = 1;
inline void DiagnosisResponseCallRequest::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisResponseCallRequest::response() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisResponseCallRequest.response)
  return response_.GetNoArena();
}
inline void DiagnosisResponseCallRequest::set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisResponseCallRequest.response)
}
inline void DiagnosisResponseCallRequest::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisResponseCallRequest.response)
}
inline void DiagnosisResponseCallRequest::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisResponseCallRequest.response)
}
inline void DiagnosisResponseCallRequest::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisResponseCallRequest.response)
}
inline std::string* DiagnosisResponseCallRequest::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisResponseCallRequest.response)
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisResponseCallRequest::release_response() {
  // @@protoc_insertion_point(field_release:message.DiagnosisResponseCallRequest.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisResponseCallRequest::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisResponseCallRequest.response)
}

// string doctor_id = 2;
inline void DiagnosisResponseCallRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisResponseCallRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisResponseCallRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DiagnosisResponseCallRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisResponseCallRequest.doctor_id)
}
inline void DiagnosisResponseCallRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisResponseCallRequest.doctor_id)
}
inline void DiagnosisResponseCallRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisResponseCallRequest.doctor_id)
}
inline void DiagnosisResponseCallRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisResponseCallRequest.doctor_id)
}
inline std::string* DiagnosisResponseCallRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisResponseCallRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisResponseCallRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisResponseCallRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisResponseCallRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisResponseCallRequest.doctor_id)
}

// string register_id = 3;
inline void DiagnosisResponseCallRequest::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisResponseCallRequest::register_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisResponseCallRequest.register_id)
  return register_id_.GetNoArena();
}
inline void DiagnosisResponseCallRequest::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisResponseCallRequest.register_id)
}
inline void DiagnosisResponseCallRequest::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisResponseCallRequest.register_id)
}
inline void DiagnosisResponseCallRequest::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisResponseCallRequest.register_id)
}
inline void DiagnosisResponseCallRequest::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisResponseCallRequest.register_id)
}
inline std::string* DiagnosisResponseCallRequest::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisResponseCallRequest.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisResponseCallRequest::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisResponseCallRequest.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisResponseCallRequest::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisResponseCallRequest.register_id)
}

// -------------------------------------------------------------------

// DiagnosisResponseCallResponse

// string response = 1;
inline void DiagnosisResponseCallResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisResponseCallResponse::response() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisResponseCallResponse.response)
  return response_.GetNoArena();
}
inline void DiagnosisResponseCallResponse::set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisResponseCallResponse.response)
}
inline void DiagnosisResponseCallResponse::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisResponseCallResponse.response)
}
inline void DiagnosisResponseCallResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisResponseCallResponse.response)
}
inline void DiagnosisResponseCallResponse::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisResponseCallResponse.response)
}
inline std::string* DiagnosisResponseCallResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisResponseCallResponse.response)
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisResponseCallResponse::release_response() {
  // @@protoc_insertion_point(field_release:message.DiagnosisResponseCallResponse.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisResponseCallResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisResponseCallResponse.response)
}

// string room = 2;
inline void DiagnosisResponseCallResponse::clear_room() {
  room_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisResponseCallResponse::room() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisResponseCallResponse.room)
  return room_.GetNoArena();
}
inline void DiagnosisResponseCallResponse::set_room(const std::string& value) {
  
  room_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisResponseCallResponse.room)
}
inline void DiagnosisResponseCallResponse::set_room(std::string&& value) {
  
  room_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisResponseCallResponse.room)
}
inline void DiagnosisResponseCallResponse::set_room(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisResponseCallResponse.room)
}
inline void DiagnosisResponseCallResponse::set_room(const char* value, size_t size) {
  
  room_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisResponseCallResponse.room)
}
inline std::string* DiagnosisResponseCallResponse::mutable_room() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisResponseCallResponse.room)
  return room_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisResponseCallResponse::release_room() {
  // @@protoc_insertion_point(field_release:message.DiagnosisResponseCallResponse.room)
  
  return room_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisResponseCallResponse::set_allocated_room(std::string* room) {
  if (room != nullptr) {
    
  } else {
    
  }
  room_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisResponseCallResponse.room)
}

// string register_id = 3;
inline void DiagnosisResponseCallResponse::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisResponseCallResponse::register_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisResponseCallResponse.register_id)
  return register_id_.GetNoArena();
}
inline void DiagnosisResponseCallResponse::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisResponseCallResponse.register_id)
}
inline void DiagnosisResponseCallResponse::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisResponseCallResponse.register_id)
}
inline void DiagnosisResponseCallResponse::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisResponseCallResponse.register_id)
}
inline void DiagnosisResponseCallResponse::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisResponseCallResponse.register_id)
}
inline std::string* DiagnosisResponseCallResponse::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisResponseCallResponse.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisResponseCallResponse::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisResponseCallResponse.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisResponseCallResponse::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisResponseCallResponse.register_id)
}

// string result = 4;
inline void DiagnosisResponseCallResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisResponseCallResponse::result() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisResponseCallResponse.result)
  return result_.GetNoArena();
}
inline void DiagnosisResponseCallResponse::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisResponseCallResponse.result)
}
inline void DiagnosisResponseCallResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisResponseCallResponse.result)
}
inline void DiagnosisResponseCallResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisResponseCallResponse.result)
}
inline void DiagnosisResponseCallResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisResponseCallResponse.result)
}
inline std::string* DiagnosisResponseCallResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisResponseCallResponse.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisResponseCallResponse::release_result() {
  // @@protoc_insertion_point(field_release:message.DiagnosisResponseCallResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisResponseCallResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisResponseCallResponse.result)
}

// string reason = 5;
inline void DiagnosisResponseCallResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisResponseCallResponse::reason() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisResponseCallResponse.reason)
  return reason_.GetNoArena();
}
inline void DiagnosisResponseCallResponse::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisResponseCallResponse.reason)
}
inline void DiagnosisResponseCallResponse::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisResponseCallResponse.reason)
}
inline void DiagnosisResponseCallResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisResponseCallResponse.reason)
}
inline void DiagnosisResponseCallResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisResponseCallResponse.reason)
}
inline std::string* DiagnosisResponseCallResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisResponseCallResponse.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisResponseCallResponse::release_reason() {
  // @@protoc_insertion_point(field_release:message.DiagnosisResponseCallResponse.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisResponseCallResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisResponseCallResponse.reason)
}

// -------------------------------------------------------------------

// DoctorAcceptCallResultPush

// string response = 1;
inline void DoctorAcceptCallResultPush::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorAcceptCallResultPush::response() const {
  // @@protoc_insertion_point(field_get:message.DoctorAcceptCallResultPush.response)
  return response_.GetNoArena();
}
inline void DoctorAcceptCallResultPush::set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorAcceptCallResultPush.response)
}
inline void DoctorAcceptCallResultPush::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorAcceptCallResultPush.response)
}
inline void DoctorAcceptCallResultPush::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorAcceptCallResultPush.response)
}
inline void DoctorAcceptCallResultPush::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorAcceptCallResultPush.response)
}
inline std::string* DoctorAcceptCallResultPush::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorAcceptCallResultPush.response)
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorAcceptCallResultPush::release_response() {
  // @@protoc_insertion_point(field_release:message.DoctorAcceptCallResultPush.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorAcceptCallResultPush::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorAcceptCallResultPush.response)
}

// string register_id = 2;
inline void DoctorAcceptCallResultPush::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorAcceptCallResultPush::register_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorAcceptCallResultPush.register_id)
  return register_id_.GetNoArena();
}
inline void DoctorAcceptCallResultPush::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorAcceptCallResultPush.register_id)
}
inline void DoctorAcceptCallResultPush::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorAcceptCallResultPush.register_id)
}
inline void DoctorAcceptCallResultPush::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorAcceptCallResultPush.register_id)
}
inline void DoctorAcceptCallResultPush::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorAcceptCallResultPush.register_id)
}
inline std::string* DoctorAcceptCallResultPush::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorAcceptCallResultPush.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorAcceptCallResultPush::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DoctorAcceptCallResultPush.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorAcceptCallResultPush::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorAcceptCallResultPush.register_id)
}

// -------------------------------------------------------------------

// DoctorSurePassRequest

// string doctor_id = 1;
inline void DoctorSurePassRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorSurePassRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassRequest.doctor_id)
}
inline void DoctorSurePassRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassRequest.doctor_id)
}
inline void DoctorSurePassRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassRequest.doctor_id)
}
inline void DoctorSurePassRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassRequest.doctor_id)
}
inline std::string* DoctorSurePassRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassRequest.doctor_id)
}

// string register_id = 2;
inline void DoctorSurePassRequest::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassRequest::register_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassRequest.register_id)
  return register_id_.GetNoArena();
}
inline void DoctorSurePassRequest::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassRequest.register_id)
}
inline void DoctorSurePassRequest::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassRequest.register_id)
}
inline void DoctorSurePassRequest::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassRequest.register_id)
}
inline void DoctorSurePassRequest::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassRequest.register_id)
}
inline std::string* DoctorSurePassRequest::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassRequest.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassRequest::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassRequest.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassRequest::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassRequest.register_id)
}

// sint32 wait_time = 3;
inline void DoctorSurePassRequest::clear_wait_time() {
  wait_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DoctorSurePassRequest::wait_time() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassRequest.wait_time)
  return wait_time_;
}
inline void DoctorSurePassRequest::set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:message.DoctorSurePassRequest.wait_time)
}

// -------------------------------------------------------------------

// DoctorSurePassResponse

// string datetime = 1;
inline void DoctorSurePassResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DoctorSurePassResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassResponse.datetime)
}
inline void DoctorSurePassResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassResponse.datetime)
}
inline void DoctorSurePassResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassResponse.datetime)
}
inline void DoctorSurePassResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassResponse.datetime)
}
inline std::string* DoctorSurePassResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassResponse.datetime)
}

// string register_id = 2;
inline void DoctorSurePassResponse::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassResponse::register_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassResponse.register_id)
  return register_id_.GetNoArena();
}
inline void DoctorSurePassResponse::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassResponse.register_id)
}
inline void DoctorSurePassResponse::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassResponse.register_id)
}
inline void DoctorSurePassResponse::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassResponse.register_id)
}
inline void DoctorSurePassResponse::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassResponse.register_id)
}
inline std::string* DoctorSurePassResponse::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassResponse.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassResponse::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassResponse.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassResponse::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassResponse.register_id)
}

// string doctor_id = 3;
inline void DoctorSurePassResponse::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassResponse::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassResponse.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorSurePassResponse::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassResponse.doctor_id)
}
inline void DoctorSurePassResponse::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassResponse.doctor_id)
}
inline void DoctorSurePassResponse::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassResponse.doctor_id)
}
inline void DoctorSurePassResponse::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassResponse.doctor_id)
}
inline std::string* DoctorSurePassResponse::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassResponse.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassResponse::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassResponse.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassResponse::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassResponse.doctor_id)
}

// string result = 4;
inline void DoctorSurePassResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassResponse::result() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassResponse.result)
  return result_.GetNoArena();
}
inline void DoctorSurePassResponse::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassResponse.result)
}
inline void DoctorSurePassResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassResponse.result)
}
inline void DoctorSurePassResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassResponse.result)
}
inline void DoctorSurePassResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassResponse.result)
}
inline std::string* DoctorSurePassResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassResponse.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassResponse::release_result() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassResponse.result)
}

// string reason = 5;
inline void DoctorSurePassResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassResponse::reason() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassResponse.reason)
  return reason_.GetNoArena();
}
inline void DoctorSurePassResponse::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassResponse.reason)
}
inline void DoctorSurePassResponse::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassResponse.reason)
}
inline void DoctorSurePassResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassResponse.reason)
}
inline void DoctorSurePassResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassResponse.reason)
}
inline std::string* DoctorSurePassResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassResponse.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassResponse::release_reason() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassResponse.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassResponse.reason)
}

// -------------------------------------------------------------------

// DoctorSurePassPush

// string datetime = 1;
inline void DoctorSurePassPush::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassPush::datetime() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassPush.datetime)
  return datetime_.GetNoArena();
}
inline void DoctorSurePassPush::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassPush.datetime)
}
inline void DoctorSurePassPush::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassPush.datetime)
}
inline void DoctorSurePassPush::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassPush.datetime)
}
inline void DoctorSurePassPush::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassPush.datetime)
}
inline std::string* DoctorSurePassPush::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassPush.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassPush::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassPush.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassPush::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassPush.datetime)
}

// string register_id = 2;
inline void DoctorSurePassPush::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassPush::register_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassPush.register_id)
  return register_id_.GetNoArena();
}
inline void DoctorSurePassPush::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassPush.register_id)
}
inline void DoctorSurePassPush::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassPush.register_id)
}
inline void DoctorSurePassPush::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassPush.register_id)
}
inline void DoctorSurePassPush::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassPush.register_id)
}
inline std::string* DoctorSurePassPush::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassPush.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassPush::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassPush.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassPush::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassPush.register_id)
}

// string doctor_id = 3;
inline void DoctorSurePassPush::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassPush::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassPush.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorSurePassPush::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassPush.doctor_id)
}
inline void DoctorSurePassPush::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassPush.doctor_id)
}
inline void DoctorSurePassPush::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassPush.doctor_id)
}
inline void DoctorSurePassPush::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassPush.doctor_id)
}
inline std::string* DoctorSurePassPush::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassPush.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassPush::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassPush.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassPush::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassPush.doctor_id)
}

// string patient_id = 4;
inline void DoctorSurePassPush::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorSurePassPush::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorSurePassPush.patient_id)
  return patient_id_.GetNoArena();
}
inline void DoctorSurePassPush::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorSurePassPush.patient_id)
}
inline void DoctorSurePassPush::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorSurePassPush.patient_id)
}
inline void DoctorSurePassPush::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorSurePassPush.patient_id)
}
inline void DoctorSurePassPush::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorSurePassPush.patient_id)
}
inline std::string* DoctorSurePassPush::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorSurePassPush.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorSurePassPush::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DoctorSurePassPush.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorSurePassPush::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorSurePassPush.patient_id)
}

// -------------------------------------------------------------------

// DoctorStopRequest

// string doctor_id = 1;
inline void DoctorStopRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorStopRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.doctor_id)
}
inline void DoctorStopRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.doctor_id)
}
inline void DoctorStopRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.doctor_id)
}
inline void DoctorStopRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.doctor_id)
}
inline std::string* DoctorStopRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.doctor_id)
}

// string register_id = 2;
inline void DoctorStopRequest::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::register_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.register_id)
  return register_id_.GetNoArena();
}
inline void DoctorStopRequest::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.register_id)
}
inline void DoctorStopRequest::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.register_id)
}
inline void DoctorStopRequest::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.register_id)
}
inline void DoctorStopRequest::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.register_id)
}
inline std::string* DoctorStopRequest::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.register_id)
}

// string patient_id = 3;
inline void DoctorStopRequest::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.patient_id)
  return patient_id_.GetNoArena();
}
inline void DoctorStopRequest::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.patient_id)
}
inline void DoctorStopRequest::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.patient_id)
}
inline void DoctorStopRequest::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.patient_id)
}
inline void DoctorStopRequest::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.patient_id)
}
inline std::string* DoctorStopRequest::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.patient_id)
}

// string diagnosis_id = 4;
inline void DoctorStopRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DoctorStopRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.diagnosis_id)
}
inline void DoctorStopRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.diagnosis_id)
}
inline void DoctorStopRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.diagnosis_id)
}
inline void DoctorStopRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.diagnosis_id)
}
inline std::string* DoctorStopRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.diagnosis_id)
}

// string datetime = 5;
inline void DoctorStopRequest::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::datetime() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.datetime)
  return datetime_.GetNoArena();
}
inline void DoctorStopRequest::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.datetime)
}
inline void DoctorStopRequest::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.datetime)
}
inline void DoctorStopRequest::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.datetime)
}
inline void DoctorStopRequest::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.datetime)
}
inline std::string* DoctorStopRequest::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.datetime)
}

// string treat_main = 6;
inline void DoctorStopRequest::clear_treat_main() {
  treat_main_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::treat_main() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.treat_main)
  return treat_main_.GetNoArena();
}
inline void DoctorStopRequest::set_treat_main(const std::string& value) {
  
  treat_main_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.treat_main)
}
inline void DoctorStopRequest::set_treat_main(std::string&& value) {
  
  treat_main_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.treat_main)
}
inline void DoctorStopRequest::set_treat_main(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  treat_main_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.treat_main)
}
inline void DoctorStopRequest::set_treat_main(const char* value, size_t size) {
  
  treat_main_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.treat_main)
}
inline std::string* DoctorStopRequest::mutable_treat_main() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.treat_main)
  return treat_main_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_treat_main() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.treat_main)
  
  return treat_main_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_treat_main(std::string* treat_main) {
  if (treat_main != nullptr) {
    
  } else {
    
  }
  treat_main_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), treat_main);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.treat_main)
}

// string treat_propose = 7;
inline void DoctorStopRequest::clear_treat_propose() {
  treat_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::treat_propose() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.treat_propose)
  return treat_propose_.GetNoArena();
}
inline void DoctorStopRequest::set_treat_propose(const std::string& value) {
  
  treat_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.treat_propose)
}
inline void DoctorStopRequest::set_treat_propose(std::string&& value) {
  
  treat_propose_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.treat_propose)
}
inline void DoctorStopRequest::set_treat_propose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  treat_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.treat_propose)
}
inline void DoctorStopRequest::set_treat_propose(const char* value, size_t size) {
  
  treat_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.treat_propose)
}
inline std::string* DoctorStopRequest::mutable_treat_propose() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.treat_propose)
  return treat_propose_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_treat_propose() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.treat_propose)
  
  return treat_propose_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_treat_propose(std::string* treat_propose) {
  if (treat_propose != nullptr) {
    
  } else {
    
  }
  treat_propose_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), treat_propose);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.treat_propose)
}

// string deal_propose = 8;
inline void DoctorStopRequest::clear_deal_propose() {
  deal_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::deal_propose() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.deal_propose)
  return deal_propose_.GetNoArena();
}
inline void DoctorStopRequest::set_deal_propose(const std::string& value) {
  
  deal_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.deal_propose)
}
inline void DoctorStopRequest::set_deal_propose(std::string&& value) {
  
  deal_propose_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.deal_propose)
}
inline void DoctorStopRequest::set_deal_propose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deal_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.deal_propose)
}
inline void DoctorStopRequest::set_deal_propose(const char* value, size_t size) {
  
  deal_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.deal_propose)
}
inline std::string* DoctorStopRequest::mutable_deal_propose() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.deal_propose)
  return deal_propose_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_deal_propose() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.deal_propose)
  
  return deal_propose_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_deal_propose(std::string* deal_propose) {
  if (deal_propose != nullptr) {
    
  } else {
    
  }
  deal_propose_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deal_propose);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.deal_propose)
}

// string prescript_propose = 9;
inline void DoctorStopRequest::clear_prescript_propose() {
  prescript_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopRequest::prescript_propose() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopRequest.prescript_propose)
  return prescript_propose_.GetNoArena();
}
inline void DoctorStopRequest::set_prescript_propose(const std::string& value) {
  
  prescript_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopRequest.prescript_propose)
}
inline void DoctorStopRequest::set_prescript_propose(std::string&& value) {
  
  prescript_propose_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopRequest.prescript_propose)
}
inline void DoctorStopRequest::set_prescript_propose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prescript_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopRequest.prescript_propose)
}
inline void DoctorStopRequest::set_prescript_propose(const char* value, size_t size) {
  
  prescript_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopRequest.prescript_propose)
}
inline std::string* DoctorStopRequest::mutable_prescript_propose() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopRequest.prescript_propose)
  return prescript_propose_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopRequest::release_prescript_propose() {
  // @@protoc_insertion_point(field_release:message.DoctorStopRequest.prescript_propose)
  
  return prescript_propose_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopRequest::set_allocated_prescript_propose(std::string* prescript_propose) {
  if (prescript_propose != nullptr) {
    
  } else {
    
  }
  prescript_propose_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prescript_propose);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopRequest.prescript_propose)
}

// -------------------------------------------------------------------

// DoctorCompletePush

// string doctor_id = 1;
inline void DoctorCompletePush::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompletePush::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompletePush.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorCompletePush::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompletePush.doctor_id)
}
inline void DoctorCompletePush::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompletePush.doctor_id)
}
inline void DoctorCompletePush::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompletePush.doctor_id)
}
inline void DoctorCompletePush::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompletePush.doctor_id)
}
inline std::string* DoctorCompletePush::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompletePush.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompletePush::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorCompletePush.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompletePush::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompletePush.doctor_id)
}

// string treat_main = 2;
inline void DoctorCompletePush::clear_treat_main() {
  treat_main_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompletePush::treat_main() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompletePush.treat_main)
  return treat_main_.GetNoArena();
}
inline void DoctorCompletePush::set_treat_main(const std::string& value) {
  
  treat_main_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompletePush.treat_main)
}
inline void DoctorCompletePush::set_treat_main(std::string&& value) {
  
  treat_main_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompletePush.treat_main)
}
inline void DoctorCompletePush::set_treat_main(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  treat_main_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompletePush.treat_main)
}
inline void DoctorCompletePush::set_treat_main(const char* value, size_t size) {
  
  treat_main_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompletePush.treat_main)
}
inline std::string* DoctorCompletePush::mutable_treat_main() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompletePush.treat_main)
  return treat_main_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompletePush::release_treat_main() {
  // @@protoc_insertion_point(field_release:message.DoctorCompletePush.treat_main)
  
  return treat_main_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompletePush::set_allocated_treat_main(std::string* treat_main) {
  if (treat_main != nullptr) {
    
  } else {
    
  }
  treat_main_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), treat_main);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompletePush.treat_main)
}

// string treat_propose = 3;
inline void DoctorCompletePush::clear_treat_propose() {
  treat_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompletePush::treat_propose() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompletePush.treat_propose)
  return treat_propose_.GetNoArena();
}
inline void DoctorCompletePush::set_treat_propose(const std::string& value) {
  
  treat_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompletePush.treat_propose)
}
inline void DoctorCompletePush::set_treat_propose(std::string&& value) {
  
  treat_propose_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompletePush.treat_propose)
}
inline void DoctorCompletePush::set_treat_propose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  treat_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompletePush.treat_propose)
}
inline void DoctorCompletePush::set_treat_propose(const char* value, size_t size) {
  
  treat_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompletePush.treat_propose)
}
inline std::string* DoctorCompletePush::mutable_treat_propose() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompletePush.treat_propose)
  return treat_propose_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompletePush::release_treat_propose() {
  // @@protoc_insertion_point(field_release:message.DoctorCompletePush.treat_propose)
  
  return treat_propose_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompletePush::set_allocated_treat_propose(std::string* treat_propose) {
  if (treat_propose != nullptr) {
    
  } else {
    
  }
  treat_propose_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), treat_propose);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompletePush.treat_propose)
}

// string deal_propose = 4;
inline void DoctorCompletePush::clear_deal_propose() {
  deal_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompletePush::deal_propose() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompletePush.deal_propose)
  return deal_propose_.GetNoArena();
}
inline void DoctorCompletePush::set_deal_propose(const std::string& value) {
  
  deal_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompletePush.deal_propose)
}
inline void DoctorCompletePush::set_deal_propose(std::string&& value) {
  
  deal_propose_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompletePush.deal_propose)
}
inline void DoctorCompletePush::set_deal_propose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deal_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompletePush.deal_propose)
}
inline void DoctorCompletePush::set_deal_propose(const char* value, size_t size) {
  
  deal_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompletePush.deal_propose)
}
inline std::string* DoctorCompletePush::mutable_deal_propose() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompletePush.deal_propose)
  return deal_propose_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompletePush::release_deal_propose() {
  // @@protoc_insertion_point(field_release:message.DoctorCompletePush.deal_propose)
  
  return deal_propose_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompletePush::set_allocated_deal_propose(std::string* deal_propose) {
  if (deal_propose != nullptr) {
    
  } else {
    
  }
  deal_propose_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deal_propose);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompletePush.deal_propose)
}

// string prescript_propose = 5;
inline void DoctorCompletePush::clear_prescript_propose() {
  prescript_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompletePush::prescript_propose() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompletePush.prescript_propose)
  return prescript_propose_.GetNoArena();
}
inline void DoctorCompletePush::set_prescript_propose(const std::string& value) {
  
  prescript_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompletePush.prescript_propose)
}
inline void DoctorCompletePush::set_prescript_propose(std::string&& value) {
  
  prescript_propose_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompletePush.prescript_propose)
}
inline void DoctorCompletePush::set_prescript_propose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prescript_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompletePush.prescript_propose)
}
inline void DoctorCompletePush::set_prescript_propose(const char* value, size_t size) {
  
  prescript_propose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompletePush.prescript_propose)
}
inline std::string* DoctorCompletePush::mutable_prescript_propose() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompletePush.prescript_propose)
  return prescript_propose_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompletePush::release_prescript_propose() {
  // @@protoc_insertion_point(field_release:message.DoctorCompletePush.prescript_propose)
  
  return prescript_propose_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompletePush::set_allocated_prescript_propose(std::string* prescript_propose) {
  if (prescript_propose != nullptr) {
    
  } else {
    
  }
  prescript_propose_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prescript_propose);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompletePush.prescript_propose)
}

// -------------------------------------------------------------------

// DoctorStopResponse

// string result = 1;
inline void DoctorStopResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopResponse::result() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopResponse.result)
  return result_.GetNoArena();
}
inline void DoctorStopResponse::set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopResponse.result)
}
inline void DoctorStopResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopResponse.result)
}
inline void DoctorStopResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopResponse.result)
}
inline void DoctorStopResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopResponse.result)
}
inline std::string* DoctorStopResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopResponse.result)
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopResponse::release_result() {
  // @@protoc_insertion_point(field_release:message.DoctorStopResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopResponse.result)
}

// string reason = 2;
inline void DoctorStopResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorStopResponse::reason() const {
  // @@protoc_insertion_point(field_get:message.DoctorStopResponse.reason)
  return reason_.GetNoArena();
}
inline void DoctorStopResponse::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorStopResponse.reason)
}
inline void DoctorStopResponse::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorStopResponse.reason)
}
inline void DoctorStopResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorStopResponse.reason)
}
inline void DoctorStopResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorStopResponse.reason)
}
inline std::string* DoctorStopResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorStopResponse.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorStopResponse::release_reason() {
  // @@protoc_insertion_point(field_release:message.DoctorStopResponse.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorStopResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorStopResponse.reason)
}

// -------------------------------------------------------------------

// DoctorPauseRequest

// string doctor_id = 1;
inline void DoctorPauseRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorPauseRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorPauseRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorPauseRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorPauseRequest.doctor_id)
}
inline void DoctorPauseRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorPauseRequest.doctor_id)
}
inline void DoctorPauseRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorPauseRequest.doctor_id)
}
inline void DoctorPauseRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorPauseRequest.doctor_id)
}
inline std::string* DoctorPauseRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorPauseRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorPauseRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorPauseRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorPauseRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorPauseRequest.doctor_id)
}

// string register_id = 2;
inline void DoctorPauseRequest::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorPauseRequest::register_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorPauseRequest.register_id)
  return register_id_.GetNoArena();
}
inline void DoctorPauseRequest::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorPauseRequest.register_id)
}
inline void DoctorPauseRequest::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorPauseRequest.register_id)
}
inline void DoctorPauseRequest::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorPauseRequest.register_id)
}
inline void DoctorPauseRequest::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorPauseRequest.register_id)
}
inline std::string* DoctorPauseRequest::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorPauseRequest.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorPauseRequest::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DoctorPauseRequest.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorPauseRequest::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorPauseRequest.register_id)
}

// string diagnosis_id = 3;
inline void DoctorPauseRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorPauseRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorPauseRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DoctorPauseRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorPauseRequest.diagnosis_id)
}
inline void DoctorPauseRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorPauseRequest.diagnosis_id)
}
inline void DoctorPauseRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorPauseRequest.diagnosis_id)
}
inline void DoctorPauseRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorPauseRequest.diagnosis_id)
}
inline std::string* DoctorPauseRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorPauseRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorPauseRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DoctorPauseRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorPauseRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorPauseRequest.diagnosis_id)
}

// string patient_id = 4;
inline void DoctorPauseRequest::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorPauseRequest::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorPauseRequest.patient_id)
  return patient_id_.GetNoArena();
}
inline void DoctorPauseRequest::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorPauseRequest.patient_id)
}
inline void DoctorPauseRequest::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorPauseRequest.patient_id)
}
inline void DoctorPauseRequest::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorPauseRequest.patient_id)
}
inline void DoctorPauseRequest::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorPauseRequest.patient_id)
}
inline std::string* DoctorPauseRequest::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorPauseRequest.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorPauseRequest::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DoctorPauseRequest.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorPauseRequest::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorPauseRequest.patient_id)
}

// -------------------------------------------------------------------

// DoctorPauseResponse

// string diagnosis_id = 1;
inline void DoctorPauseResponse::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorPauseResponse::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorPauseResponse.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DoctorPauseResponse::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorPauseResponse.diagnosis_id)
}
inline void DoctorPauseResponse::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorPauseResponse.diagnosis_id)
}
inline void DoctorPauseResponse::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorPauseResponse.diagnosis_id)
}
inline void DoctorPauseResponse::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorPauseResponse.diagnosis_id)
}
inline std::string* DoctorPauseResponse::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorPauseResponse.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorPauseResponse::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DoctorPauseResponse.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorPauseResponse::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorPauseResponse.diagnosis_id)
}

// string register_id = 2;
inline void DoctorPauseResponse::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorPauseResponse::register_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorPauseResponse.register_id)
  return register_id_.GetNoArena();
}
inline void DoctorPauseResponse::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorPauseResponse.register_id)
}
inline void DoctorPauseResponse::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorPauseResponse.register_id)
}
inline void DoctorPauseResponse::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorPauseResponse.register_id)
}
inline void DoctorPauseResponse::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorPauseResponse.register_id)
}
inline std::string* DoctorPauseResponse::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorPauseResponse.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorPauseResponse::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DoctorPauseResponse.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorPauseResponse::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorPauseResponse.register_id)
}

// string doctor_id = 3;
inline void DoctorPauseResponse::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorPauseResponse::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorPauseResponse.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorPauseResponse::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorPauseResponse.doctor_id)
}
inline void DoctorPauseResponse::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorPauseResponse.doctor_id)
}
inline void DoctorPauseResponse::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorPauseResponse.doctor_id)
}
inline void DoctorPauseResponse::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorPauseResponse.doctor_id)
}
inline std::string* DoctorPauseResponse::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorPauseResponse.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorPauseResponse::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorPauseResponse.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorPauseResponse::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorPauseResponse.doctor_id)
}

// string patient_id = 4;
inline void DoctorPauseResponse::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorPauseResponse::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorPauseResponse.patient_id)
  return patient_id_.GetNoArena();
}
inline void DoctorPauseResponse::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorPauseResponse.patient_id)
}
inline void DoctorPauseResponse::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorPauseResponse.patient_id)
}
inline void DoctorPauseResponse::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorPauseResponse.patient_id)
}
inline void DoctorPauseResponse::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorPauseResponse.patient_id)
}
inline std::string* DoctorPauseResponse::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorPauseResponse.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorPauseResponse::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DoctorPauseResponse.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorPauseResponse::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorPauseResponse.patient_id)
}

// -------------------------------------------------------------------

// DiagnosisPausePush

// string diagnosis_id = 1;
inline void DiagnosisPausePush::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPausePush::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPausePush.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisPausePush::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPausePush.diagnosis_id)
}
inline void DiagnosisPausePush::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPausePush.diagnosis_id)
}
inline void DiagnosisPausePush::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPausePush.diagnosis_id)
}
inline void DiagnosisPausePush::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPausePush.diagnosis_id)
}
inline std::string* DiagnosisPausePush::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPausePush.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPausePush::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPausePush.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPausePush::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPausePush.diagnosis_id)
}

// string register_id = 2;
inline void DiagnosisPausePush::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPausePush::register_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPausePush.register_id)
  return register_id_.GetNoArena();
}
inline void DiagnosisPausePush::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPausePush.register_id)
}
inline void DiagnosisPausePush::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPausePush.register_id)
}
inline void DiagnosisPausePush::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPausePush.register_id)
}
inline void DiagnosisPausePush::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPausePush.register_id)
}
inline std::string* DiagnosisPausePush::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPausePush.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPausePush::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPausePush.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPausePush::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPausePush.register_id)
}

// string doctor_id = 3;
inline void DiagnosisPausePush::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPausePush::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPausePush.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DiagnosisPausePush::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPausePush.doctor_id)
}
inline void DiagnosisPausePush::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPausePush.doctor_id)
}
inline void DiagnosisPausePush::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPausePush.doctor_id)
}
inline void DiagnosisPausePush::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPausePush.doctor_id)
}
inline std::string* DiagnosisPausePush::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPausePush.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPausePush::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPausePush.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPausePush::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPausePush.doctor_id)
}

// string patient_id = 4;
inline void DiagnosisPausePush::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPausePush::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPausePush.patient_id)
  return patient_id_.GetNoArena();
}
inline void DiagnosisPausePush::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPausePush.patient_id)
}
inline void DiagnosisPausePush::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPausePush.patient_id)
}
inline void DiagnosisPausePush::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPausePush.patient_id)
}
inline void DiagnosisPausePush::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPausePush.patient_id)
}
inline std::string* DiagnosisPausePush::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPausePush.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPausePush::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPausePush.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPausePush::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPausePush.patient_id)
}

// -------------------------------------------------------------------

// DiagnosisPauseRecoverRequest

// string diagnosis_id = 1;
inline void DiagnosisPauseRecoverRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPauseRecoverRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPauseRecoverRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisPauseRecoverRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPauseRecoverRequest.diagnosis_id)
}
inline void DiagnosisPauseRecoverRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPauseRecoverRequest.diagnosis_id)
}
inline void DiagnosisPauseRecoverRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPauseRecoverRequest.diagnosis_id)
}
inline void DiagnosisPauseRecoverRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPauseRecoverRequest.diagnosis_id)
}
inline std::string* DiagnosisPauseRecoverRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPauseRecoverRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPauseRecoverRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPauseRecoverRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPauseRecoverRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPauseRecoverRequest.diagnosis_id)
}

// string register_id = 2;
inline void DiagnosisPauseRecoverRequest::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPauseRecoverRequest::register_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPauseRecoverRequest.register_id)
  return register_id_.GetNoArena();
}
inline void DiagnosisPauseRecoverRequest::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPauseRecoverRequest.register_id)
}
inline void DiagnosisPauseRecoverRequest::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPauseRecoverRequest.register_id)
}
inline void DiagnosisPauseRecoverRequest::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPauseRecoverRequest.register_id)
}
inline void DiagnosisPauseRecoverRequest::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPauseRecoverRequest.register_id)
}
inline std::string* DiagnosisPauseRecoverRequest::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPauseRecoverRequest.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPauseRecoverRequest::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPauseRecoverRequest.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPauseRecoverRequest::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPauseRecoverRequest.register_id)
}

// string patient_id = 3;
inline void DiagnosisPauseRecoverRequest::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPauseRecoverRequest::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPauseRecoverRequest.patient_id)
  return patient_id_.GetNoArena();
}
inline void DiagnosisPauseRecoverRequest::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPauseRecoverRequest.patient_id)
}
inline void DiagnosisPauseRecoverRequest::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPauseRecoverRequest.patient_id)
}
inline void DiagnosisPauseRecoverRequest::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPauseRecoverRequest.patient_id)
}
inline void DiagnosisPauseRecoverRequest::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPauseRecoverRequest.patient_id)
}
inline std::string* DiagnosisPauseRecoverRequest::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPauseRecoverRequest.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPauseRecoverRequest::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPauseRecoverRequest.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPauseRecoverRequest::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPauseRecoverRequest.patient_id)
}

// -------------------------------------------------------------------

// DiagnosisPauseRecoverResponse

// string diagnosis_id = 1;
inline void DiagnosisPauseRecoverResponse::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPauseRecoverResponse::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPauseRecoverResponse.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisPauseRecoverResponse::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPauseRecoverResponse.diagnosis_id)
}
inline void DiagnosisPauseRecoverResponse::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPauseRecoverResponse.diagnosis_id)
}
inline void DiagnosisPauseRecoverResponse::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPauseRecoverResponse.diagnosis_id)
}
inline void DiagnosisPauseRecoverResponse::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPauseRecoverResponse.diagnosis_id)
}
inline std::string* DiagnosisPauseRecoverResponse::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPauseRecoverResponse.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPauseRecoverResponse::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPauseRecoverResponse.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPauseRecoverResponse::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPauseRecoverResponse.diagnosis_id)
}

// string register_id = 2;
inline void DiagnosisPauseRecoverResponse::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPauseRecoverResponse::register_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPauseRecoverResponse.register_id)
  return register_id_.GetNoArena();
}
inline void DiagnosisPauseRecoverResponse::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPauseRecoverResponse.register_id)
}
inline void DiagnosisPauseRecoverResponse::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPauseRecoverResponse.register_id)
}
inline void DiagnosisPauseRecoverResponse::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPauseRecoverResponse.register_id)
}
inline void DiagnosisPauseRecoverResponse::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPauseRecoverResponse.register_id)
}
inline std::string* DiagnosisPauseRecoverResponse::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPauseRecoverResponse.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPauseRecoverResponse::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPauseRecoverResponse.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPauseRecoverResponse::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPauseRecoverResponse.register_id)
}

// string patient_id = 3;
inline void DiagnosisPauseRecoverResponse::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPauseRecoverResponse::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPauseRecoverResponse.patient_id)
  return patient_id_.GetNoArena();
}
inline void DiagnosisPauseRecoverResponse::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPauseRecoverResponse.patient_id)
}
inline void DiagnosisPauseRecoverResponse::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPauseRecoverResponse.patient_id)
}
inline void DiagnosisPauseRecoverResponse::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPauseRecoverResponse.patient_id)
}
inline void DiagnosisPauseRecoverResponse::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPauseRecoverResponse.patient_id)
}
inline std::string* DiagnosisPauseRecoverResponse::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPauseRecoverResponse.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPauseRecoverResponse::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPauseRecoverResponse.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPauseRecoverResponse::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPauseRecoverResponse.patient_id)
}

// -------------------------------------------------------------------

// DiagnosisPassRecoverRequest

// string diagnosis_id = 1;
inline void DiagnosisPassRecoverRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPassRecoverRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPassRecoverRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisPassRecoverRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPassRecoverRequest.diagnosis_id)
}
inline void DiagnosisPassRecoverRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPassRecoverRequest.diagnosis_id)
}
inline void DiagnosisPassRecoverRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPassRecoverRequest.diagnosis_id)
}
inline void DiagnosisPassRecoverRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPassRecoverRequest.diagnosis_id)
}
inline std::string* DiagnosisPassRecoverRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPassRecoverRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPassRecoverRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPassRecoverRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPassRecoverRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPassRecoverRequest.diagnosis_id)
}

// string register_id = 2;
inline void DiagnosisPassRecoverRequest::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPassRecoverRequest::register_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPassRecoverRequest.register_id)
  return register_id_.GetNoArena();
}
inline void DiagnosisPassRecoverRequest::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPassRecoverRequest.register_id)
}
inline void DiagnosisPassRecoverRequest::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPassRecoverRequest.register_id)
}
inline void DiagnosisPassRecoverRequest::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPassRecoverRequest.register_id)
}
inline void DiagnosisPassRecoverRequest::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPassRecoverRequest.register_id)
}
inline std::string* DiagnosisPassRecoverRequest::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPassRecoverRequest.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPassRecoverRequest::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPassRecoverRequest.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPassRecoverRequest::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPassRecoverRequest.register_id)
}

// string patient_id = 3;
inline void DiagnosisPassRecoverRequest::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPassRecoverRequest::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPassRecoverRequest.patient_id)
  return patient_id_.GetNoArena();
}
inline void DiagnosisPassRecoverRequest::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPassRecoverRequest.patient_id)
}
inline void DiagnosisPassRecoverRequest::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPassRecoverRequest.patient_id)
}
inline void DiagnosisPassRecoverRequest::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPassRecoverRequest.patient_id)
}
inline void DiagnosisPassRecoverRequest::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPassRecoverRequest.patient_id)
}
inline std::string* DiagnosisPassRecoverRequest::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPassRecoverRequest.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPassRecoverRequest::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPassRecoverRequest.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPassRecoverRequest::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPassRecoverRequest.patient_id)
}

// -------------------------------------------------------------------

// DiagnosisPassRecoverResponse

// string diagnosis_id = 1;
inline void DiagnosisPassRecoverResponse::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPassRecoverResponse::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPassRecoverResponse.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisPassRecoverResponse::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPassRecoverResponse.diagnosis_id)
}
inline void DiagnosisPassRecoverResponse::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPassRecoverResponse.diagnosis_id)
}
inline void DiagnosisPassRecoverResponse::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPassRecoverResponse.diagnosis_id)
}
inline void DiagnosisPassRecoverResponse::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPassRecoverResponse.diagnosis_id)
}
inline std::string* DiagnosisPassRecoverResponse::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPassRecoverResponse.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPassRecoverResponse::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPassRecoverResponse.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPassRecoverResponse::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPassRecoverResponse.diagnosis_id)
}

// string register_id = 2;
inline void DiagnosisPassRecoverResponse::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPassRecoverResponse::register_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPassRecoverResponse.register_id)
  return register_id_.GetNoArena();
}
inline void DiagnosisPassRecoverResponse::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPassRecoverResponse.register_id)
}
inline void DiagnosisPassRecoverResponse::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPassRecoverResponse.register_id)
}
inline void DiagnosisPassRecoverResponse::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPassRecoverResponse.register_id)
}
inline void DiagnosisPassRecoverResponse::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPassRecoverResponse.register_id)
}
inline std::string* DiagnosisPassRecoverResponse::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPassRecoverResponse.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPassRecoverResponse::release_register_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPassRecoverResponse.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPassRecoverResponse::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPassRecoverResponse.register_id)
}

// string patient_id = 3;
inline void DiagnosisPassRecoverResponse::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisPassRecoverResponse::patient_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisPassRecoverResponse.patient_id)
  return patient_id_.GetNoArena();
}
inline void DiagnosisPassRecoverResponse::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisPassRecoverResponse.patient_id)
}
inline void DiagnosisPassRecoverResponse::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisPassRecoverResponse.patient_id)
}
inline void DiagnosisPassRecoverResponse::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisPassRecoverResponse.patient_id)
}
inline void DiagnosisPassRecoverResponse::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisPassRecoverResponse.patient_id)
}
inline std::string* DiagnosisPassRecoverResponse::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisPassRecoverResponse.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisPassRecoverResponse::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisPassRecoverResponse.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisPassRecoverResponse::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisPassRecoverResponse.patient_id)
}

// -------------------------------------------------------------------

// DoctorLeaveRequest

// string doctor_id = 1;
inline void DoctorLeaveRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorLeaveRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorLeaveRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorLeaveRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorLeaveRequest.doctor_id)
}
inline void DoctorLeaveRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorLeaveRequest.doctor_id)
}
inline void DoctorLeaveRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorLeaveRequest.doctor_id)
}
inline void DoctorLeaveRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorLeaveRequest.doctor_id)
}
inline std::string* DoctorLeaveRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorLeaveRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorLeaveRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorLeaveRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorLeaveRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorLeaveRequest.doctor_id)
}

// -------------------------------------------------------------------

// DoctorLeaveResponse

// string doctor_id = 1;
inline void DoctorLeaveResponse::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorLeaveResponse::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorLeaveResponse.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorLeaveResponse::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorLeaveResponse.doctor_id)
}
inline void DoctorLeaveResponse::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorLeaveResponse.doctor_id)
}
inline void DoctorLeaveResponse::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorLeaveResponse.doctor_id)
}
inline void DoctorLeaveResponse::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorLeaveResponse.doctor_id)
}
inline std::string* DoctorLeaveResponse::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorLeaveResponse.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorLeaveResponse::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorLeaveResponse.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorLeaveResponse::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorLeaveResponse.doctor_id)
}

// string datetime = 2;
inline void DoctorLeaveResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorLeaveResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DoctorLeaveResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DoctorLeaveResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorLeaveResponse.datetime)
}
inline void DoctorLeaveResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorLeaveResponse.datetime)
}
inline void DoctorLeaveResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorLeaveResponse.datetime)
}
inline void DoctorLeaveResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorLeaveResponse.datetime)
}
inline std::string* DoctorLeaveResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorLeaveResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorLeaveResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DoctorLeaveResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorLeaveResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorLeaveResponse.datetime)
}

// -------------------------------------------------------------------

// DoctorLeaveRecoverRequest

// string doctor_id = 1;
inline void DoctorLeaveRecoverRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorLeaveRecoverRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorLeaveRecoverRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorLeaveRecoverRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorLeaveRecoverRequest.doctor_id)
}
inline void DoctorLeaveRecoverRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorLeaveRecoverRequest.doctor_id)
}
inline void DoctorLeaveRecoverRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorLeaveRecoverRequest.doctor_id)
}
inline void DoctorLeaveRecoverRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorLeaveRecoverRequest.doctor_id)
}
inline std::string* DoctorLeaveRecoverRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorLeaveRecoverRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorLeaveRecoverRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorLeaveRecoverRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorLeaveRecoverRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorLeaveRecoverRequest.doctor_id)
}

// -------------------------------------------------------------------

// DoctorLeaveRecoverResponse

// string doctor_id = 1;
inline void DoctorLeaveRecoverResponse::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorLeaveRecoverResponse::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorLeaveRecoverResponse.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorLeaveRecoverResponse::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorLeaveRecoverResponse.doctor_id)
}
inline void DoctorLeaveRecoverResponse::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorLeaveRecoverResponse.doctor_id)
}
inline void DoctorLeaveRecoverResponse::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorLeaveRecoverResponse.doctor_id)
}
inline void DoctorLeaveRecoverResponse::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorLeaveRecoverResponse.doctor_id)
}
inline std::string* DoctorLeaveRecoverResponse::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorLeaveRecoverResponse.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorLeaveRecoverResponse::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorLeaveRecoverResponse.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorLeaveRecoverResponse::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorLeaveRecoverResponse.doctor_id)
}

// string datetime = 2;
inline void DoctorLeaveRecoverResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorLeaveRecoverResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DoctorLeaveRecoverResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DoctorLeaveRecoverResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorLeaveRecoverResponse.datetime)
}
inline void DoctorLeaveRecoverResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorLeaveRecoverResponse.datetime)
}
inline void DoctorLeaveRecoverResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorLeaveRecoverResponse.datetime)
}
inline void DoctorLeaveRecoverResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorLeaveRecoverResponse.datetime)
}
inline std::string* DoctorLeaveRecoverResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorLeaveRecoverResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorLeaveRecoverResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DoctorLeaveRecoverResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorLeaveRecoverResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorLeaveRecoverResponse.datetime)
}

// -------------------------------------------------------------------

// DoctorCompleteRequest

// string doctor_id = 1;
inline void DoctorCompleteRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompleteRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompleteRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorCompleteRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompleteRequest.doctor_id)
}
inline void DoctorCompleteRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompleteRequest.doctor_id)
}
inline void DoctorCompleteRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompleteRequest.doctor_id)
}
inline void DoctorCompleteRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompleteRequest.doctor_id)
}
inline std::string* DoctorCompleteRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompleteRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompleteRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorCompleteRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompleteRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompleteRequest.doctor_id)
}

// string datetime = 2;
inline void DoctorCompleteRequest::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompleteRequest::datetime() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompleteRequest.datetime)
  return datetime_.GetNoArena();
}
inline void DoctorCompleteRequest::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompleteRequest.datetime)
}
inline void DoctorCompleteRequest::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompleteRequest.datetime)
}
inline void DoctorCompleteRequest::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompleteRequest.datetime)
}
inline void DoctorCompleteRequest::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompleteRequest.datetime)
}
inline std::string* DoctorCompleteRequest::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompleteRequest.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompleteRequest::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DoctorCompleteRequest.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompleteRequest::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompleteRequest.datetime)
}

// -------------------------------------------------------------------

// DoctorCompleteResponse

// string doctor_id = 1;
inline void DoctorCompleteResponse::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompleteResponse::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompleteResponse.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorCompleteResponse::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompleteResponse.doctor_id)
}
inline void DoctorCompleteResponse::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompleteResponse.doctor_id)
}
inline void DoctorCompleteResponse::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompleteResponse.doctor_id)
}
inline void DoctorCompleteResponse::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompleteResponse.doctor_id)
}
inline std::string* DoctorCompleteResponse::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompleteResponse.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompleteResponse::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorCompleteResponse.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompleteResponse::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompleteResponse.doctor_id)
}

// string datetime = 2;
inline void DoctorCompleteResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorCompleteResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DoctorCompleteResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DoctorCompleteResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorCompleteResponse.datetime)
}
inline void DoctorCompleteResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorCompleteResponse.datetime)
}
inline void DoctorCompleteResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorCompleteResponse.datetime)
}
inline void DoctorCompleteResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorCompleteResponse.datetime)
}
inline std::string* DoctorCompleteResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorCompleteResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorCompleteResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DoctorCompleteResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorCompleteResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorCompleteResponse.datetime)
}

// -------------------------------------------------------------------

// DiagnosisLeaveRequest

// string diagnosis_id = 1;
inline void DiagnosisLeaveRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisLeaveRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisLeaveRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisLeaveRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisLeaveRequest.diagnosis_id)
}
inline void DiagnosisLeaveRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisLeaveRequest.diagnosis_id)
}
inline void DiagnosisLeaveRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisLeaveRequest.diagnosis_id)
}
inline void DiagnosisLeaveRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisLeaveRequest.diagnosis_id)
}
inline std::string* DiagnosisLeaveRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisLeaveRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisLeaveRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisLeaveRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisLeaveRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisLeaveRequest.diagnosis_id)
}

// -------------------------------------------------------------------

// DiagnosisLeaveResponse

// string diagnosis_id = 1;
inline void DiagnosisLeaveResponse::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisLeaveResponse::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisLeaveResponse.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisLeaveResponse::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisLeaveResponse.diagnosis_id)
}
inline void DiagnosisLeaveResponse::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisLeaveResponse.diagnosis_id)
}
inline void DiagnosisLeaveResponse::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisLeaveResponse.diagnosis_id)
}
inline void DiagnosisLeaveResponse::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisLeaveResponse.diagnosis_id)
}
inline std::string* DiagnosisLeaveResponse::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisLeaveResponse.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisLeaveResponse::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisLeaveResponse.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisLeaveResponse::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisLeaveResponse.diagnosis_id)
}

// string datetime = 2;
inline void DiagnosisLeaveResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisLeaveResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisLeaveResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DiagnosisLeaveResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisLeaveResponse.datetime)
}
inline void DiagnosisLeaveResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisLeaveResponse.datetime)
}
inline void DiagnosisLeaveResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisLeaveResponse.datetime)
}
inline void DiagnosisLeaveResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisLeaveResponse.datetime)
}
inline std::string* DiagnosisLeaveResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisLeaveResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisLeaveResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DiagnosisLeaveResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisLeaveResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisLeaveResponse.datetime)
}

// -------------------------------------------------------------------

// DiagnosisLeaveRecoverRequest

// string diagnosis_id = 1;
inline void DiagnosisLeaveRecoverRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisLeaveRecoverRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisLeaveRecoverRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisLeaveRecoverRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisLeaveRecoverRequest.diagnosis_id)
}
inline void DiagnosisLeaveRecoverRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisLeaveRecoverRequest.diagnosis_id)
}
inline void DiagnosisLeaveRecoverRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisLeaveRecoverRequest.diagnosis_id)
}
inline void DiagnosisLeaveRecoverRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisLeaveRecoverRequest.diagnosis_id)
}
inline std::string* DiagnosisLeaveRecoverRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisLeaveRecoverRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisLeaveRecoverRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisLeaveRecoverRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisLeaveRecoverRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisLeaveRecoverRequest.diagnosis_id)
}

// -------------------------------------------------------------------

// DiagnosisLeaveRecoverResponse

// string diagnosis_id = 1;
inline void DiagnosisLeaveRecoverResponse::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisLeaveRecoverResponse::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisLeaveRecoverResponse.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisLeaveRecoverResponse::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisLeaveRecoverResponse.diagnosis_id)
}
inline void DiagnosisLeaveRecoverResponse::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisLeaveRecoverResponse.diagnosis_id)
}
inline void DiagnosisLeaveRecoverResponse::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisLeaveRecoverResponse.diagnosis_id)
}
inline void DiagnosisLeaveRecoverResponse::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisLeaveRecoverResponse.diagnosis_id)
}
inline std::string* DiagnosisLeaveRecoverResponse::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisLeaveRecoverResponse.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisLeaveRecoverResponse::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisLeaveRecoverResponse.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisLeaveRecoverResponse::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisLeaveRecoverResponse.diagnosis_id)
}

// string datetime = 2;
inline void DiagnosisLeaveRecoverResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisLeaveRecoverResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisLeaveRecoverResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DiagnosisLeaveRecoverResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisLeaveRecoverResponse.datetime)
}
inline void DiagnosisLeaveRecoverResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisLeaveRecoverResponse.datetime)
}
inline void DiagnosisLeaveRecoverResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisLeaveRecoverResponse.datetime)
}
inline void DiagnosisLeaveRecoverResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisLeaveRecoverResponse.datetime)
}
inline std::string* DiagnosisLeaveRecoverResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisLeaveRecoverResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisLeaveRecoverResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DiagnosisLeaveRecoverResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisLeaveRecoverResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisLeaveRecoverResponse.datetime)
}

// -------------------------------------------------------------------

// DiagnosisCompleteRequest

// string diagnosis_id = 1;
inline void DiagnosisCompleteRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisCompleteRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisCompleteRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisCompleteRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisCompleteRequest.diagnosis_id)
}
inline void DiagnosisCompleteRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisCompleteRequest.diagnosis_id)
}
inline void DiagnosisCompleteRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisCompleteRequest.diagnosis_id)
}
inline void DiagnosisCompleteRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisCompleteRequest.diagnosis_id)
}
inline std::string* DiagnosisCompleteRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisCompleteRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisCompleteRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisCompleteRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisCompleteRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisCompleteRequest.diagnosis_id)
}

// string datetime = 2;
inline void DiagnosisCompleteRequest::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisCompleteRequest::datetime() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisCompleteRequest.datetime)
  return datetime_.GetNoArena();
}
inline void DiagnosisCompleteRequest::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisCompleteRequest.datetime)
}
inline void DiagnosisCompleteRequest::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisCompleteRequest.datetime)
}
inline void DiagnosisCompleteRequest::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisCompleteRequest.datetime)
}
inline void DiagnosisCompleteRequest::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisCompleteRequest.datetime)
}
inline std::string* DiagnosisCompleteRequest::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisCompleteRequest.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisCompleteRequest::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DiagnosisCompleteRequest.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisCompleteRequest::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisCompleteRequest.datetime)
}

// -------------------------------------------------------------------

// DiagnosisCompleteResponse

// string diagnosis_id = 1;
inline void DiagnosisCompleteResponse::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisCompleteResponse::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisCompleteResponse.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisCompleteResponse::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisCompleteResponse.diagnosis_id)
}
inline void DiagnosisCompleteResponse::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisCompleteResponse.diagnosis_id)
}
inline void DiagnosisCompleteResponse::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisCompleteResponse.diagnosis_id)
}
inline void DiagnosisCompleteResponse::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisCompleteResponse.diagnosis_id)
}
inline std::string* DiagnosisCompleteResponse::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisCompleteResponse.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisCompleteResponse::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisCompleteResponse.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisCompleteResponse::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisCompleteResponse.diagnosis_id)
}

// string datetime = 2;
inline void DiagnosisCompleteResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisCompleteResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisCompleteResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DiagnosisCompleteResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisCompleteResponse.datetime)
}
inline void DiagnosisCompleteResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisCompleteResponse.datetime)
}
inline void DiagnosisCompleteResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisCompleteResponse.datetime)
}
inline void DiagnosisCompleteResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisCompleteResponse.datetime)
}
inline std::string* DiagnosisCompleteResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisCompleteResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisCompleteResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DiagnosisCompleteResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisCompleteResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisCompleteResponse.datetime)
}

// -------------------------------------------------------------------

// DiagnosisSpareRequest

// string diagnosis_id = 1;
inline void DiagnosisSpareRequest::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisSpareRequest::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisSpareRequest.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisSpareRequest::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisSpareRequest.diagnosis_id)
}
inline void DiagnosisSpareRequest::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisSpareRequest.diagnosis_id)
}
inline void DiagnosisSpareRequest::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisSpareRequest.diagnosis_id)
}
inline void DiagnosisSpareRequest::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisSpareRequest.diagnosis_id)
}
inline std::string* DiagnosisSpareRequest::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisSpareRequest.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisSpareRequest::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisSpareRequest.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisSpareRequest::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisSpareRequest.diagnosis_id)
}

// string content = 2;
inline void DiagnosisSpareRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisSpareRequest::content() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisSpareRequest.content)
  return content_.GetNoArena();
}
inline void DiagnosisSpareRequest::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisSpareRequest.content)
}
inline void DiagnosisSpareRequest::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisSpareRequest.content)
}
inline void DiagnosisSpareRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisSpareRequest.content)
}
inline void DiagnosisSpareRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisSpareRequest.content)
}
inline std::string* DiagnosisSpareRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisSpareRequest.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisSpareRequest::release_content() {
  // @@protoc_insertion_point(field_release:message.DiagnosisSpareRequest.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisSpareRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisSpareRequest.content)
}

// -------------------------------------------------------------------

// DiagnosisSpareResponse

// string diagnosis_id = 1;
inline void DiagnosisSpareResponse::clear_diagnosis_id() {
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisSpareResponse::diagnosis_id() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisSpareResponse.diagnosis_id)
  return diagnosis_id_.GetNoArena();
}
inline void DiagnosisSpareResponse::set_diagnosis_id(const std::string& value) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisSpareResponse.diagnosis_id)
}
inline void DiagnosisSpareResponse::set_diagnosis_id(std::string&& value) {
  
  diagnosis_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisSpareResponse.diagnosis_id)
}
inline void DiagnosisSpareResponse::set_diagnosis_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisSpareResponse.diagnosis_id)
}
inline void DiagnosisSpareResponse::set_diagnosis_id(const char* value, size_t size) {
  
  diagnosis_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisSpareResponse.diagnosis_id)
}
inline std::string* DiagnosisSpareResponse::mutable_diagnosis_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisSpareResponse.diagnosis_id)
  return diagnosis_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisSpareResponse::release_diagnosis_id() {
  // @@protoc_insertion_point(field_release:message.DiagnosisSpareResponse.diagnosis_id)
  
  return diagnosis_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisSpareResponse::set_allocated_diagnosis_id(std::string* diagnosis_id) {
  if (diagnosis_id != nullptr) {
    
  } else {
    
  }
  diagnosis_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diagnosis_id);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisSpareResponse.diagnosis_id)
}

// string datetime = 2;
inline void DiagnosisSpareResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiagnosisSpareResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.DiagnosisSpareResponse.datetime)
  return datetime_.GetNoArena();
}
inline void DiagnosisSpareResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DiagnosisSpareResponse.datetime)
}
inline void DiagnosisSpareResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DiagnosisSpareResponse.datetime)
}
inline void DiagnosisSpareResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DiagnosisSpareResponse.datetime)
}
inline void DiagnosisSpareResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DiagnosisSpareResponse.datetime)
}
inline std::string* DiagnosisSpareResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.DiagnosisSpareResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiagnosisSpareResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.DiagnosisSpareResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiagnosisSpareResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.DiagnosisSpareResponse.datetime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TogetherCall_2eproto
