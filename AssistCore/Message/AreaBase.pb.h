// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AreaBase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AreaBase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AreaBase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AreaBase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AreaBase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_AreaBase_2eproto();
namespace message {
class DiagnosisListPush;
class DiagnosisListPushDefaultTypeInternal;
extern DiagnosisListPushDefaultTypeInternal _DiagnosisListPush_default_instance_;
class DoctorRoomIDPush;
class DoctorRoomIDPushDefaultTypeInternal;
extern DoctorRoomIDPushDefaultTypeInternal _DoctorRoomIDPush_default_instance_;
class ListProperty;
class ListPropertyDefaultTypeInternal;
extern ListPropertyDefaultTypeInternal _ListProperty_default_instance_;
class UserAvatarModifyRequest;
class UserAvatarModifyRequestDefaultTypeInternal;
extern UserAvatarModifyRequestDefaultTypeInternal _UserAvatarModifyRequest_default_instance_;
class UserAvatarModifyResponse;
class UserAvatarModifyResponseDefaultTypeInternal;
extern UserAvatarModifyResponseDefaultTypeInternal _UserAvatarModifyResponse_default_instance_;
class UserBaseRequest;
class UserBaseRequestDefaultTypeInternal;
extern UserBaseRequestDefaultTypeInternal _UserBaseRequest_default_instance_;
class UserPasswordModifyRequest;
class UserPasswordModifyRequestDefaultTypeInternal;
extern UserPasswordModifyRequestDefaultTypeInternal _UserPasswordModifyRequest_default_instance_;
class UserPasswordModifyResponse;
class UserPasswordModifyResponseDefaultTypeInternal;
extern UserPasswordModifyResponseDefaultTypeInternal _UserPasswordModifyResponse_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::DiagnosisListPush* Arena::CreateMaybeMessage<::message::DiagnosisListPush>(Arena*);
template<> ::message::DoctorRoomIDPush* Arena::CreateMaybeMessage<::message::DoctorRoomIDPush>(Arena*);
template<> ::message::ListProperty* Arena::CreateMaybeMessage<::message::ListProperty>(Arena*);
template<> ::message::UserAvatarModifyRequest* Arena::CreateMaybeMessage<::message::UserAvatarModifyRequest>(Arena*);
template<> ::message::UserAvatarModifyResponse* Arena::CreateMaybeMessage<::message::UserAvatarModifyResponse>(Arena*);
template<> ::message::UserBaseRequest* Arena::CreateMaybeMessage<::message::UserBaseRequest>(Arena*);
template<> ::message::UserPasswordModifyRequest* Arena::CreateMaybeMessage<::message::UserPasswordModifyRequest>(Arena*);
template<> ::message::UserPasswordModifyResponse* Arena::CreateMaybeMessage<::message::UserPasswordModifyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class UserBaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UserBaseRequest) */ {
 public:
  UserBaseRequest();
  virtual ~UserBaseRequest();

  UserBaseRequest(const UserBaseRequest& from);
  UserBaseRequest(UserBaseRequest&& from) noexcept
    : UserBaseRequest() {
    *this = ::std::move(from);
  }

  inline UserBaseRequest& operator=(const UserBaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserBaseRequest& operator=(UserBaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserBaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserBaseRequest* internal_default_instance() {
    return reinterpret_cast<const UserBaseRequest*>(
               &_UserBaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserBaseRequest* other);
  friend void swap(UserBaseRequest& a, UserBaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserBaseRequest* New() const final {
    return CreateMaybeMessage<UserBaseRequest>(nullptr);
  }

  UserBaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserBaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserBaseRequest& from);
  void MergeFrom(const UserBaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UserBaseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string public_key = 1;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const char* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

  // @@protoc_insertion_point(class_scope:message.UserBaseRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AreaBase_2eproto;
};
// -------------------------------------------------------------------

class ListProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ListProperty) */ {
 public:
  ListProperty();
  virtual ~ListProperty();

  ListProperty(const ListProperty& from);
  ListProperty(ListProperty&& from) noexcept
    : ListProperty() {
    *this = ::std::move(from);
  }

  inline ListProperty& operator=(const ListProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProperty& operator=(ListProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListProperty* internal_default_instance() {
    return reinterpret_cast<const ListProperty*>(
               &_ListProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListProperty* other);
  friend void swap(ListProperty& a, ListProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListProperty* New() const final {
    return CreateMaybeMessage<ListProperty>(nullptr);
  }

  ListProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListProperty& from);
  void MergeFrom(const ListProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ListProperty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string patient_id = 2;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 2;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // string register_id = 3;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 3;
  const std::string& register_id() const;
  void set_register_id(const std::string& value);
  void set_register_id(std::string&& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  std::string* mutable_register_id();
  std::string* release_register_id();
  void set_allocated_register_id(std::string* register_id);

  // string doctor_id = 4;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 4;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string doctor_name = 5;
  void clear_doctor_name();
  static const int kDoctorNameFieldNumber = 5;
  const std::string& doctor_name() const;
  void set_doctor_name(const std::string& value);
  void set_doctor_name(std::string&& value);
  void set_doctor_name(const char* value);
  void set_doctor_name(const char* value, size_t size);
  std::string* mutable_doctor_name();
  std::string* release_doctor_name();
  void set_allocated_doctor_name(std::string* doctor_name);

  // string patient_name = 6;
  void clear_patient_name();
  static const int kPatientNameFieldNumber = 6;
  const std::string& patient_name() const;
  void set_patient_name(const std::string& value);
  void set_patient_name(std::string&& value);
  void set_patient_name(const char* value);
  void set_patient_name(const char* value, size_t size);
  std::string* mutable_patient_name();
  std::string* release_patient_name();
  void set_allocated_patient_name(std::string* patient_name);

  // string code = 7;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // string state = 8;
  void clear_state();
  static const int kStateFieldNumber = 8;
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);

  // string sex = 10;
  void clear_sex();
  static const int kSexFieldNumber = 10;
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);

  // sint32 rank = 1;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 wait_num = 9;
  void clear_wait_num();
  static const int kWaitNumFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_num() const;
  void set_wait_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:message.ListProperty)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr register_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AreaBase_2eproto;
};
// -------------------------------------------------------------------

class DiagnosisListPush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DiagnosisListPush) */ {
 public:
  DiagnosisListPush();
  virtual ~DiagnosisListPush();

  DiagnosisListPush(const DiagnosisListPush& from);
  DiagnosisListPush(DiagnosisListPush&& from) noexcept
    : DiagnosisListPush() {
    *this = ::std::move(from);
  }

  inline DiagnosisListPush& operator=(const DiagnosisListPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiagnosisListPush& operator=(DiagnosisListPush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiagnosisListPush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosisListPush* internal_default_instance() {
    return reinterpret_cast<const DiagnosisListPush*>(
               &_DiagnosisListPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DiagnosisListPush* other);
  friend void swap(DiagnosisListPush& a, DiagnosisListPush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosisListPush* New() const final {
    return CreateMaybeMessage<DiagnosisListPush>(nullptr);
  }

  DiagnosisListPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosisListPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiagnosisListPush& from);
  void MergeFrom(const DiagnosisListPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosisListPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DiagnosisListPush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .message.ListProperty wait_force = 1;
  int wait_force_size() const;
  void clear_wait_force();
  static const int kWaitForceFieldNumber = 1;
  ::message::ListProperty* mutable_wait_force(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
      mutable_wait_force();
  const ::message::ListProperty& wait_force(int index) const;
  ::message::ListProperty* add_wait_force();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
      wait_force() const;

  // repeated .message.ListProperty wait = 2;
  int wait_size() const;
  void clear_wait();
  static const int kWaitFieldNumber = 2;
  ::message::ListProperty* mutable_wait(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
      mutable_wait();
  const ::message::ListProperty& wait(int index) const;
  ::message::ListProperty* add_wait();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
      wait() const;

  // repeated .message.ListProperty pass_ = 3;
  int pass__size() const;
  void clear_pass_();
  static const int kPassFieldNumber = 3;
  ::message::ListProperty* mutable_pass_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
      mutable_pass_();
  const ::message::ListProperty& pass_(int index) const;
  ::message::ListProperty* add_pass_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
      pass_() const;

  // repeated .message.ListProperty pause = 4;
  int pause_size() const;
  void clear_pause();
  static const int kPauseFieldNumber = 4;
  ::message::ListProperty* mutable_pause(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
      mutable_pause();
  const ::message::ListProperty& pause(int index) const;
  ::message::ListProperty* add_pause();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
      pause() const;

  // repeated .message.ListProperty complete = 5;
  int complete_size() const;
  void clear_complete();
  static const int kCompleteFieldNumber = 5;
  ::message::ListProperty* mutable_complete(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
      mutable_complete();
  const ::message::ListProperty& complete(int index) const;
  ::message::ListProperty* add_complete();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
      complete() const;

  // @@protoc_insertion_point(class_scope:message.DiagnosisListPush)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty > wait_force_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty > wait_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty > pass__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty > pause_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty > complete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AreaBase_2eproto;
};
// -------------------------------------------------------------------

class DoctorRoomIDPush final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DoctorRoomIDPush) */ {
 public:
  DoctorRoomIDPush();
  virtual ~DoctorRoomIDPush();

  DoctorRoomIDPush(const DoctorRoomIDPush& from);
  DoctorRoomIDPush(DoctorRoomIDPush&& from) noexcept
    : DoctorRoomIDPush() {
    *this = ::std::move(from);
  }

  inline DoctorRoomIDPush& operator=(const DoctorRoomIDPush& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoctorRoomIDPush& operator=(DoctorRoomIDPush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DoctorRoomIDPush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoctorRoomIDPush* internal_default_instance() {
    return reinterpret_cast<const DoctorRoomIDPush*>(
               &_DoctorRoomIDPush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DoctorRoomIDPush* other);
  friend void swap(DoctorRoomIDPush& a, DoctorRoomIDPush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoctorRoomIDPush* New() const final {
    return CreateMaybeMessage<DoctorRoomIDPush>(nullptr);
  }

  DoctorRoomIDPush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoctorRoomIDPush>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoctorRoomIDPush& from);
  void MergeFrom(const DoctorRoomIDPush& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoctorRoomIDPush* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DoctorRoomIDPush";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  const std::string& room_id() const;
  void set_room_id(const std::string& value);
  void set_room_id(std::string&& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  std::string* mutable_room_id();
  std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);

  // string doctor_id = 2;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 2;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // @@protoc_insertion_point(class_scope:message.DoctorRoomIDPush)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AreaBase_2eproto;
};
// -------------------------------------------------------------------

class UserPasswordModifyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UserPasswordModifyRequest) */ {
 public:
  UserPasswordModifyRequest();
  virtual ~UserPasswordModifyRequest();

  UserPasswordModifyRequest(const UserPasswordModifyRequest& from);
  UserPasswordModifyRequest(UserPasswordModifyRequest&& from) noexcept
    : UserPasswordModifyRequest() {
    *this = ::std::move(from);
  }

  inline UserPasswordModifyRequest& operator=(const UserPasswordModifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPasswordModifyRequest& operator=(UserPasswordModifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserPasswordModifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPasswordModifyRequest* internal_default_instance() {
    return reinterpret_cast<const UserPasswordModifyRequest*>(
               &_UserPasswordModifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UserPasswordModifyRequest* other);
  friend void swap(UserPasswordModifyRequest& a, UserPasswordModifyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPasswordModifyRequest* New() const final {
    return CreateMaybeMessage<UserPasswordModifyRequest>(nullptr);
  }

  UserPasswordModifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPasswordModifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPasswordModifyRequest& from);
  void MergeFrom(const UserPasswordModifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPasswordModifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UserPasswordModifyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string user_type = 2;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  const std::string& user_type() const;
  void set_user_type(const std::string& value);
  void set_user_type(std::string&& value);
  void set_user_type(const char* value);
  void set_user_type(const char* value, size_t size);
  std::string* mutable_user_type();
  std::string* release_user_type();
  void set_allocated_user_type(std::string* user_type);

  // string pwd_old = 3;
  void clear_pwd_old();
  static const int kPwdOldFieldNumber = 3;
  const std::string& pwd_old() const;
  void set_pwd_old(const std::string& value);
  void set_pwd_old(std::string&& value);
  void set_pwd_old(const char* value);
  void set_pwd_old(const char* value, size_t size);
  std::string* mutable_pwd_old();
  std::string* release_pwd_old();
  void set_allocated_pwd_old(std::string* pwd_old);

  // string pwd_new = 4;
  void clear_pwd_new();
  static const int kPwdNewFieldNumber = 4;
  const std::string& pwd_new() const;
  void set_pwd_new(const std::string& value);
  void set_pwd_new(std::string&& value);
  void set_pwd_new(const char* value);
  void set_pwd_new(const char* value, size_t size);
  std::string* mutable_pwd_new();
  std::string* release_pwd_new();
  void set_allocated_pwd_new(std::string* pwd_new);

  // @@protoc_insertion_point(class_scope:message.UserPasswordModifyRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_old_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_new_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AreaBase_2eproto;
};
// -------------------------------------------------------------------

class UserPasswordModifyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UserPasswordModifyResponse) */ {
 public:
  UserPasswordModifyResponse();
  virtual ~UserPasswordModifyResponse();

  UserPasswordModifyResponse(const UserPasswordModifyResponse& from);
  UserPasswordModifyResponse(UserPasswordModifyResponse&& from) noexcept
    : UserPasswordModifyResponse() {
    *this = ::std::move(from);
  }

  inline UserPasswordModifyResponse& operator=(const UserPasswordModifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPasswordModifyResponse& operator=(UserPasswordModifyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserPasswordModifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserPasswordModifyResponse* internal_default_instance() {
    return reinterpret_cast<const UserPasswordModifyResponse*>(
               &_UserPasswordModifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UserPasswordModifyResponse* other);
  friend void swap(UserPasswordModifyResponse& a, UserPasswordModifyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserPasswordModifyResponse* New() const final {
    return CreateMaybeMessage<UserPasswordModifyResponse>(nullptr);
  }

  UserPasswordModifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPasswordModifyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPasswordModifyResponse& from);
  void MergeFrom(const UserPasswordModifyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPasswordModifyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UserPasswordModifyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // bool result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:message.UserPasswordModifyResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AreaBase_2eproto;
};
// -------------------------------------------------------------------

class UserAvatarModifyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UserAvatarModifyRequest) */ {
 public:
  UserAvatarModifyRequest();
  virtual ~UserAvatarModifyRequest();

  UserAvatarModifyRequest(const UserAvatarModifyRequest& from);
  UserAvatarModifyRequest(UserAvatarModifyRequest&& from) noexcept
    : UserAvatarModifyRequest() {
    *this = ::std::move(from);
  }

  inline UserAvatarModifyRequest& operator=(const UserAvatarModifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAvatarModifyRequest& operator=(UserAvatarModifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserAvatarModifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAvatarModifyRequest* internal_default_instance() {
    return reinterpret_cast<const UserAvatarModifyRequest*>(
               &_UserAvatarModifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UserAvatarModifyRequest* other);
  friend void swap(UserAvatarModifyRequest& a, UserAvatarModifyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAvatarModifyRequest* New() const final {
    return CreateMaybeMessage<UserAvatarModifyRequest>(nullptr);
  }

  UserAvatarModifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAvatarModifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAvatarModifyRequest& from);
  void MergeFrom(const UserAvatarModifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAvatarModifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UserAvatarModifyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string user_type = 2;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  const std::string& user_type() const;
  void set_user_type(const std::string& value);
  void set_user_type(std::string&& value);
  void set_user_type(const char* value);
  void set_user_type(const char* value, size_t size);
  std::string* mutable_user_type();
  std::string* release_user_type();
  void set_allocated_user_type(std::string* user_type);

  // bytes avatar = 3;
  void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const void* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);

  // @@protoc_insertion_point(class_scope:message.UserAvatarModifyRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AreaBase_2eproto;
};
// -------------------------------------------------------------------

class UserAvatarModifyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.UserAvatarModifyResponse) */ {
 public:
  UserAvatarModifyResponse();
  virtual ~UserAvatarModifyResponse();

  UserAvatarModifyResponse(const UserAvatarModifyResponse& from);
  UserAvatarModifyResponse(UserAvatarModifyResponse&& from) noexcept
    : UserAvatarModifyResponse() {
    *this = ::std::move(from);
  }

  inline UserAvatarModifyResponse& operator=(const UserAvatarModifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAvatarModifyResponse& operator=(UserAvatarModifyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserAvatarModifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAvatarModifyResponse* internal_default_instance() {
    return reinterpret_cast<const UserAvatarModifyResponse*>(
               &_UserAvatarModifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UserAvatarModifyResponse* other);
  friend void swap(UserAvatarModifyResponse& a, UserAvatarModifyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAvatarModifyResponse* New() const final {
    return CreateMaybeMessage<UserAvatarModifyResponse>(nullptr);
  }

  UserAvatarModifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserAvatarModifyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserAvatarModifyResponse& from);
  void MergeFrom(const UserAvatarModifyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAvatarModifyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.UserAvatarModifyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // string reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // bool result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:message.UserAvatarModifyResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AreaBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserBaseRequest

// string public_key = 1;
inline void UserBaseRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserBaseRequest::public_key() const {
  // @@protoc_insertion_point(field_get:message.UserBaseRequest.public_key)
  return public_key_.GetNoArena();
}
inline void UserBaseRequest::set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserBaseRequest.public_key)
}
inline void UserBaseRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserBaseRequest.public_key)
}
inline void UserBaseRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserBaseRequest.public_key)
}
inline void UserBaseRequest::set_public_key(const char* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserBaseRequest.public_key)
}
inline std::string* UserBaseRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:message.UserBaseRequest.public_key)
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserBaseRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:message.UserBaseRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:message.UserBaseRequest.public_key)
}

// -------------------------------------------------------------------

// ListProperty

// sint32 rank = 1;
inline void ListProperty::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListProperty::rank() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.rank)
  return rank_;
}
inline void ListProperty::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:message.ListProperty.rank)
}

// string patient_id = 2;
inline void ListProperty::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListProperty::patient_id() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.patient_id)
  return patient_id_.GetNoArena();
}
inline void ListProperty::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListProperty.patient_id)
}
inline void ListProperty::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListProperty.patient_id)
}
inline void ListProperty::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListProperty.patient_id)
}
inline void ListProperty::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListProperty.patient_id)
}
inline std::string* ListProperty::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.ListProperty.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListProperty::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.ListProperty.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListProperty::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.ListProperty.patient_id)
}

// string register_id = 3;
inline void ListProperty::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListProperty::register_id() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.register_id)
  return register_id_.GetNoArena();
}
inline void ListProperty::set_register_id(const std::string& value) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListProperty.register_id)
}
inline void ListProperty::set_register_id(std::string&& value) {
  
  register_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListProperty.register_id)
}
inline void ListProperty::set_register_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListProperty.register_id)
}
inline void ListProperty::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListProperty.register_id)
}
inline std::string* ListProperty::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:message.ListProperty.register_id)
  return register_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListProperty::release_register_id() {
  // @@protoc_insertion_point(field_release:message.ListProperty.register_id)
  
  return register_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListProperty::set_allocated_register_id(std::string* register_id) {
  if (register_id != nullptr) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:message.ListProperty.register_id)
}

// string doctor_id = 4;
inline void ListProperty::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListProperty::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void ListProperty::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListProperty.doctor_id)
}
inline void ListProperty::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListProperty.doctor_id)
}
inline void ListProperty::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListProperty.doctor_id)
}
inline void ListProperty::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListProperty.doctor_id)
}
inline std::string* ListProperty::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.ListProperty.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListProperty::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.ListProperty.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListProperty::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.ListProperty.doctor_id)
}

// string doctor_name = 5;
inline void ListProperty::clear_doctor_name() {
  doctor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListProperty::doctor_name() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.doctor_name)
  return doctor_name_.GetNoArena();
}
inline void ListProperty::set_doctor_name(const std::string& value) {
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListProperty.doctor_name)
}
inline void ListProperty::set_doctor_name(std::string&& value) {
  
  doctor_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListProperty.doctor_name)
}
inline void ListProperty::set_doctor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListProperty.doctor_name)
}
inline void ListProperty::set_doctor_name(const char* value, size_t size) {
  
  doctor_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListProperty.doctor_name)
}
inline std::string* ListProperty::mutable_doctor_name() {
  
  // @@protoc_insertion_point(field_mutable:message.ListProperty.doctor_name)
  return doctor_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListProperty::release_doctor_name() {
  // @@protoc_insertion_point(field_release:message.ListProperty.doctor_name)
  
  return doctor_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListProperty::set_allocated_doctor_name(std::string* doctor_name) {
  if (doctor_name != nullptr) {
    
  } else {
    
  }
  doctor_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_name);
  // @@protoc_insertion_point(field_set_allocated:message.ListProperty.doctor_name)
}

// string patient_name = 6;
inline void ListProperty::clear_patient_name() {
  patient_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListProperty::patient_name() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.patient_name)
  return patient_name_.GetNoArena();
}
inline void ListProperty::set_patient_name(const std::string& value) {
  
  patient_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListProperty.patient_name)
}
inline void ListProperty::set_patient_name(std::string&& value) {
  
  patient_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListProperty.patient_name)
}
inline void ListProperty::set_patient_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListProperty.patient_name)
}
inline void ListProperty::set_patient_name(const char* value, size_t size) {
  
  patient_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListProperty.patient_name)
}
inline std::string* ListProperty::mutable_patient_name() {
  
  // @@protoc_insertion_point(field_mutable:message.ListProperty.patient_name)
  return patient_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListProperty::release_patient_name() {
  // @@protoc_insertion_point(field_release:message.ListProperty.patient_name)
  
  return patient_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListProperty::set_allocated_patient_name(std::string* patient_name) {
  if (patient_name != nullptr) {
    
  } else {
    
  }
  patient_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_name);
  // @@protoc_insertion_point(field_set_allocated:message.ListProperty.patient_name)
}

// string code = 7;
inline void ListProperty::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListProperty::code() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.code)
  return code_.GetNoArena();
}
inline void ListProperty::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListProperty.code)
}
inline void ListProperty::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListProperty.code)
}
inline void ListProperty::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListProperty.code)
}
inline void ListProperty::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListProperty.code)
}
inline std::string* ListProperty::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:message.ListProperty.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListProperty::release_code() {
  // @@protoc_insertion_point(field_release:message.ListProperty.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListProperty::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:message.ListProperty.code)
}

// string state = 8;
inline void ListProperty::clear_state() {
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListProperty::state() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.state)
  return state_.GetNoArena();
}
inline void ListProperty::set_state(const std::string& value) {
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListProperty.state)
}
inline void ListProperty::set_state(std::string&& value) {
  
  state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListProperty.state)
}
inline void ListProperty::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListProperty.state)
}
inline void ListProperty::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListProperty.state)
}
inline std::string* ListProperty::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:message.ListProperty.state)
  return state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListProperty::release_state() {
  // @@protoc_insertion_point(field_release:message.ListProperty.state)
  
  return state_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListProperty::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:message.ListProperty.state)
}

// sint32 wait_num = 9;
inline void ListProperty::clear_wait_num() {
  wait_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListProperty::wait_num() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.wait_num)
  return wait_num_;
}
inline void ListProperty::set_wait_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wait_num_ = value;
  // @@protoc_insertion_point(field_set:message.ListProperty.wait_num)
}

// string sex = 10;
inline void ListProperty::clear_sex() {
  sex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListProperty::sex() const {
  // @@protoc_insertion_point(field_get:message.ListProperty.sex)
  return sex_.GetNoArena();
}
inline void ListProperty::set_sex(const std::string& value) {
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListProperty.sex)
}
inline void ListProperty::set_sex(std::string&& value) {
  
  sex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListProperty.sex)
}
inline void ListProperty::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListProperty.sex)
}
inline void ListProperty::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListProperty.sex)
}
inline std::string* ListProperty::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:message.ListProperty.sex)
  return sex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListProperty::release_sex() {
  // @@protoc_insertion_point(field_release:message.ListProperty.sex)
  
  return sex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListProperty::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:message.ListProperty.sex)
}

// -------------------------------------------------------------------

// DiagnosisListPush

// repeated .message.ListProperty wait_force = 1;
inline int DiagnosisListPush::wait_force_size() const {
  return wait_force_.size();
}
inline void DiagnosisListPush::clear_wait_force() {
  wait_force_.Clear();
}
inline ::message::ListProperty* DiagnosisListPush::mutable_wait_force(int index) {
  // @@protoc_insertion_point(field_mutable:message.DiagnosisListPush.wait_force)
  return wait_force_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
DiagnosisListPush::mutable_wait_force() {
  // @@protoc_insertion_point(field_mutable_list:message.DiagnosisListPush.wait_force)
  return &wait_force_;
}
inline const ::message::ListProperty& DiagnosisListPush::wait_force(int index) const {
  // @@protoc_insertion_point(field_get:message.DiagnosisListPush.wait_force)
  return wait_force_.Get(index);
}
inline ::message::ListProperty* DiagnosisListPush::add_wait_force() {
  // @@protoc_insertion_point(field_add:message.DiagnosisListPush.wait_force)
  return wait_force_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
DiagnosisListPush::wait_force() const {
  // @@protoc_insertion_point(field_list:message.DiagnosisListPush.wait_force)
  return wait_force_;
}

// repeated .message.ListProperty wait = 2;
inline int DiagnosisListPush::wait_size() const {
  return wait_.size();
}
inline void DiagnosisListPush::clear_wait() {
  wait_.Clear();
}
inline ::message::ListProperty* DiagnosisListPush::mutable_wait(int index) {
  // @@protoc_insertion_point(field_mutable:message.DiagnosisListPush.wait)
  return wait_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
DiagnosisListPush::mutable_wait() {
  // @@protoc_insertion_point(field_mutable_list:message.DiagnosisListPush.wait)
  return &wait_;
}
inline const ::message::ListProperty& DiagnosisListPush::wait(int index) const {
  // @@protoc_insertion_point(field_get:message.DiagnosisListPush.wait)
  return wait_.Get(index);
}
inline ::message::ListProperty* DiagnosisListPush::add_wait() {
  // @@protoc_insertion_point(field_add:message.DiagnosisListPush.wait)
  return wait_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
DiagnosisListPush::wait() const {
  // @@protoc_insertion_point(field_list:message.DiagnosisListPush.wait)
  return wait_;
}

// repeated .message.ListProperty pass_ = 3;
inline int DiagnosisListPush::pass__size() const {
  return pass__.size();
}
inline void DiagnosisListPush::clear_pass_() {
  pass__.Clear();
}
inline ::message::ListProperty* DiagnosisListPush::mutable_pass_(int index) {
  // @@protoc_insertion_point(field_mutable:message.DiagnosisListPush.pass_)
  return pass__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
DiagnosisListPush::mutable_pass_() {
  // @@protoc_insertion_point(field_mutable_list:message.DiagnosisListPush.pass_)
  return &pass__;
}
inline const ::message::ListProperty& DiagnosisListPush::pass_(int index) const {
  // @@protoc_insertion_point(field_get:message.DiagnosisListPush.pass_)
  return pass__.Get(index);
}
inline ::message::ListProperty* DiagnosisListPush::add_pass_() {
  // @@protoc_insertion_point(field_add:message.DiagnosisListPush.pass_)
  return pass__.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
DiagnosisListPush::pass_() const {
  // @@protoc_insertion_point(field_list:message.DiagnosisListPush.pass_)
  return pass__;
}

// repeated .message.ListProperty pause = 4;
inline int DiagnosisListPush::pause_size() const {
  return pause_.size();
}
inline void DiagnosisListPush::clear_pause() {
  pause_.Clear();
}
inline ::message::ListProperty* DiagnosisListPush::mutable_pause(int index) {
  // @@protoc_insertion_point(field_mutable:message.DiagnosisListPush.pause)
  return pause_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
DiagnosisListPush::mutable_pause() {
  // @@protoc_insertion_point(field_mutable_list:message.DiagnosisListPush.pause)
  return &pause_;
}
inline const ::message::ListProperty& DiagnosisListPush::pause(int index) const {
  // @@protoc_insertion_point(field_get:message.DiagnosisListPush.pause)
  return pause_.Get(index);
}
inline ::message::ListProperty* DiagnosisListPush::add_pause() {
  // @@protoc_insertion_point(field_add:message.DiagnosisListPush.pause)
  return pause_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
DiagnosisListPush::pause() const {
  // @@protoc_insertion_point(field_list:message.DiagnosisListPush.pause)
  return pause_;
}

// repeated .message.ListProperty complete = 5;
inline int DiagnosisListPush::complete_size() const {
  return complete_.size();
}
inline void DiagnosisListPush::clear_complete() {
  complete_.Clear();
}
inline ::message::ListProperty* DiagnosisListPush::mutable_complete(int index) {
  // @@protoc_insertion_point(field_mutable:message.DiagnosisListPush.complete)
  return complete_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >*
DiagnosisListPush::mutable_complete() {
  // @@protoc_insertion_point(field_mutable_list:message.DiagnosisListPush.complete)
  return &complete_;
}
inline const ::message::ListProperty& DiagnosisListPush::complete(int index) const {
  // @@protoc_insertion_point(field_get:message.DiagnosisListPush.complete)
  return complete_.Get(index);
}
inline ::message::ListProperty* DiagnosisListPush::add_complete() {
  // @@protoc_insertion_point(field_add:message.DiagnosisListPush.complete)
  return complete_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListProperty >&
DiagnosisListPush::complete() const {
  // @@protoc_insertion_point(field_list:message.DiagnosisListPush.complete)
  return complete_;
}

// -------------------------------------------------------------------

// DoctorRoomIDPush

// string room_id = 1;
inline void DoctorRoomIDPush::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorRoomIDPush::room_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorRoomIDPush.room_id)
  return room_id_.GetNoArena();
}
inline void DoctorRoomIDPush::set_room_id(const std::string& value) {
  
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorRoomIDPush.room_id)
}
inline void DoctorRoomIDPush::set_room_id(std::string&& value) {
  
  room_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorRoomIDPush.room_id)
}
inline void DoctorRoomIDPush::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorRoomIDPush.room_id)
}
inline void DoctorRoomIDPush::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorRoomIDPush.room_id)
}
inline std::string* DoctorRoomIDPush::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorRoomIDPush.room_id)
  return room_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorRoomIDPush::release_room_id() {
  // @@protoc_insertion_point(field_release:message.DoctorRoomIDPush.room_id)
  
  return room_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorRoomIDPush::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorRoomIDPush.room_id)
}

// string doctor_id = 2;
inline void DoctorRoomIDPush::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoctorRoomIDPush::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.DoctorRoomIDPush.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void DoctorRoomIDPush::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.DoctorRoomIDPush.doctor_id)
}
inline void DoctorRoomIDPush::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.DoctorRoomIDPush.doctor_id)
}
inline void DoctorRoomIDPush::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.DoctorRoomIDPush.doctor_id)
}
inline void DoctorRoomIDPush::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.DoctorRoomIDPush.doctor_id)
}
inline std::string* DoctorRoomIDPush::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.DoctorRoomIDPush.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoctorRoomIDPush::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.DoctorRoomIDPush.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoctorRoomIDPush::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.DoctorRoomIDPush.doctor_id)
}

// -------------------------------------------------------------------

// UserPasswordModifyRequest

// string user_id = 1;
inline void UserPasswordModifyRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserPasswordModifyRequest::user_id() const {
  // @@protoc_insertion_point(field_get:message.UserPasswordModifyRequest.user_id)
  return user_id_.GetNoArena();
}
inline void UserPasswordModifyRequest::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserPasswordModifyRequest.user_id)
}
inline void UserPasswordModifyRequest::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserPasswordModifyRequest.user_id)
}
inline void UserPasswordModifyRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserPasswordModifyRequest.user_id)
}
inline void UserPasswordModifyRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserPasswordModifyRequest.user_id)
}
inline std::string* UserPasswordModifyRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:message.UserPasswordModifyRequest.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserPasswordModifyRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:message.UserPasswordModifyRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserPasswordModifyRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:message.UserPasswordModifyRequest.user_id)
}

// string user_type = 2;
inline void UserPasswordModifyRequest::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserPasswordModifyRequest::user_type() const {
  // @@protoc_insertion_point(field_get:message.UserPasswordModifyRequest.user_type)
  return user_type_.GetNoArena();
}
inline void UserPasswordModifyRequest::set_user_type(const std::string& value) {
  
  user_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserPasswordModifyRequest.user_type)
}
inline void UserPasswordModifyRequest::set_user_type(std::string&& value) {
  
  user_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserPasswordModifyRequest.user_type)
}
inline void UserPasswordModifyRequest::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserPasswordModifyRequest.user_type)
}
inline void UserPasswordModifyRequest::set_user_type(const char* value, size_t size) {
  
  user_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserPasswordModifyRequest.user_type)
}
inline std::string* UserPasswordModifyRequest::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:message.UserPasswordModifyRequest.user_type)
  return user_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserPasswordModifyRequest::release_user_type() {
  // @@protoc_insertion_point(field_release:message.UserPasswordModifyRequest.user_type)
  
  return user_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserPasswordModifyRequest::set_allocated_user_type(std::string* user_type) {
  if (user_type != nullptr) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:message.UserPasswordModifyRequest.user_type)
}

// string pwd_old = 3;
inline void UserPasswordModifyRequest::clear_pwd_old() {
  pwd_old_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserPasswordModifyRequest::pwd_old() const {
  // @@protoc_insertion_point(field_get:message.UserPasswordModifyRequest.pwd_old)
  return pwd_old_.GetNoArena();
}
inline void UserPasswordModifyRequest::set_pwd_old(const std::string& value) {
  
  pwd_old_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserPasswordModifyRequest.pwd_old)
}
inline void UserPasswordModifyRequest::set_pwd_old(std::string&& value) {
  
  pwd_old_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserPasswordModifyRequest.pwd_old)
}
inline void UserPasswordModifyRequest::set_pwd_old(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_old_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserPasswordModifyRequest.pwd_old)
}
inline void UserPasswordModifyRequest::set_pwd_old(const char* value, size_t size) {
  
  pwd_old_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserPasswordModifyRequest.pwd_old)
}
inline std::string* UserPasswordModifyRequest::mutable_pwd_old() {
  
  // @@protoc_insertion_point(field_mutable:message.UserPasswordModifyRequest.pwd_old)
  return pwd_old_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserPasswordModifyRequest::release_pwd_old() {
  // @@protoc_insertion_point(field_release:message.UserPasswordModifyRequest.pwd_old)
  
  return pwd_old_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserPasswordModifyRequest::set_allocated_pwd_old(std::string* pwd_old) {
  if (pwd_old != nullptr) {
    
  } else {
    
  }
  pwd_old_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd_old);
  // @@protoc_insertion_point(field_set_allocated:message.UserPasswordModifyRequest.pwd_old)
}

// string pwd_new = 4;
inline void UserPasswordModifyRequest::clear_pwd_new() {
  pwd_new_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserPasswordModifyRequest::pwd_new() const {
  // @@protoc_insertion_point(field_get:message.UserPasswordModifyRequest.pwd_new)
  return pwd_new_.GetNoArena();
}
inline void UserPasswordModifyRequest::set_pwd_new(const std::string& value) {
  
  pwd_new_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserPasswordModifyRequest.pwd_new)
}
inline void UserPasswordModifyRequest::set_pwd_new(std::string&& value) {
  
  pwd_new_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserPasswordModifyRequest.pwd_new)
}
inline void UserPasswordModifyRequest::set_pwd_new(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_new_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserPasswordModifyRequest.pwd_new)
}
inline void UserPasswordModifyRequest::set_pwd_new(const char* value, size_t size) {
  
  pwd_new_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserPasswordModifyRequest.pwd_new)
}
inline std::string* UserPasswordModifyRequest::mutable_pwd_new() {
  
  // @@protoc_insertion_point(field_mutable:message.UserPasswordModifyRequest.pwd_new)
  return pwd_new_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserPasswordModifyRequest::release_pwd_new() {
  // @@protoc_insertion_point(field_release:message.UserPasswordModifyRequest.pwd_new)
  
  return pwd_new_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserPasswordModifyRequest::set_allocated_pwd_new(std::string* pwd_new) {
  if (pwd_new != nullptr) {
    
  } else {
    
  }
  pwd_new_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd_new);
  // @@protoc_insertion_point(field_set_allocated:message.UserPasswordModifyRequest.pwd_new)
}

// -------------------------------------------------------------------

// UserPasswordModifyResponse

// string user_id = 1;
inline void UserPasswordModifyResponse::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserPasswordModifyResponse::user_id() const {
  // @@protoc_insertion_point(field_get:message.UserPasswordModifyResponse.user_id)
  return user_id_.GetNoArena();
}
inline void UserPasswordModifyResponse::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserPasswordModifyResponse.user_id)
}
inline void UserPasswordModifyResponse::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserPasswordModifyResponse.user_id)
}
inline void UserPasswordModifyResponse::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserPasswordModifyResponse.user_id)
}
inline void UserPasswordModifyResponse::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserPasswordModifyResponse.user_id)
}
inline std::string* UserPasswordModifyResponse::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:message.UserPasswordModifyResponse.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserPasswordModifyResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:message.UserPasswordModifyResponse.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserPasswordModifyResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:message.UserPasswordModifyResponse.user_id)
}

// bool result = 2;
inline void UserPasswordModifyResponse::clear_result() {
  result_ = false;
}
inline bool UserPasswordModifyResponse::result() const {
  // @@protoc_insertion_point(field_get:message.UserPasswordModifyResponse.result)
  return result_;
}
inline void UserPasswordModifyResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:message.UserPasswordModifyResponse.result)
}

// string reason = 3;
inline void UserPasswordModifyResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserPasswordModifyResponse::reason() const {
  // @@protoc_insertion_point(field_get:message.UserPasswordModifyResponse.reason)
  return reason_.GetNoArena();
}
inline void UserPasswordModifyResponse::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserPasswordModifyResponse.reason)
}
inline void UserPasswordModifyResponse::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserPasswordModifyResponse.reason)
}
inline void UserPasswordModifyResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserPasswordModifyResponse.reason)
}
inline void UserPasswordModifyResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserPasswordModifyResponse.reason)
}
inline std::string* UserPasswordModifyResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:message.UserPasswordModifyResponse.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserPasswordModifyResponse::release_reason() {
  // @@protoc_insertion_point(field_release:message.UserPasswordModifyResponse.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserPasswordModifyResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:message.UserPasswordModifyResponse.reason)
}

// -------------------------------------------------------------------

// UserAvatarModifyRequest

// string user_id = 1;
inline void UserAvatarModifyRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserAvatarModifyRequest::user_id() const {
  // @@protoc_insertion_point(field_get:message.UserAvatarModifyRequest.user_id)
  return user_id_.GetNoArena();
}
inline void UserAvatarModifyRequest::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserAvatarModifyRequest.user_id)
}
inline void UserAvatarModifyRequest::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserAvatarModifyRequest.user_id)
}
inline void UserAvatarModifyRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserAvatarModifyRequest.user_id)
}
inline void UserAvatarModifyRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserAvatarModifyRequest.user_id)
}
inline std::string* UserAvatarModifyRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:message.UserAvatarModifyRequest.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAvatarModifyRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:message.UserAvatarModifyRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAvatarModifyRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:message.UserAvatarModifyRequest.user_id)
}

// string user_type = 2;
inline void UserAvatarModifyRequest::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserAvatarModifyRequest::user_type() const {
  // @@protoc_insertion_point(field_get:message.UserAvatarModifyRequest.user_type)
  return user_type_.GetNoArena();
}
inline void UserAvatarModifyRequest::set_user_type(const std::string& value) {
  
  user_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserAvatarModifyRequest.user_type)
}
inline void UserAvatarModifyRequest::set_user_type(std::string&& value) {
  
  user_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserAvatarModifyRequest.user_type)
}
inline void UserAvatarModifyRequest::set_user_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserAvatarModifyRequest.user_type)
}
inline void UserAvatarModifyRequest::set_user_type(const char* value, size_t size) {
  
  user_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserAvatarModifyRequest.user_type)
}
inline std::string* UserAvatarModifyRequest::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:message.UserAvatarModifyRequest.user_type)
  return user_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAvatarModifyRequest::release_user_type() {
  // @@protoc_insertion_point(field_release:message.UserAvatarModifyRequest.user_type)
  
  return user_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAvatarModifyRequest::set_allocated_user_type(std::string* user_type) {
  if (user_type != nullptr) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:message.UserAvatarModifyRequest.user_type)
}

// bytes avatar = 3;
inline void UserAvatarModifyRequest::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserAvatarModifyRequest::avatar() const {
  // @@protoc_insertion_point(field_get:message.UserAvatarModifyRequest.avatar)
  return avatar_.GetNoArena();
}
inline void UserAvatarModifyRequest::set_avatar(const std::string& value) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserAvatarModifyRequest.avatar)
}
inline void UserAvatarModifyRequest::set_avatar(std::string&& value) {
  
  avatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserAvatarModifyRequest.avatar)
}
inline void UserAvatarModifyRequest::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserAvatarModifyRequest.avatar)
}
inline void UserAvatarModifyRequest::set_avatar(const void* value, size_t size) {
  
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserAvatarModifyRequest.avatar)
}
inline std::string* UserAvatarModifyRequest::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:message.UserAvatarModifyRequest.avatar)
  return avatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAvatarModifyRequest::release_avatar() {
  // @@protoc_insertion_point(field_release:message.UserAvatarModifyRequest.avatar)
  
  return avatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAvatarModifyRequest::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:message.UserAvatarModifyRequest.avatar)
}

// -------------------------------------------------------------------

// UserAvatarModifyResponse

// string user_id = 1;
inline void UserAvatarModifyResponse::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserAvatarModifyResponse::user_id() const {
  // @@protoc_insertion_point(field_get:message.UserAvatarModifyResponse.user_id)
  return user_id_.GetNoArena();
}
inline void UserAvatarModifyResponse::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserAvatarModifyResponse.user_id)
}
inline void UserAvatarModifyResponse::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserAvatarModifyResponse.user_id)
}
inline void UserAvatarModifyResponse::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserAvatarModifyResponse.user_id)
}
inline void UserAvatarModifyResponse::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserAvatarModifyResponse.user_id)
}
inline std::string* UserAvatarModifyResponse::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:message.UserAvatarModifyResponse.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAvatarModifyResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:message.UserAvatarModifyResponse.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAvatarModifyResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:message.UserAvatarModifyResponse.user_id)
}

// bool result = 2;
inline void UserAvatarModifyResponse::clear_result() {
  result_ = false;
}
inline bool UserAvatarModifyResponse::result() const {
  // @@protoc_insertion_point(field_get:message.UserAvatarModifyResponse.result)
  return result_;
}
inline void UserAvatarModifyResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:message.UserAvatarModifyResponse.result)
}

// string reason = 3;
inline void UserAvatarModifyResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserAvatarModifyResponse::reason() const {
  // @@protoc_insertion_point(field_get:message.UserAvatarModifyResponse.reason)
  return reason_.GetNoArena();
}
inline void UserAvatarModifyResponse::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.UserAvatarModifyResponse.reason)
}
inline void UserAvatarModifyResponse::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.UserAvatarModifyResponse.reason)
}
inline void UserAvatarModifyResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.UserAvatarModifyResponse.reason)
}
inline void UserAvatarModifyResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.UserAvatarModifyResponse.reason)
}
inline std::string* UserAvatarModifyResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:message.UserAvatarModifyResponse.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserAvatarModifyResponse::release_reason() {
  // @@protoc_insertion_point(field_release:message.UserAvatarModifyResponse.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserAvatarModifyResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:message.UserAvatarModifyResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AreaBase_2eproto
