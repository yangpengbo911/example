// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MedicalHistory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MedicalHistory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MedicalHistory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MedicalHistory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MedicalHistory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_MedicalHistory_2eproto();
namespace message {
class IllHistoryAddRequest;
class IllHistoryAddRequestDefaultTypeInternal;
extern IllHistoryAddRequestDefaultTypeInternal _IllHistoryAddRequest_default_instance_;
class IllHistoryAddResponse;
class IllHistoryAddResponseDefaultTypeInternal;
extern IllHistoryAddResponseDefaultTypeInternal _IllHistoryAddResponse_default_instance_;
class IllHistoryRequest;
class IllHistoryRequestDefaultTypeInternal;
extern IllHistoryRequestDefaultTypeInternal _IllHistoryRequest_default_instance_;
class IllHistoryResponse;
class IllHistoryResponseDefaultTypeInternal;
extern IllHistoryResponseDefaultTypeInternal _IllHistoryResponse_default_instance_;
class ListContent;
class ListContentDefaultTypeInternal;
extern ListContentDefaultTypeInternal _ListContent_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::IllHistoryAddRequest* Arena::CreateMaybeMessage<::message::IllHistoryAddRequest>(Arena*);
template<> ::message::IllHistoryAddResponse* Arena::CreateMaybeMessage<::message::IllHistoryAddResponse>(Arena*);
template<> ::message::IllHistoryRequest* Arena::CreateMaybeMessage<::message::IllHistoryRequest>(Arena*);
template<> ::message::IllHistoryResponse* Arena::CreateMaybeMessage<::message::IllHistoryResponse>(Arena*);
template<> ::message::ListContent* Arena::CreateMaybeMessage<::message::ListContent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class IllHistoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.IllHistoryRequest) */ {
 public:
  IllHistoryRequest();
  virtual ~IllHistoryRequest();

  IllHistoryRequest(const IllHistoryRequest& from);
  IllHistoryRequest(IllHistoryRequest&& from) noexcept
    : IllHistoryRequest() {
    *this = ::std::move(from);
  }

  inline IllHistoryRequest& operator=(const IllHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IllHistoryRequest& operator=(IllHistoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IllHistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IllHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const IllHistoryRequest*>(
               &_IllHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IllHistoryRequest* other);
  friend void swap(IllHistoryRequest& a, IllHistoryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IllHistoryRequest* New() const final {
    return CreateMaybeMessage<IllHistoryRequest>(nullptr);
  }

  IllHistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IllHistoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IllHistoryRequest& from);
  void MergeFrom(const IllHistoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IllHistoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.IllHistoryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string patient_id = 1;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 1;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // @@protoc_insertion_point(class_scope:message.IllHistoryRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MedicalHistory_2eproto;
};
// -------------------------------------------------------------------

class IllHistoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.IllHistoryResponse) */ {
 public:
  IllHistoryResponse();
  virtual ~IllHistoryResponse();

  IllHistoryResponse(const IllHistoryResponse& from);
  IllHistoryResponse(IllHistoryResponse&& from) noexcept
    : IllHistoryResponse() {
    *this = ::std::move(from);
  }

  inline IllHistoryResponse& operator=(const IllHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IllHistoryResponse& operator=(IllHistoryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IllHistoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IllHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const IllHistoryResponse*>(
               &_IllHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IllHistoryResponse* other);
  friend void swap(IllHistoryResponse& a, IllHistoryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IllHistoryResponse* New() const final {
    return CreateMaybeMessage<IllHistoryResponse>(nullptr);
  }

  IllHistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IllHistoryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IllHistoryResponse& from);
  void MergeFrom(const IllHistoryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IllHistoryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.IllHistoryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .message.ListContent drug = 1;
  int drug_size() const;
  void clear_drug();
  static const int kDrugFieldNumber = 1;
  ::message::ListContent* mutable_drug(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >*
      mutable_drug();
  const ::message::ListContent& drug(int index) const;
  ::message::ListContent* add_drug();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >&
      drug() const;

  // repeated .message.ListContent past = 2;
  int past_size() const;
  void clear_past();
  static const int kPastFieldNumber = 2;
  ::message::ListContent* mutable_past(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >*
      mutable_past();
  const ::message::ListContent& past(int index) const;
  ::message::ListContent* add_past();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >&
      past() const;

  // repeated .message.ListContent family = 3;
  int family_size() const;
  void clear_family();
  static const int kFamilyFieldNumber = 3;
  ::message::ListContent* mutable_family(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >*
      mutable_family();
  const ::message::ListContent& family(int index) const;
  ::message::ListContent* add_family();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >&
      family() const;

  // repeated .message.ListContent genetic = 4;
  int genetic_size() const;
  void clear_genetic();
  static const int kGeneticFieldNumber = 4;
  ::message::ListContent* mutable_genetic(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >*
      mutable_genetic();
  const ::message::ListContent& genetic(int index) const;
  ::message::ListContent* add_genetic();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >&
      genetic() const;

  // @@protoc_insertion_point(class_scope:message.IllHistoryResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent > drug_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent > past_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent > family_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent > genetic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MedicalHistory_2eproto;
};
// -------------------------------------------------------------------

class ListContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ListContent) */ {
 public:
  ListContent();
  virtual ~ListContent();

  ListContent(const ListContent& from);
  ListContent(ListContent&& from) noexcept
    : ListContent() {
    *this = ::std::move(from);
  }

  inline ListContent& operator=(const ListContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListContent& operator=(ListContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListContent* internal_default_instance() {
    return reinterpret_cast<const ListContent*>(
               &_ListContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ListContent* other);
  friend void swap(ListContent& a, ListContent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListContent* New() const final {
    return CreateMaybeMessage<ListContent>(nullptr);
  }

  ListContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListContent& from);
  void MergeFrom(const ListContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ListContent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // string patient_id = 2;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 2;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // string doctor_id = 3;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 3;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string datetime = 4;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 4;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.ListContent)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MedicalHistory_2eproto;
};
// -------------------------------------------------------------------

class IllHistoryAddRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.IllHistoryAddRequest) */ {
 public:
  IllHistoryAddRequest();
  virtual ~IllHistoryAddRequest();

  IllHistoryAddRequest(const IllHistoryAddRequest& from);
  IllHistoryAddRequest(IllHistoryAddRequest&& from) noexcept
    : IllHistoryAddRequest() {
    *this = ::std::move(from);
  }

  inline IllHistoryAddRequest& operator=(const IllHistoryAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IllHistoryAddRequest& operator=(IllHistoryAddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IllHistoryAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IllHistoryAddRequest* internal_default_instance() {
    return reinterpret_cast<const IllHistoryAddRequest*>(
               &_IllHistoryAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IllHistoryAddRequest* other);
  friend void swap(IllHistoryAddRequest& a, IllHistoryAddRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IllHistoryAddRequest* New() const final {
    return CreateMaybeMessage<IllHistoryAddRequest>(nullptr);
  }

  IllHistoryAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IllHistoryAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IllHistoryAddRequest& from);
  void MergeFrom(const IllHistoryAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IllHistoryAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.IllHistoryAddRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string patient_id = 1;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 1;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // string doctor_id = 2;
  void clear_doctor_id();
  static const int kDoctorIdFieldNumber = 2;
  const std::string& doctor_id() const;
  void set_doctor_id(const std::string& value);
  void set_doctor_id(std::string&& value);
  void set_doctor_id(const char* value);
  void set_doctor_id(const char* value, size_t size);
  std::string* mutable_doctor_id();
  std::string* release_doctor_id();
  void set_allocated_doctor_id(std::string* doctor_id);

  // string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // sint32 ill_type = 4;
  void clear_ill_type();
  static const int kIllTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 ill_type() const;
  void set_ill_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:message.IllHistoryAddRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doctor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::int32 ill_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MedicalHistory_2eproto;
};
// -------------------------------------------------------------------

class IllHistoryAddResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.IllHistoryAddResponse) */ {
 public:
  IllHistoryAddResponse();
  virtual ~IllHistoryAddResponse();

  IllHistoryAddResponse(const IllHistoryAddResponse& from);
  IllHistoryAddResponse(IllHistoryAddResponse&& from) noexcept
    : IllHistoryAddResponse() {
    *this = ::std::move(from);
  }

  inline IllHistoryAddResponse& operator=(const IllHistoryAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IllHistoryAddResponse& operator=(IllHistoryAddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IllHistoryAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IllHistoryAddResponse* internal_default_instance() {
    return reinterpret_cast<const IllHistoryAddResponse*>(
               &_IllHistoryAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IllHistoryAddResponse* other);
  friend void swap(IllHistoryAddResponse& a, IllHistoryAddResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IllHistoryAddResponse* New() const final {
    return CreateMaybeMessage<IllHistoryAddResponse>(nullptr);
  }

  IllHistoryAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IllHistoryAddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IllHistoryAddResponse& from);
  void MergeFrom(const IllHistoryAddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IllHistoryAddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.IllHistoryAddResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string patient_id = 1;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 1;
  const std::string& patient_id() const;
  void set_patient_id(const std::string& value);
  void set_patient_id(std::string&& value);
  void set_patient_id(const char* value);
  void set_patient_id(const char* value, size_t size);
  std::string* mutable_patient_id();
  std::string* release_patient_id();
  void set_allocated_patient_id(std::string* patient_id);

  // string datetime = 2;
  void clear_datetime();
  static const int kDatetimeFieldNumber = 2;
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);

  // @@protoc_insertion_point(class_scope:message.IllHistoryAddResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patient_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MedicalHistory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IllHistoryRequest

// string patient_id = 1;
inline void IllHistoryRequest::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IllHistoryRequest::patient_id() const {
  // @@protoc_insertion_point(field_get:message.IllHistoryRequest.patient_id)
  return patient_id_.GetNoArena();
}
inline void IllHistoryRequest::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.IllHistoryRequest.patient_id)
}
inline void IllHistoryRequest::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.IllHistoryRequest.patient_id)
}
inline void IllHistoryRequest::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.IllHistoryRequest.patient_id)
}
inline void IllHistoryRequest::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.IllHistoryRequest.patient_id)
}
inline std::string* IllHistoryRequest::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.IllHistoryRequest.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IllHistoryRequest::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.IllHistoryRequest.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IllHistoryRequest::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.IllHistoryRequest.patient_id)
}

// -------------------------------------------------------------------

// IllHistoryResponse

// repeated .message.ListContent drug = 1;
inline int IllHistoryResponse::drug_size() const {
  return drug_.size();
}
inline void IllHistoryResponse::clear_drug() {
  drug_.Clear();
}
inline ::message::ListContent* IllHistoryResponse::mutable_drug(int index) {
  // @@protoc_insertion_point(field_mutable:message.IllHistoryResponse.drug)
  return drug_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >*
IllHistoryResponse::mutable_drug() {
  // @@protoc_insertion_point(field_mutable_list:message.IllHistoryResponse.drug)
  return &drug_;
}
inline const ::message::ListContent& IllHistoryResponse::drug(int index) const {
  // @@protoc_insertion_point(field_get:message.IllHistoryResponse.drug)
  return drug_.Get(index);
}
inline ::message::ListContent* IllHistoryResponse::add_drug() {
  // @@protoc_insertion_point(field_add:message.IllHistoryResponse.drug)
  return drug_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >&
IllHistoryResponse::drug() const {
  // @@protoc_insertion_point(field_list:message.IllHistoryResponse.drug)
  return drug_;
}

// repeated .message.ListContent past = 2;
inline int IllHistoryResponse::past_size() const {
  return past_.size();
}
inline void IllHistoryResponse::clear_past() {
  past_.Clear();
}
inline ::message::ListContent* IllHistoryResponse::mutable_past(int index) {
  // @@protoc_insertion_point(field_mutable:message.IllHistoryResponse.past)
  return past_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >*
IllHistoryResponse::mutable_past() {
  // @@protoc_insertion_point(field_mutable_list:message.IllHistoryResponse.past)
  return &past_;
}
inline const ::message::ListContent& IllHistoryResponse::past(int index) const {
  // @@protoc_insertion_point(field_get:message.IllHistoryResponse.past)
  return past_.Get(index);
}
inline ::message::ListContent* IllHistoryResponse::add_past() {
  // @@protoc_insertion_point(field_add:message.IllHistoryResponse.past)
  return past_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >&
IllHistoryResponse::past() const {
  // @@protoc_insertion_point(field_list:message.IllHistoryResponse.past)
  return past_;
}

// repeated .message.ListContent family = 3;
inline int IllHistoryResponse::family_size() const {
  return family_.size();
}
inline void IllHistoryResponse::clear_family() {
  family_.Clear();
}
inline ::message::ListContent* IllHistoryResponse::mutable_family(int index) {
  // @@protoc_insertion_point(field_mutable:message.IllHistoryResponse.family)
  return family_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >*
IllHistoryResponse::mutable_family() {
  // @@protoc_insertion_point(field_mutable_list:message.IllHistoryResponse.family)
  return &family_;
}
inline const ::message::ListContent& IllHistoryResponse::family(int index) const {
  // @@protoc_insertion_point(field_get:message.IllHistoryResponse.family)
  return family_.Get(index);
}
inline ::message::ListContent* IllHistoryResponse::add_family() {
  // @@protoc_insertion_point(field_add:message.IllHistoryResponse.family)
  return family_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >&
IllHistoryResponse::family() const {
  // @@protoc_insertion_point(field_list:message.IllHistoryResponse.family)
  return family_;
}

// repeated .message.ListContent genetic = 4;
inline int IllHistoryResponse::genetic_size() const {
  return genetic_.size();
}
inline void IllHistoryResponse::clear_genetic() {
  genetic_.Clear();
}
inline ::message::ListContent* IllHistoryResponse::mutable_genetic(int index) {
  // @@protoc_insertion_point(field_mutable:message.IllHistoryResponse.genetic)
  return genetic_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >*
IllHistoryResponse::mutable_genetic() {
  // @@protoc_insertion_point(field_mutable_list:message.IllHistoryResponse.genetic)
  return &genetic_;
}
inline const ::message::ListContent& IllHistoryResponse::genetic(int index) const {
  // @@protoc_insertion_point(field_get:message.IllHistoryResponse.genetic)
  return genetic_.Get(index);
}
inline ::message::ListContent* IllHistoryResponse::add_genetic() {
  // @@protoc_insertion_point(field_add:message.IllHistoryResponse.genetic)
  return genetic_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::ListContent >&
IllHistoryResponse::genetic() const {
  // @@protoc_insertion_point(field_list:message.IllHistoryResponse.genetic)
  return genetic_;
}

// -------------------------------------------------------------------

// ListContent

// string content = 1;
inline void ListContent::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListContent::content() const {
  // @@protoc_insertion_point(field_get:message.ListContent.content)
  return content_.GetNoArena();
}
inline void ListContent::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListContent.content)
}
inline void ListContent::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListContent.content)
}
inline void ListContent::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListContent.content)
}
inline void ListContent::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListContent.content)
}
inline std::string* ListContent::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:message.ListContent.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListContent::release_content() {
  // @@protoc_insertion_point(field_release:message.ListContent.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListContent::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:message.ListContent.content)
}

// string patient_id = 2;
inline void ListContent::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListContent::patient_id() const {
  // @@protoc_insertion_point(field_get:message.ListContent.patient_id)
  return patient_id_.GetNoArena();
}
inline void ListContent::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListContent.patient_id)
}
inline void ListContent::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListContent.patient_id)
}
inline void ListContent::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListContent.patient_id)
}
inline void ListContent::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListContent.patient_id)
}
inline std::string* ListContent::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.ListContent.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListContent::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.ListContent.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListContent::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.ListContent.patient_id)
}

// string doctor_id = 3;
inline void ListContent::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListContent::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.ListContent.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void ListContent::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListContent.doctor_id)
}
inline void ListContent::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListContent.doctor_id)
}
inline void ListContent::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListContent.doctor_id)
}
inline void ListContent::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListContent.doctor_id)
}
inline std::string* ListContent::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.ListContent.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListContent::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.ListContent.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListContent::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.ListContent.doctor_id)
}

// string datetime = 4;
inline void ListContent::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListContent::datetime() const {
  // @@protoc_insertion_point(field_get:message.ListContent.datetime)
  return datetime_.GetNoArena();
}
inline void ListContent::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ListContent.datetime)
}
inline void ListContent::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ListContent.datetime)
}
inline void ListContent::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ListContent.datetime)
}
inline void ListContent::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ListContent.datetime)
}
inline std::string* ListContent::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.ListContent.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListContent::release_datetime() {
  // @@protoc_insertion_point(field_release:message.ListContent.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListContent::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.ListContent.datetime)
}

// -------------------------------------------------------------------

// IllHistoryAddRequest

// string patient_id = 1;
inline void IllHistoryAddRequest::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IllHistoryAddRequest::patient_id() const {
  // @@protoc_insertion_point(field_get:message.IllHistoryAddRequest.patient_id)
  return patient_id_.GetNoArena();
}
inline void IllHistoryAddRequest::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.IllHistoryAddRequest.patient_id)
}
inline void IllHistoryAddRequest::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.IllHistoryAddRequest.patient_id)
}
inline void IllHistoryAddRequest::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.IllHistoryAddRequest.patient_id)
}
inline void IllHistoryAddRequest::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.IllHistoryAddRequest.patient_id)
}
inline std::string* IllHistoryAddRequest::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.IllHistoryAddRequest.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IllHistoryAddRequest::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.IllHistoryAddRequest.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IllHistoryAddRequest::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.IllHistoryAddRequest.patient_id)
}

// string doctor_id = 2;
inline void IllHistoryAddRequest::clear_doctor_id() {
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IllHistoryAddRequest::doctor_id() const {
  // @@protoc_insertion_point(field_get:message.IllHistoryAddRequest.doctor_id)
  return doctor_id_.GetNoArena();
}
inline void IllHistoryAddRequest::set_doctor_id(const std::string& value) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.IllHistoryAddRequest.doctor_id)
}
inline void IllHistoryAddRequest::set_doctor_id(std::string&& value) {
  
  doctor_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.IllHistoryAddRequest.doctor_id)
}
inline void IllHistoryAddRequest::set_doctor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.IllHistoryAddRequest.doctor_id)
}
inline void IllHistoryAddRequest::set_doctor_id(const char* value, size_t size) {
  
  doctor_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.IllHistoryAddRequest.doctor_id)
}
inline std::string* IllHistoryAddRequest::mutable_doctor_id() {
  
  // @@protoc_insertion_point(field_mutable:message.IllHistoryAddRequest.doctor_id)
  return doctor_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IllHistoryAddRequest::release_doctor_id() {
  // @@protoc_insertion_point(field_release:message.IllHistoryAddRequest.doctor_id)
  
  return doctor_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IllHistoryAddRequest::set_allocated_doctor_id(std::string* doctor_id) {
  if (doctor_id != nullptr) {
    
  } else {
    
  }
  doctor_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doctor_id);
  // @@protoc_insertion_point(field_set_allocated:message.IllHistoryAddRequest.doctor_id)
}

// string content = 3;
inline void IllHistoryAddRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IllHistoryAddRequest::content() const {
  // @@protoc_insertion_point(field_get:message.IllHistoryAddRequest.content)
  return content_.GetNoArena();
}
inline void IllHistoryAddRequest::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.IllHistoryAddRequest.content)
}
inline void IllHistoryAddRequest::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.IllHistoryAddRequest.content)
}
inline void IllHistoryAddRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.IllHistoryAddRequest.content)
}
inline void IllHistoryAddRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.IllHistoryAddRequest.content)
}
inline std::string* IllHistoryAddRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:message.IllHistoryAddRequest.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IllHistoryAddRequest::release_content() {
  // @@protoc_insertion_point(field_release:message.IllHistoryAddRequest.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IllHistoryAddRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:message.IllHistoryAddRequest.content)
}

// sint32 ill_type = 4;
inline void IllHistoryAddRequest::clear_ill_type() {
  ill_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IllHistoryAddRequest::ill_type() const {
  // @@protoc_insertion_point(field_get:message.IllHistoryAddRequest.ill_type)
  return ill_type_;
}
inline void IllHistoryAddRequest::set_ill_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ill_type_ = value;
  // @@protoc_insertion_point(field_set:message.IllHistoryAddRequest.ill_type)
}

// -------------------------------------------------------------------

// IllHistoryAddResponse

// string patient_id = 1;
inline void IllHistoryAddResponse::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IllHistoryAddResponse::patient_id() const {
  // @@protoc_insertion_point(field_get:message.IllHistoryAddResponse.patient_id)
  return patient_id_.GetNoArena();
}
inline void IllHistoryAddResponse::set_patient_id(const std::string& value) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.IllHistoryAddResponse.patient_id)
}
inline void IllHistoryAddResponse::set_patient_id(std::string&& value) {
  
  patient_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.IllHistoryAddResponse.patient_id)
}
inline void IllHistoryAddResponse::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.IllHistoryAddResponse.patient_id)
}
inline void IllHistoryAddResponse::set_patient_id(const char* value, size_t size) {
  
  patient_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.IllHistoryAddResponse.patient_id)
}
inline std::string* IllHistoryAddResponse::mutable_patient_id() {
  
  // @@protoc_insertion_point(field_mutable:message.IllHistoryAddResponse.patient_id)
  return patient_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IllHistoryAddResponse::release_patient_id() {
  // @@protoc_insertion_point(field_release:message.IllHistoryAddResponse.patient_id)
  
  return patient_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IllHistoryAddResponse::set_allocated_patient_id(std::string* patient_id) {
  if (patient_id != nullptr) {
    
  } else {
    
  }
  patient_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:message.IllHistoryAddResponse.patient_id)
}

// string datetime = 2;
inline void IllHistoryAddResponse::clear_datetime() {
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IllHistoryAddResponse::datetime() const {
  // @@protoc_insertion_point(field_get:message.IllHistoryAddResponse.datetime)
  return datetime_.GetNoArena();
}
inline void IllHistoryAddResponse::set_datetime(const std::string& value) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.IllHistoryAddResponse.datetime)
}
inline void IllHistoryAddResponse::set_datetime(std::string&& value) {
  
  datetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.IllHistoryAddResponse.datetime)
}
inline void IllHistoryAddResponse::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.IllHistoryAddResponse.datetime)
}
inline void IllHistoryAddResponse::set_datetime(const char* value, size_t size) {
  
  datetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.IllHistoryAddResponse.datetime)
}
inline std::string* IllHistoryAddResponse::mutable_datetime() {
  
  // @@protoc_insertion_point(field_mutable:message.IllHistoryAddResponse.datetime)
  return datetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IllHistoryAddResponse::release_datetime() {
  // @@protoc_insertion_point(field_release:message.IllHistoryAddResponse.datetime)
  
  return datetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IllHistoryAddResponse::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime);
  // @@protoc_insertion_point(field_set_allocated:message.IllHistoryAddResponse.datetime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MedicalHistory_2eproto
