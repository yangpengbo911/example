// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TogetherCall.proto
#include "stable.h"
#include "TogetherCall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_TogetherCall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisInfoResponse_TogetherCall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TogetherCall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorInfoResponse_TogetherCall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TogetherCall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatientBaseInfo_TogetherCall_2eproto;
namespace message {
class PatientBaseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatientBaseInfo> _instance;
} _PatientBaseInfo_default_instance_;
class DiagnosisInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisInfoResponse> _instance;
} _DiagnosisInfoResponse_default_instance_;
class DoctorInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorInfoResponse> _instance;
} _DoctorInfoResponse_default_instance_;
class DoctorBeginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorBeginRequest> _instance;
} _DoctorBeginRequest_default_instance_;
class DoctorBeginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorBeginResponse> _instance;
} _DoctorBeginResponse_default_instance_;
class DiagnosisBeginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisBeginRequest> _instance;
} _DiagnosisBeginRequest_default_instance_;
class DiagnosisBeginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisBeginResponse> _instance;
} _DiagnosisBeginResponse_default_instance_;
class DioctorCallRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DioctorCallRequest> _instance;
} _DioctorCallRequest_default_instance_;
class DoctorCallResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorCallResponse> _instance;
} _DoctorCallResponse_default_instance_;
class DiagnosisAcceptCallPushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisAcceptCallPush> _instance;
} _DiagnosisAcceptCallPush_default_instance_;
class DiagnosisResponseCallRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisResponseCallRequest> _instance;
} _DiagnosisResponseCallRequest_default_instance_;
class DiagnosisResponseCallResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisResponseCallResponse> _instance;
} _DiagnosisResponseCallResponse_default_instance_;
class DoctorAcceptCallResultPushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorAcceptCallResultPush> _instance;
} _DoctorAcceptCallResultPush_default_instance_;
class DoctorSurePassRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorSurePassRequest> _instance;
} _DoctorSurePassRequest_default_instance_;
class DoctorSurePassResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorSurePassResponse> _instance;
} _DoctorSurePassResponse_default_instance_;
class DoctorSurePassPushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorSurePassPush> _instance;
} _DoctorSurePassPush_default_instance_;
class DoctorStopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorStopRequest> _instance;
} _DoctorStopRequest_default_instance_;
class DoctorCompletePushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorCompletePush> _instance;
} _DoctorCompletePush_default_instance_;
class DoctorStopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorStopResponse> _instance;
} _DoctorStopResponse_default_instance_;
class DoctorPauseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorPauseRequest> _instance;
} _DoctorPauseRequest_default_instance_;
class DoctorPauseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorPauseResponse> _instance;
} _DoctorPauseResponse_default_instance_;
class DiagnosisPausePushDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisPausePush> _instance;
} _DiagnosisPausePush_default_instance_;
class DiagnosisPauseRecoverRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisPauseRecoverRequest> _instance;
} _DiagnosisPauseRecoverRequest_default_instance_;
class DiagnosisPauseRecoverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisPauseRecoverResponse> _instance;
} _DiagnosisPauseRecoverResponse_default_instance_;
class DiagnosisPassRecoverRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisPassRecoverRequest> _instance;
} _DiagnosisPassRecoverRequest_default_instance_;
class DiagnosisPassRecoverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisPassRecoverResponse> _instance;
} _DiagnosisPassRecoverResponse_default_instance_;
class DoctorLeaveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorLeaveRequest> _instance;
} _DoctorLeaveRequest_default_instance_;
class DoctorLeaveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorLeaveResponse> _instance;
} _DoctorLeaveResponse_default_instance_;
class DoctorLeaveRecoverRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorLeaveRecoverRequest> _instance;
} _DoctorLeaveRecoverRequest_default_instance_;
class DoctorLeaveRecoverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorLeaveRecoverResponse> _instance;
} _DoctorLeaveRecoverResponse_default_instance_;
class DoctorCompleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorCompleteRequest> _instance;
} _DoctorCompleteRequest_default_instance_;
class DoctorCompleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoctorCompleteResponse> _instance;
} _DoctorCompleteResponse_default_instance_;
class DiagnosisLeaveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisLeaveRequest> _instance;
} _DiagnosisLeaveRequest_default_instance_;
class DiagnosisLeaveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisLeaveResponse> _instance;
} _DiagnosisLeaveResponse_default_instance_;
class DiagnosisLeaveRecoverRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisLeaveRecoverRequest> _instance;
} _DiagnosisLeaveRecoverRequest_default_instance_;
class DiagnosisLeaveRecoverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisLeaveRecoverResponse> _instance;
} _DiagnosisLeaveRecoverResponse_default_instance_;
class DiagnosisCompleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisCompleteRequest> _instance;
} _DiagnosisCompleteRequest_default_instance_;
class DiagnosisCompleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisCompleteResponse> _instance;
} _DiagnosisCompleteResponse_default_instance_;
class DiagnosisSpareRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisSpareRequest> _instance;
} _DiagnosisSpareRequest_default_instance_;
class DiagnosisSpareResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosisSpareResponse> _instance;
} _DiagnosisSpareResponse_default_instance_;
}  // namespace message
static void InitDefaultsPatientBaseInfo_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_PatientBaseInfo_default_instance_;
    new (ptr) ::message::PatientBaseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::PatientBaseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatientBaseInfo_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPatientBaseInfo_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisInfoResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisInfoResponse_default_instance_;
    new (ptr) ::message::DiagnosisInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisInfoResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisInfoResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorInfoResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorInfoResponse_default_instance_;
    new (ptr) ::message::DoctorInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorInfoResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorInfoResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorBeginRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorBeginRequest_default_instance_;
    new (ptr) ::message::DoctorBeginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorBeginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorBeginRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorBeginRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorBeginResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorBeginResponse_default_instance_;
    new (ptr) ::message::DoctorBeginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorBeginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorBeginResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorBeginResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisBeginRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisBeginRequest_default_instance_;
    new (ptr) ::message::DiagnosisBeginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisBeginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisBeginRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisBeginRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisBeginResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisBeginResponse_default_instance_;
    new (ptr) ::message::DiagnosisBeginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisBeginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisBeginResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisBeginResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDioctorCallRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DioctorCallRequest_default_instance_;
    new (ptr) ::message::DioctorCallRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DioctorCallRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DioctorCallRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDioctorCallRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorCallResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorCallResponse_default_instance_;
    new (ptr) ::message::DoctorCallResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorCallResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoctorCallResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDoctorCallResponse_TogetherCall_2eproto}, {
      &scc_info_PatientBaseInfo_TogetherCall_2eproto.base,
      &scc_info_DiagnosisInfoResponse_TogetherCall_2eproto.base,}};

static void InitDefaultsDiagnosisAcceptCallPush_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisAcceptCallPush_default_instance_;
    new (ptr) ::message::DiagnosisAcceptCallPush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisAcceptCallPush::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiagnosisAcceptCallPush_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDiagnosisAcceptCallPush_TogetherCall_2eproto}, {
      &scc_info_PatientBaseInfo_TogetherCall_2eproto.base,
      &scc_info_DoctorInfoResponse_TogetherCall_2eproto.base,}};

static void InitDefaultsDiagnosisResponseCallRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisResponseCallRequest_default_instance_;
    new (ptr) ::message::DiagnosisResponseCallRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisResponseCallRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisResponseCallRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisResponseCallRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisResponseCallResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisResponseCallResponse_default_instance_;
    new (ptr) ::message::DiagnosisResponseCallResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisResponseCallResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisResponseCallResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisResponseCallResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorAcceptCallResultPush_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorAcceptCallResultPush_default_instance_;
    new (ptr) ::message::DoctorAcceptCallResultPush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorAcceptCallResultPush::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorAcceptCallResultPush_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorAcceptCallResultPush_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorSurePassRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorSurePassRequest_default_instance_;
    new (ptr) ::message::DoctorSurePassRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorSurePassRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorSurePassRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorSurePassRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorSurePassResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorSurePassResponse_default_instance_;
    new (ptr) ::message::DoctorSurePassResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorSurePassResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorSurePassResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorSurePassResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorSurePassPush_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorSurePassPush_default_instance_;
    new (ptr) ::message::DoctorSurePassPush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorSurePassPush::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorSurePassPush_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorSurePassPush_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorStopRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorStopRequest_default_instance_;
    new (ptr) ::message::DoctorStopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorStopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorStopRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorStopRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorCompletePush_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorCompletePush_default_instance_;
    new (ptr) ::message::DoctorCompletePush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorCompletePush::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorCompletePush_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorCompletePush_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorStopResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorStopResponse_default_instance_;
    new (ptr) ::message::DoctorStopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorStopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorStopResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorStopResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorPauseRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorPauseRequest_default_instance_;
    new (ptr) ::message::DoctorPauseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorPauseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorPauseRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorPauseRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorPauseResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorPauseResponse_default_instance_;
    new (ptr) ::message::DoctorPauseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorPauseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorPauseResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorPauseResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisPausePush_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisPausePush_default_instance_;
    new (ptr) ::message::DiagnosisPausePush();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisPausePush::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisPausePush_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisPausePush_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisPauseRecoverRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisPauseRecoverRequest_default_instance_;
    new (ptr) ::message::DiagnosisPauseRecoverRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisPauseRecoverRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisPauseRecoverRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisPauseRecoverRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisPauseRecoverResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisPauseRecoverResponse_default_instance_;
    new (ptr) ::message::DiagnosisPauseRecoverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisPauseRecoverResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisPauseRecoverResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisPauseRecoverResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisPassRecoverRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisPassRecoverRequest_default_instance_;
    new (ptr) ::message::DiagnosisPassRecoverRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisPassRecoverRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisPassRecoverRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisPassRecoverRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisPassRecoverResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisPassRecoverResponse_default_instance_;
    new (ptr) ::message::DiagnosisPassRecoverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisPassRecoverResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisPassRecoverResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisPassRecoverResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorLeaveRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorLeaveRequest_default_instance_;
    new (ptr) ::message::DoctorLeaveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorLeaveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorLeaveRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorLeaveRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorLeaveResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorLeaveResponse_default_instance_;
    new (ptr) ::message::DoctorLeaveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorLeaveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorLeaveResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorLeaveResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorLeaveRecoverRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorLeaveRecoverRequest_default_instance_;
    new (ptr) ::message::DoctorLeaveRecoverRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorLeaveRecoverRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorLeaveRecoverRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorLeaveRecoverRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorLeaveRecoverResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorLeaveRecoverResponse_default_instance_;
    new (ptr) ::message::DoctorLeaveRecoverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorLeaveRecoverResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorLeaveRecoverResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorLeaveRecoverResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorCompleteRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorCompleteRequest_default_instance_;
    new (ptr) ::message::DoctorCompleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorCompleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorCompleteRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorCompleteRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDoctorCompleteResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DoctorCompleteResponse_default_instance_;
    new (ptr) ::message::DoctorCompleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DoctorCompleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoctorCompleteResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoctorCompleteResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisLeaveRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisLeaveRequest_default_instance_;
    new (ptr) ::message::DiagnosisLeaveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisLeaveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisLeaveRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisLeaveRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisLeaveResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisLeaveResponse_default_instance_;
    new (ptr) ::message::DiagnosisLeaveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisLeaveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisLeaveResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisLeaveResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisLeaveRecoverRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisLeaveRecoverRequest_default_instance_;
    new (ptr) ::message::DiagnosisLeaveRecoverRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisLeaveRecoverRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisLeaveRecoverRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisLeaveRecoverRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisLeaveRecoverResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisLeaveRecoverResponse_default_instance_;
    new (ptr) ::message::DiagnosisLeaveRecoverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisLeaveRecoverResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisLeaveRecoverResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisLeaveRecoverResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisCompleteRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisCompleteRequest_default_instance_;
    new (ptr) ::message::DiagnosisCompleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisCompleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisCompleteRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisCompleteRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisCompleteResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisCompleteResponse_default_instance_;
    new (ptr) ::message::DiagnosisCompleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisCompleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisCompleteResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisCompleteResponse_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisSpareRequest_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisSpareRequest_default_instance_;
    new (ptr) ::message::DiagnosisSpareRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisSpareRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisSpareRequest_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisSpareRequest_TogetherCall_2eproto}, {}};

static void InitDefaultsDiagnosisSpareResponse_TogetherCall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DiagnosisSpareResponse_default_instance_;
    new (ptr) ::message::DiagnosisSpareResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DiagnosisSpareResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosisSpareResponse_TogetherCall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDiagnosisSpareResponse_TogetherCall_2eproto}, {}};

void InitDefaults_TogetherCall_2eproto() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatientBaseInfo_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisInfoResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorInfoResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorBeginRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorBeginResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisBeginRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisBeginResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DioctorCallRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorCallResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisAcceptCallPush_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisResponseCallRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisResponseCallResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorAcceptCallResultPush_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorSurePassRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorSurePassResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorSurePassPush_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorStopRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorCompletePush_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorStopResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorPauseRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorPauseResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisPausePush_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisPauseRecoverRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisPauseRecoverResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisPassRecoverRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisPassRecoverResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorLeaveRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorLeaveResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorLeaveRecoverRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorLeaveRecoverResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorCompleteRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoctorCompleteResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisLeaveRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisLeaveResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisLeaveRecoverRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisLeaveRecoverResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisCompleteRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisCompleteResponse_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisSpareRequest_TogetherCall_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosisSpareResponse_TogetherCall_2eproto.base);
}

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TogetherCall_2eproto[40];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TogetherCall_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TogetherCall_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TogetherCall_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, patient_id_),
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, code_),
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, name_),
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, id_card_),
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, phone_),
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, birthday_),
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, address_),
  PROTOBUF_FIELD_OFFSET(::message::PatientBaseInfo, avatar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, organize_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, organize_name_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, username_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, owner_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, phone_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, address_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, detail_address_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, longitude_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, latitude_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisInfoResponse, head_image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, doctor_name_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, username_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, sex_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, hospital_uuid_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, hospital_name_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, office_uuid_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, office_name_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, duty_name_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, phone_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorInfoResponse, head_image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorBeginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorBeginRequest, begin_type_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorBeginRequest, doctor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorBeginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorBeginResponse, result_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorBeginResponse, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisBeginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisBeginRequest, diagnosis_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisBeginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisBeginResponse, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DioctorCallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DioctorCallRequest, doctor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, res_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, now_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, next_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, now_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, next_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, diagnosis_name_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, patient_info_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCallResponse, diagnosis_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, now_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, next_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, now_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, next_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, doctor_name_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, patient_info_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisAcceptCallPush, doctor_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallRequest, response_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallRequest, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallRequest, register_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallResponse, response_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallResponse, room_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallResponse, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallResponse, result_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisResponseCallResponse, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorAcceptCallResultPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorAcceptCallResultPush, response_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorAcceptCallResultPush, register_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassRequest, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassRequest, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassRequest, wait_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassResponse, datetime_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassResponse, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassResponse, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassResponse, result_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassResponse, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassPush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassPush, datetime_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassPush, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassPush, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorSurePassPush, patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, patient_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, datetime_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, treat_main_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, treat_propose_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, deal_propose_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopRequest, prescript_propose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompletePush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompletePush, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompletePush, treat_main_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompletePush, treat_propose_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompletePush, deal_propose_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompletePush, prescript_propose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopResponse, result_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorStopResponse, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseRequest, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseRequest, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseRequest, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseRequest, patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseResponse, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseResponse, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseResponse, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorPauseResponse, patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPausePush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPausePush, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPausePush, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPausePush, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPausePush, patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPauseRecoverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPauseRecoverRequest, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPauseRecoverRequest, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPauseRecoverRequest, patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPauseRecoverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPauseRecoverResponse, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPauseRecoverResponse, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPauseRecoverResponse, patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPassRecoverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPassRecoverRequest, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPassRecoverRequest, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPassRecoverRequest, patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPassRecoverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPassRecoverResponse, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPassRecoverResponse, register_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisPassRecoverResponse, patient_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveRequest, doctor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveResponse, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveResponse, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveRecoverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveRecoverRequest, doctor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveRecoverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveRecoverResponse, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorLeaveRecoverResponse, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompleteRequest, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompleteRequest, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompleteResponse, doctor_id_),
  PROTOBUF_FIELD_OFFSET(::message::DoctorCompleteResponse, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveRequest, diagnosis_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveResponse, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveResponse, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveRecoverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveRecoverRequest, diagnosis_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveRecoverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveRecoverResponse, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisLeaveRecoverResponse, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisCompleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisCompleteRequest, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisCompleteRequest, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisCompleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisCompleteResponse, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisCompleteResponse, datetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisSpareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisSpareRequest, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisSpareRequest, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisSpareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisSpareResponse, diagnosis_id_),
  PROTOBUF_FIELD_OFFSET(::message::DiagnosisSpareResponse, datetime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::message::PatientBaseInfo)},
  { 14, -1, sizeof(::message::DiagnosisInfoResponse)},
  { 29, -1, sizeof(::message::DoctorInfoResponse)},
  { 45, -1, sizeof(::message::DoctorBeginRequest)},
  { 52, -1, sizeof(::message::DoctorBeginResponse)},
  { 59, -1, sizeof(::message::DiagnosisBeginRequest)},
  { 65, -1, sizeof(::message::DiagnosisBeginResponse)},
  { 71, -1, sizeof(::message::DioctorCallRequest)},
  { 77, -1, sizeof(::message::DoctorCallResponse)},
  { 92, -1, sizeof(::message::DiagnosisAcceptCallPush)},
  { 106, -1, sizeof(::message::DiagnosisResponseCallRequest)},
  { 114, -1, sizeof(::message::DiagnosisResponseCallResponse)},
  { 124, -1, sizeof(::message::DoctorAcceptCallResultPush)},
  { 131, -1, sizeof(::message::DoctorSurePassRequest)},
  { 139, -1, sizeof(::message::DoctorSurePassResponse)},
  { 149, -1, sizeof(::message::DoctorSurePassPush)},
  { 158, -1, sizeof(::message::DoctorStopRequest)},
  { 172, -1, sizeof(::message::DoctorCompletePush)},
  { 182, -1, sizeof(::message::DoctorStopResponse)},
  { 189, -1, sizeof(::message::DoctorPauseRequest)},
  { 198, -1, sizeof(::message::DoctorPauseResponse)},
  { 207, -1, sizeof(::message::DiagnosisPausePush)},
  { 216, -1, sizeof(::message::DiagnosisPauseRecoverRequest)},
  { 224, -1, sizeof(::message::DiagnosisPauseRecoverResponse)},
  { 232, -1, sizeof(::message::DiagnosisPassRecoverRequest)},
  { 240, -1, sizeof(::message::DiagnosisPassRecoverResponse)},
  { 248, -1, sizeof(::message::DoctorLeaveRequest)},
  { 254, -1, sizeof(::message::DoctorLeaveResponse)},
  { 261, -1, sizeof(::message::DoctorLeaveRecoverRequest)},
  { 267, -1, sizeof(::message::DoctorLeaveRecoverResponse)},
  { 274, -1, sizeof(::message::DoctorCompleteRequest)},
  { 281, -1, sizeof(::message::DoctorCompleteResponse)},
  { 288, -1, sizeof(::message::DiagnosisLeaveRequest)},
  { 294, -1, sizeof(::message::DiagnosisLeaveResponse)},
  { 301, -1, sizeof(::message::DiagnosisLeaveRecoverRequest)},
  { 307, -1, sizeof(::message::DiagnosisLeaveRecoverResponse)},
  { 314, -1, sizeof(::message::DiagnosisCompleteRequest)},
  { 321, -1, sizeof(::message::DiagnosisCompleteResponse)},
  { 328, -1, sizeof(::message::DiagnosisSpareRequest)},
  { 335, -1, sizeof(::message::DiagnosisSpareResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_PatientBaseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorBeginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorBeginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisBeginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisBeginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DioctorCallRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorCallResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisAcceptCallPush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisResponseCallRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisResponseCallResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorAcceptCallResultPush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorSurePassRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorSurePassResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorSurePassPush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorStopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorCompletePush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorStopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorPauseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorPauseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisPausePush_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisPauseRecoverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisPauseRecoverResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisPassRecoverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisPassRecoverResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorLeaveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorLeaveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorLeaveRecoverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorLeaveRecoverResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorCompleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DoctorCompleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisLeaveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisLeaveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisLeaveRecoverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisLeaveRecoverResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisCompleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisCompleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisSpareRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DiagnosisSpareResponse_default_instance_),
};

static ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptorsTable assign_descriptors_table_TogetherCall_2eproto = {
  {}, AddDescriptors_TogetherCall_2eproto, "TogetherCall.proto", schemas,
  file_default_instances, TableStruct_TogetherCall_2eproto::offsets,
  file_level_metadata_TogetherCall_2eproto, 40, file_level_enum_descriptors_TogetherCall_2eproto, file_level_service_descriptors_TogetherCall_2eproto,
};

const char descriptor_table_protodef_TogetherCall_2eproto[] =
  "\n\022TogetherCall.proto\022\007message\"\241\001\n\017Patien"
  "tBaseInfo\022\022\n\npatient_id\030\001 \001(\t\022\014\n\004code\030\002 "
  "\001(\t\022\014\n\004name\030\003 \001(\t\022\013\n\003sex\030\004 \001(\t\022\017\n\007id_car"
  "d\030\005 \001(\t\022\r\n\005phone\030\006 \001(\t\022\020\n\010birthday\030\007 \001(\t"
  "\022\017\n\007address\030\010 \001(\t\022\016\n\006avatar\030\t \001(\014\"\325\001\n\025Di"
  "agnosisInfoResponse\022\023\n\013organize_id\030\001 \001(\t"
  "\022\025\n\rorganize_name\030\002 \001(\t\022\020\n\010username\030\003 \001("
  "\t\022\r\n\005owner\030\004 \001(\t\022\r\n\005phone\030\005 \001(\t\022\017\n\007addre"
  "ss\030\006 \001(\t\022\026\n\016detail_address\030\007 \001(\t\022\021\n\tlong"
  "itude\030\010 \001(\002\022\020\n\010latitude\030\t \001(\002\022\022\n\nhead_im"
  "age\030\n \001(\014\"\351\001\n\022DoctorInfoResponse\022\021\n\tdoct"
  "or_id\030\001 \001(\t\022\023\n\013doctor_name\030\002 \001(\t\022\020\n\010user"
  "name\030\003 \001(\t\022\013\n\003sex\030\004 \001(\t\022\025\n\rhospital_uuid"
  "\030\005 \001(\t\022\025\n\rhospital_name\030\006 \001(\t\022\023\n\013office_"
  "uuid\030\007 \001(\t\022\023\n\013office_name\030\010 \001(\t\022\021\n\tduty_"
  "name\030\t \001(\t\022\r\n\005phone\030\n \001(\t\022\022\n\nhead_image\030"
  "\013 \001(\014\";\n\022DoctorBeginRequest\022\022\n\nbegin_typ"
  "e\030\001 \001(\t\022\021\n\tdoctor_id\030\002 \001(\t\"5\n\023DoctorBegi"
  "nResponse\022\016\n\006result\030\001 \001(\t\022\016\n\006reason\030\002 \001("
  "\t\"-\n\025DiagnosisBeginRequest\022\024\n\014diagnosis_"
  "id\030\001 \001(\t\"*\n\026DiagnosisBeginResponse\022\020\n\010da"
  "tetime\030\001 \001(\t\"\'\n\022DioctorCallRequest\022\021\n\tdo"
  "ctor_id\030\001 \001(\t\"\210\002\n\022DoctorCallResponse\022\013\n\003"
  "res\030\001 \001(\t\022\023\n\013register_id\030\002 \001(\t\022\016\n\006now_id"
  "\030\003 \001(\t\022\017\n\007next_id\030\004 \001(\t\022\013\n\003now\030\005 \001(\t\022\014\n\004"
  "next\030\006 \001(\t\022\024\n\014diagnosis_id\030\007 \001(\t\022\026\n\016diag"
  "nosis_name\030\010 \001(\t\022.\n\014patient_info\030\t \001(\0132\030"
  ".message.PatientBaseInfo\0226\n\016diagnosis_in"
  "fo\030\n \001(\0132\036.message.DiagnosisInfoResponse"
  "\"\364\001\n\027DiagnosisAcceptCallPush\022\023\n\013register"
  "_id\030\001 \001(\t\022\016\n\006now_id\030\002 \001(\t\022\017\n\007next_id\030\003 \001"
  "(\t\022\013\n\003now\030\004 \001(\t\022\014\n\004next\030\005 \001(\t\022\021\n\tdoctor_"
  "id\030\006 \001(\t\022\023\n\013doctor_name\030\007 \001(\t\022.\n\014patient"
  "_info\030\010 \001(\0132\030.message.PatientBaseInfo\0220\n"
  "\013doctor_info\030\t \001(\0132\033.message.DoctorInfoR"
  "esponse\"X\n\034DiagnosisResponseCallRequest\022"
  "\020\n\010response\030\001 \001(\t\022\021\n\tdoctor_id\030\002 \001(\t\022\023\n\013"
  "register_id\030\003 \001(\t\"t\n\035DiagnosisResponseCa"
  "llResponse\022\020\n\010response\030\001 \001(\t\022\014\n\004room\030\002 \001"
  "(\t\022\023\n\013register_id\030\003 \001(\t\022\016\n\006result\030\004 \001(\t\022"
  "\016\n\006reason\030\005 \001(\t\"C\n\032DoctorAcceptCallResul"
  "tPush\022\020\n\010response\030\001 \001(\t\022\023\n\013register_id\030\002"
  " \001(\t\"R\n\025DoctorSurePassRequest\022\021\n\tdoctor_"
  "id\030\001 \001(\t\022\023\n\013register_id\030\002 \001(\t\022\021\n\twait_ti"
  "me\030\003 \001(\021\"r\n\026DoctorSurePassResponse\022\020\n\010da"
  "tetime\030\001 \001(\t\022\023\n\013register_id\030\002 \001(\t\022\021\n\tdoc"
  "tor_id\030\003 \001(\t\022\016\n\006result\030\004 \001(\t\022\016\n\006reason\030\005"
  " \001(\t\"b\n\022DoctorSurePassPush\022\020\n\010datetime\030\001"
  " \001(\t\022\023\n\013register_id\030\002 \001(\t\022\021\n\tdoctor_id\030\003"
  " \001(\t\022\022\n\npatient_id\030\004 \001(\t\"\323\001\n\021DoctorStopR"
  "equest\022\021\n\tdoctor_id\030\001 \001(\t\022\023\n\013register_id"
  "\030\002 \001(\t\022\022\n\npatient_id\030\003 \001(\t\022\024\n\014diagnosis_"
  "id\030\004 \001(\t\022\020\n\010datetime\030\005 \001(\t\022\022\n\ntreat_main"
  "\030\006 \001(\t\022\025\n\rtreat_propose\030\007 \001(\t\022\024\n\014deal_pr"
  "opose\030\010 \001(\t\022\031\n\021prescript_propose\030\t \001(\t\"\203"
  "\001\n\022DoctorCompletePush\022\021\n\tdoctor_id\030\001 \001(\t"
  "\022\022\n\ntreat_main\030\002 \001(\t\022\025\n\rtreat_propose\030\003 "
  "\001(\t\022\024\n\014deal_propose\030\004 \001(\t\022\031\n\021prescript_p"
  "ropose\030\005 \001(\t\"4\n\022DoctorStopResponse\022\016\n\006re"
  "sult\030\001 \001(\t\022\016\n\006reason\030\002 \001(\t\"f\n\022DoctorPaus"
  "eRequest\022\021\n\tdoctor_id\030\001 \001(\t\022\023\n\013register_"
  "id\030\002 \001(\t\022\024\n\014diagnosis_id\030\003 \001(\t\022\022\n\npatien"
  "t_id\030\004 \001(\t\"g\n\023DoctorPauseResponse\022\024\n\014dia"
  "gnosis_id\030\001 \001(\t\022\023\n\013register_id\030\002 \001(\t\022\021\n\t"
  "doctor_id\030\003 \001(\t\022\022\n\npatient_id\030\004 \001(\t\"f\n\022D"
  "iagnosisPausePush\022\024\n\014diagnosis_id\030\001 \001(\t\022"
  "\023\n\013register_id\030\002 \001(\t\022\021\n\tdoctor_id\030\003 \001(\t\022"
  "\022\n\npatient_id\030\004 \001(\t\"]\n\034DiagnosisPauseRec"
  "overRequest\022\024\n\014diagnosis_id\030\001 \001(\t\022\023\n\013reg"
  "ister_id\030\002 \001(\t\022\022\n\npatient_id\030\003 \001(\t\"^\n\035Di"
  "agnosisPauseRecoverResponse\022\024\n\014diagnosis"
  "_id\030\001 \001(\t\022\023\n\013register_id\030\002 \001(\t\022\022\n\npatien"
  "t_id\030\003 \001(\t\"\\\n\033DiagnosisPassRecoverReques"
  "t\022\024\n\014diagnosis_id\030\001 \001(\t\022\023\n\013register_id\030\002"
  " \001(\t\022\022\n\npatient_id\030\003 \001(\t\"]\n\034DiagnosisPas"
  "sRecoverResponse\022\024\n\014diagnosis_id\030\001 \001(\t\022\023"
  "\n\013register_id\030\002 \001(\t\022\022\n\npatient_id\030\003 \001(\t\""
  "\'\n\022DoctorLeaveRequest\022\021\n\tdoctor_id\030\001 \001(\t"
  "\":\n\023DoctorLeaveResponse\022\021\n\tdoctor_id\030\001 \001"
  "(\t\022\020\n\010datetime\030\002 \001(\t\".\n\031DoctorLeaveRecov"
  "erRequest\022\021\n\tdoctor_id\030\001 \001(\t\"A\n\032DoctorLe"
  "aveRecoverResponse\022\021\n\tdoctor_id\030\001 \001(\t\022\020\n"
  "\010datetime\030\002 \001(\t\"<\n\025DoctorCompleteRequest"
  "\022\021\n\tdoctor_id\030\001 \001(\t\022\020\n\010datetime\030\002 \001(\t\"=\n"
  "\026DoctorCompleteResponse\022\021\n\tdoctor_id\030\001 \001"
  "(\t\022\020\n\010datetime\030\002 \001(\t\"-\n\025DiagnosisLeaveRe"
  "quest\022\024\n\014diagnosis_id\030\001 \001(\t\"@\n\026Diagnosis"
  "LeaveResponse\022\024\n\014diagnosis_id\030\001 \001(\t\022\020\n\010d"
  "atetime\030\002 \001(\t\"4\n\034DiagnosisLeaveRecoverRe"
  "quest\022\024\n\014diagnosis_id\030\001 \001(\t\"G\n\035Diagnosis"
  "LeaveRecoverResponse\022\024\n\014diagnosis_id\030\001 \001"
  "(\t\022\020\n\010datetime\030\002 \001(\t\"B\n\030DiagnosisComplet"
  "eRequest\022\024\n\014diagnosis_id\030\001 \001(\t\022\020\n\010dateti"
  "me\030\002 \001(\t\"C\n\031DiagnosisCompleteResponse\022\024\n"
  "\014diagnosis_id\030\001 \001(\t\022\020\n\010datetime\030\002 \001(\t\">\n"
  "\025DiagnosisSpareRequest\022\024\n\014diagnosis_id\030\001"
  " \001(\t\022\017\n\007content\030\002 \001(\t\"@\n\026DiagnosisSpareR"
  "esponse\022\024\n\014diagnosis_id\030\001 \001(\t\022\020\n\010datetim"
  "e\030\002 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TogetherCall_2eproto = {
  false, InitDefaults_TogetherCall_2eproto, 
  descriptor_table_protodef_TogetherCall_2eproto,
  "TogetherCall.proto", &assign_descriptors_table_TogetherCall_2eproto, 3935,
};

void AddDescriptors_TogetherCall_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[1] =
  {
  };
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TogetherCall_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TogetherCall_2eproto = []() { AddDescriptors_TogetherCall_2eproto(); return true; }();
namespace message {

// ===================================================================

void PatientBaseInfo::InitAsDefaultInstance() {
}
class PatientBaseInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PatientBaseInfo::kPatientIdFieldNumber;
const int PatientBaseInfo::kCodeFieldNumber;
const int PatientBaseInfo::kNameFieldNumber;
const int PatientBaseInfo::kSexFieldNumber;
const int PatientBaseInfo::kIdCardFieldNumber;
const int PatientBaseInfo::kPhoneFieldNumber;
const int PatientBaseInfo::kBirthdayFieldNumber;
const int PatientBaseInfo::kAddressFieldNumber;
const int PatientBaseInfo::kAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PatientBaseInfo::PatientBaseInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.PatientBaseInfo)
}
PatientBaseInfo::PatientBaseInfo(const PatientBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.code().size() > 0) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sex().size() > 0) {
    sex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sex_);
  }
  id_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.id_card().size() > 0) {
    id_card_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_card_);
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.birthday().size() > 0) {
    birthday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.birthday_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.avatar().size() > 0) {
    avatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  // @@protoc_insertion_point(copy_constructor:message.PatientBaseInfo)
}

void PatientBaseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_PatientBaseInfo_TogetherCall_2eproto.base);
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_card_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  birthday_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PatientBaseInfo::~PatientBaseInfo() {
  // @@protoc_insertion_point(destructor:message.PatientBaseInfo)
  SharedDtor();
}

void PatientBaseInfo::SharedDtor() {
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_card_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  birthday_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PatientBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatientBaseInfo& PatientBaseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatientBaseInfo_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void PatientBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:message.PatientBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_card_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  birthday_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PatientBaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string patient_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.PatientBaseInfo.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string code = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_code(), ptr, ctx, "message.PatientBaseInfo.code");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "message.PatientBaseInfo.name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string sex = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sex(), ptr, ctx, "message.PatientBaseInfo.sex");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string id_card = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id_card(), ptr, ctx, "message.PatientBaseInfo.id_card");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string phone = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_phone(), ptr, ctx, "message.PatientBaseInfo.phone");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string birthday = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_birthday(), ptr, ctx, "message.PatientBaseInfo.birthday");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string address = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "message.PatientBaseInfo.address");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes avatar = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_avatar(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PatientBaseInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.PatientBaseInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string patient_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.PatientBaseInfo.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.PatientBaseInfo.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.PatientBaseInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sex = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sex().data(), static_cast<int>(this->sex().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.PatientBaseInfo.sex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id_card = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id_card()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id_card().data(), static_cast<int>(this->id_card().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.PatientBaseInfo.id_card"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phone = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.PatientBaseInfo.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string birthday = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->birthday().data(), static_cast<int>(this->birthday().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.PatientBaseInfo.birthday"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.PatientBaseInfo.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes avatar = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.PatientBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.PatientBaseInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PatientBaseInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.PatientBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string patient_id = 1;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->patient_id(), output);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string sex = 4;
  if (this->sex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sex().data(), static_cast<int>(this->sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.sex");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sex(), output);
  }

  // string id_card = 5;
  if (this->id_card().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id_card().data(), static_cast<int>(this->id_card().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.id_card");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->id_card(), output);
  }

  // string phone = 6;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.phone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->phone(), output);
  }

  // string birthday = 7;
  if (this->birthday().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->birthday().data(), static_cast<int>(this->birthday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.birthday");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->birthday(), output);
  }

  // string address = 8;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->address(), output);
  }

  // bytes avatar = 9;
  if (this->avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->avatar(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.PatientBaseInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* PatientBaseInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.PatientBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string patient_id = 1;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->patient_id(), target);
  }

  // string code = 2;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string sex = 4;
  if (this->sex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sex().data(), static_cast<int>(this->sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.sex");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->sex(), target);
  }

  // string id_card = 5;
  if (this->id_card().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id_card().data(), static_cast<int>(this->id_card().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.id_card");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->id_card(), target);
  }

  // string phone = 6;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.phone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->phone(), target);
  }

  // string birthday = 7;
  if (this->birthday().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->birthday().data(), static_cast<int>(this->birthday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.birthday");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->birthday(), target);
  }

  // string address = 8;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.PatientBaseInfo.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->address(), target);
  }

  // bytes avatar = 9;
  if (this->avatar().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        9, this->avatar(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.PatientBaseInfo)
  return target;
}

size_t PatientBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.PatientBaseInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string patient_id = 1;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  // string code = 2;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->code());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string sex = 4;
  if (this->sex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sex());
  }

  // string id_card = 5;
  if (this->id_card().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id_card());
  }

  // string phone = 6;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // string birthday = 7;
  if (this->birthday().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->birthday());
  }

  // string address = 8;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  // bytes avatar = 9;
  if (this->avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->avatar());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatientBaseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.PatientBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PatientBaseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatientBaseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.PatientBaseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.PatientBaseInfo)
    MergeFrom(*source);
  }
}

void PatientBaseInfo::MergeFrom(const PatientBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.PatientBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sex().size() > 0) {

    sex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sex_);
  }
  if (from.id_card().size() > 0) {

    id_card_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_card_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.birthday().size() > 0) {

    birthday_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.birthday_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.avatar().size() > 0) {

    avatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
}

void PatientBaseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.PatientBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatientBaseInfo::CopyFrom(const PatientBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.PatientBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatientBaseInfo::IsInitialized() const {
  return true;
}

void PatientBaseInfo::Swap(PatientBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PatientBaseInfo::InternalSwap(PatientBaseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sex_.Swap(&other->sex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_card_.Swap(&other->id_card_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  birthday_.Swap(&other->birthday_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PatientBaseInfo::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisInfoResponse::InitAsDefaultInstance() {
}
class DiagnosisInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisInfoResponse::kOrganizeIdFieldNumber;
const int DiagnosisInfoResponse::kOrganizeNameFieldNumber;
const int DiagnosisInfoResponse::kUsernameFieldNumber;
const int DiagnosisInfoResponse::kOwnerFieldNumber;
const int DiagnosisInfoResponse::kPhoneFieldNumber;
const int DiagnosisInfoResponse::kAddressFieldNumber;
const int DiagnosisInfoResponse::kDetailAddressFieldNumber;
const int DiagnosisInfoResponse::kLongitudeFieldNumber;
const int DiagnosisInfoResponse::kLatitudeFieldNumber;
const int DiagnosisInfoResponse::kHeadImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisInfoResponse::DiagnosisInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisInfoResponse)
}
DiagnosisInfoResponse::DiagnosisInfoResponse(const DiagnosisInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  organize_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.organize_id().size() > 0) {
    organize_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.organize_id_);
  }
  organize_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.organize_name().size() > 0) {
    organize_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.organize_name_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.owner().size() > 0) {
    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  detail_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.detail_address().size() > 0) {
    detail_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_address_);
  }
  head_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.head_image().size() > 0) {
    head_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_image_);
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisInfoResponse)
}

void DiagnosisInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisInfoResponse_TogetherCall_2eproto.base);
  organize_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organize_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

DiagnosisInfoResponse::~DiagnosisInfoResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisInfoResponse)
  SharedDtor();
}

void DiagnosisInfoResponse::SharedDtor() {
  organize_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organize_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisInfoResponse& DiagnosisInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisInfoResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organize_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organize_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string organize_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_organize_id(), ptr, ctx, "message.DiagnosisInfoResponse.organize_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string organize_name = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_organize_name(), ptr, ctx, "message.DiagnosisInfoResponse.organize_name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string username = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_username(), ptr, ctx, "message.DiagnosisInfoResponse.username");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string owner = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_owner(), ptr, ctx, "message.DiagnosisInfoResponse.owner");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string phone = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_phone(), ptr, ctx, "message.DiagnosisInfoResponse.phone");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string address = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_address(), ptr, ctx, "message.DiagnosisInfoResponse.address");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string detail_address = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_detail_address(), ptr, ctx, "message.DiagnosisInfoResponse.detail_address");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float longitude = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 69) goto handle_unusual;
        set_longitude(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float latitude = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 77) goto handle_unusual;
        set_latitude(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bytes head_image = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_head_image(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string organize_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_organize_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->organize_id().data(), static_cast<int>(this->organize_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisInfoResponse.organize_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string organize_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_organize_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->organize_name().data(), static_cast<int>(this->organize_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisInfoResponse.organize_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisInfoResponse.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->owner().data(), static_cast<int>(this->owner().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisInfoResponse.owner"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phone = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisInfoResponse.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisInfoResponse.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string detail_address = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_detail_address()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->detail_address().data(), static_cast<int>(this->detail_address().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisInfoResponse.detail_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latitude = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes head_image = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string organize_id = 1;
  if (this->organize_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->organize_id().data(), static_cast<int>(this->organize_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.organize_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->organize_id(), output);
  }

  // string organize_name = 2;
  if (this->organize_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->organize_name().data(), static_cast<int>(this->organize_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.organize_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->organize_name(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.username");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.owner");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->owner(), output);
  }

  // string phone = 5;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.phone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->phone(), output);
  }

  // string address = 6;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->address(), output);
  }

  // string detail_address = 7;
  if (this->detail_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->detail_address().data(), static_cast<int>(this->detail_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.detail_address");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->detail_address(), output);
  }

  // float longitude = 8;
  if (this->longitude() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->longitude(), output);
  }

  // float latitude = 9;
  if (this->latitude() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->latitude(), output);
  }

  // bytes head_image = 10;
  if (this->head_image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->head_image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string organize_id = 1;
  if (this->organize_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->organize_id().data(), static_cast<int>(this->organize_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.organize_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->organize_id(), target);
  }

  // string organize_name = 2;
  if (this->organize_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->organize_name().data(), static_cast<int>(this->organize_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.organize_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->organize_name(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.username");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->owner().data(), static_cast<int>(this->owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.owner");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->owner(), target);
  }

  // string phone = 5;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.phone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }

  // string address = 6;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->address(), target);
  }

  // string detail_address = 7;
  if (this->detail_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->detail_address().data(), static_cast<int>(this->detail_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisInfoResponse.detail_address");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->detail_address(), target);
  }

  // float longitude = 8;
  if (this->longitude() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->longitude(), target);
  }

  // float latitude = 9;
  if (this->latitude() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->latitude(), target);
  }

  // bytes head_image = 10;
  if (this->head_image().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        10, this->head_image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisInfoResponse)
  return target;
}

size_t DiagnosisInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organize_id = 1;
  if (this->organize_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->organize_id());
  }

  // string organize_name = 2;
  if (this->organize_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->organize_name());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string owner = 4;
  if (this->owner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->owner());
  }

  // string phone = 5;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // string address = 6;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string detail_address = 7;
  if (this->detail_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->detail_address());
  }

  // bytes head_image = 10;
  if (this->head_image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->head_image());
  }

  // float longitude = 8;
  if (this->longitude() != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 9;
  if (this->latitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisInfoResponse)
    MergeFrom(*source);
  }
}

void DiagnosisInfoResponse::MergeFrom(const DiagnosisInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.organize_id().size() > 0) {

    organize_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.organize_id_);
  }
  if (from.organize_name().size() > 0) {

    organize_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.organize_name_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.owner().size() > 0) {

    owner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.detail_address().size() > 0) {

    detail_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_address_);
  }
  if (from.head_image().size() > 0) {

    head_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_image_);
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
}

void DiagnosisInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisInfoResponse::CopyFrom(const DiagnosisInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisInfoResponse::IsInitialized() const {
  return true;
}

void DiagnosisInfoResponse::Swap(DiagnosisInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisInfoResponse::InternalSwap(DiagnosisInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  organize_id_.Swap(&other->organize_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  organize_name_.Swap(&other->organize_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_.Swap(&other->owner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detail_address_.Swap(&other->detail_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  head_image_.Swap(&other->head_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisInfoResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorInfoResponse::InitAsDefaultInstance() {
}
class DoctorInfoResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorInfoResponse::kDoctorIdFieldNumber;
const int DoctorInfoResponse::kDoctorNameFieldNumber;
const int DoctorInfoResponse::kUsernameFieldNumber;
const int DoctorInfoResponse::kSexFieldNumber;
const int DoctorInfoResponse::kHospitalUuidFieldNumber;
const int DoctorInfoResponse::kHospitalNameFieldNumber;
const int DoctorInfoResponse::kOfficeUuidFieldNumber;
const int DoctorInfoResponse::kOfficeNameFieldNumber;
const int DoctorInfoResponse::kDutyNameFieldNumber;
const int DoctorInfoResponse::kPhoneFieldNumber;
const int DoctorInfoResponse::kHeadImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorInfoResponse::DoctorInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorInfoResponse)
}
DoctorInfoResponse::DoctorInfoResponse(const DoctorInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  doctor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_name().size() > 0) {
    doctor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_name_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  sex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.sex().size() > 0) {
    sex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sex_);
  }
  hospital_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hospital_uuid().size() > 0) {
    hospital_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hospital_uuid_);
  }
  hospital_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hospital_name().size() > 0) {
    hospital_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hospital_name_);
  }
  office_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.office_uuid().size() > 0) {
    office_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.office_uuid_);
  }
  office_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.office_name().size() > 0) {
    office_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.office_name_);
  }
  duty_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.duty_name().size() > 0) {
    duty_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.duty_name_);
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.phone().size() > 0) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  head_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.head_image().size() > 0) {
    head_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_image_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorInfoResponse)
}

void DoctorInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorInfoResponse_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hospital_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hospital_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  office_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  office_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duty_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorInfoResponse::~DoctorInfoResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorInfoResponse)
  SharedDtor();
}

void DoctorInfoResponse::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hospital_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hospital_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  office_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  office_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duty_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorInfoResponse& DoctorInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorInfoResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hospital_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hospital_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  office_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  office_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duty_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorInfoResponse.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_name = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_name(), ptr, ctx, "message.DoctorInfoResponse.doctor_name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string username = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_username(), ptr, ctx, "message.DoctorInfoResponse.username");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string sex = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sex(), ptr, ctx, "message.DoctorInfoResponse.sex");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string hospital_uuid = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hospital_uuid(), ptr, ctx, "message.DoctorInfoResponse.hospital_uuid");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string hospital_name = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hospital_name(), ptr, ctx, "message.DoctorInfoResponse.hospital_name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string office_uuid = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_office_uuid(), ptr, ctx, "message.DoctorInfoResponse.office_uuid");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string office_name = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_office_name(), ptr, ctx, "message.DoctorInfoResponse.office_name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string duty_name = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_duty_name(), ptr, ctx, "message.DoctorInfoResponse.duty_name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string phone = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_phone(), ptr, ctx, "message.DoctorInfoResponse.phone");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes head_image = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_head_image(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_name().data(), static_cast<int>(this->doctor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.doctor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sex = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sex().data(), static_cast<int>(this->sex().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.sex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hospital_uuid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hospital_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hospital_uuid().data(), static_cast<int>(this->hospital_uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.hospital_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hospital_name = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hospital_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hospital_name().data(), static_cast<int>(this->hospital_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.hospital_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string office_uuid = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_office_uuid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->office_uuid().data(), static_cast<int>(this->office_uuid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.office_uuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string office_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_office_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->office_name().data(), static_cast<int>(this->office_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.office_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string duty_name = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_duty_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->duty_name().data(), static_cast<int>(this->duty_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.duty_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phone = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorInfoResponse.phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes head_image = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string doctor_name = 2;
  if (this->doctor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_name().data(), static_cast<int>(this->doctor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.doctor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->doctor_name(), output);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.username");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // string sex = 4;
  if (this->sex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sex().data(), static_cast<int>(this->sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.sex");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sex(), output);
  }

  // string hospital_uuid = 5;
  if (this->hospital_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hospital_uuid().data(), static_cast<int>(this->hospital_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.hospital_uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hospital_uuid(), output);
  }

  // string hospital_name = 6;
  if (this->hospital_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hospital_name().data(), static_cast<int>(this->hospital_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.hospital_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hospital_name(), output);
  }

  // string office_uuid = 7;
  if (this->office_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->office_uuid().data(), static_cast<int>(this->office_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.office_uuid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->office_uuid(), output);
  }

  // string office_name = 8;
  if (this->office_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->office_name().data(), static_cast<int>(this->office_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.office_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->office_name(), output);
  }

  // string duty_name = 9;
  if (this->duty_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->duty_name().data(), static_cast<int>(this->duty_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.duty_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->duty_name(), output);
  }

  // string phone = 10;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.phone");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->phone(), output);
  }

  // bytes head_image = 11;
  if (this->head_image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->head_image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorInfoResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string doctor_name = 2;
  if (this->doctor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_name().data(), static_cast<int>(this->doctor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.doctor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->doctor_name(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.username");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // string sex = 4;
  if (this->sex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sex().data(), static_cast<int>(this->sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.sex");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->sex(), target);
  }

  // string hospital_uuid = 5;
  if (this->hospital_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hospital_uuid().data(), static_cast<int>(this->hospital_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.hospital_uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->hospital_uuid(), target);
  }

  // string hospital_name = 6;
  if (this->hospital_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hospital_name().data(), static_cast<int>(this->hospital_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.hospital_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->hospital_name(), target);
  }

  // string office_uuid = 7;
  if (this->office_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->office_uuid().data(), static_cast<int>(this->office_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.office_uuid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->office_uuid(), target);
  }

  // string office_name = 8;
  if (this->office_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->office_name().data(), static_cast<int>(this->office_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.office_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->office_name(), target);
  }

  // string duty_name = 9;
  if (this->duty_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->duty_name().data(), static_cast<int>(this->duty_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.duty_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->duty_name(), target);
  }

  // string phone = 10;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorInfoResponse.phone");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->phone(), target);
  }

  // bytes head_image = 11;
  if (this->head_image().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        11, this->head_image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorInfoResponse)
  return target;
}

size_t DoctorInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string doctor_name = 2;
  if (this->doctor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_name());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string sex = 4;
  if (this->sex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sex());
  }

  // string hospital_uuid = 5;
  if (this->hospital_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hospital_uuid());
  }

  // string hospital_name = 6;
  if (this->hospital_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hospital_name());
  }

  // string office_uuid = 7;
  if (this->office_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->office_uuid());
  }

  // string office_name = 8;
  if (this->office_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->office_name());
  }

  // string duty_name = 9;
  if (this->duty_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->duty_name());
  }

  // string phone = 10;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->phone());
  }

  // bytes head_image = 11;
  if (this->head_image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->head_image());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorInfoResponse)
    MergeFrom(*source);
  }
}

void DoctorInfoResponse::MergeFrom(const DoctorInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.doctor_name().size() > 0) {

    doctor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_name_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.sex().size() > 0) {

    sex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sex_);
  }
  if (from.hospital_uuid().size() > 0) {

    hospital_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hospital_uuid_);
  }
  if (from.hospital_name().size() > 0) {

    hospital_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hospital_name_);
  }
  if (from.office_uuid().size() > 0) {

    office_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.office_uuid_);
  }
  if (from.office_name().size() > 0) {

    office_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.office_name_);
  }
  if (from.duty_name().size() > 0) {

    duty_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.duty_name_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.head_image().size() > 0) {

    head_image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_image_);
  }
}

void DoctorInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorInfoResponse::CopyFrom(const DoctorInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorInfoResponse::IsInitialized() const {
  return true;
}

void DoctorInfoResponse::Swap(DoctorInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorInfoResponse::InternalSwap(DoctorInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_name_.Swap(&other->doctor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sex_.Swap(&other->sex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hospital_uuid_.Swap(&other->hospital_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hospital_name_.Swap(&other->hospital_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  office_uuid_.Swap(&other->office_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  office_name_.Swap(&other->office_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  duty_name_.Swap(&other->duty_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  head_image_.Swap(&other->head_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorInfoResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorBeginRequest::InitAsDefaultInstance() {
}
class DoctorBeginRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorBeginRequest::kBeginTypeFieldNumber;
const int DoctorBeginRequest::kDoctorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorBeginRequest::DoctorBeginRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorBeginRequest)
}
DoctorBeginRequest::DoctorBeginRequest(const DoctorBeginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  begin_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.begin_type().size() > 0) {
    begin_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.begin_type_);
  }
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorBeginRequest)
}

void DoctorBeginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorBeginRequest_TogetherCall_2eproto.base);
  begin_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorBeginRequest::~DoctorBeginRequest() {
  // @@protoc_insertion_point(destructor:message.DoctorBeginRequest)
  SharedDtor();
}

void DoctorBeginRequest::SharedDtor() {
  begin_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorBeginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorBeginRequest& DoctorBeginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorBeginRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorBeginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorBeginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begin_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorBeginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string begin_type = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_begin_type(), ptr, ctx, "message.DoctorBeginRequest.begin_type");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorBeginRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorBeginRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorBeginRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string begin_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_begin_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->begin_type().data(), static_cast<int>(this->begin_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorBeginRequest.begin_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorBeginRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorBeginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorBeginRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorBeginRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorBeginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string begin_type = 1;
  if (this->begin_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->begin_type().data(), static_cast<int>(this->begin_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorBeginRequest.begin_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->begin_type(), output);
  }

  // string doctor_id = 2;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorBeginRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->doctor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorBeginRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorBeginRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorBeginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string begin_type = 1;
  if (this->begin_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->begin_type().data(), static_cast<int>(this->begin_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorBeginRequest.begin_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->begin_type(), target);
  }

  // string doctor_id = 2;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorBeginRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->doctor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorBeginRequest)
  return target;
}

size_t DoctorBeginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorBeginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string begin_type = 1;
  if (this->begin_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->begin_type());
  }

  // string doctor_id = 2;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorBeginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorBeginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorBeginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorBeginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorBeginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorBeginRequest)
    MergeFrom(*source);
  }
}

void DoctorBeginRequest::MergeFrom(const DoctorBeginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorBeginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin_type().size() > 0) {

    begin_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.begin_type_);
  }
  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
}

void DoctorBeginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorBeginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorBeginRequest::CopyFrom(const DoctorBeginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorBeginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorBeginRequest::IsInitialized() const {
  return true;
}

void DoctorBeginRequest::Swap(DoctorBeginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorBeginRequest::InternalSwap(DoctorBeginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  begin_type_.Swap(&other->begin_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorBeginRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorBeginResponse::InitAsDefaultInstance() {
}
class DoctorBeginResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorBeginResponse::kResultFieldNumber;
const int DoctorBeginResponse::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorBeginResponse::DoctorBeginResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorBeginResponse)
}
DoctorBeginResponse::DoctorBeginResponse(const DoctorBeginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorBeginResponse)
}

void DoctorBeginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorBeginResponse_TogetherCall_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorBeginResponse::~DoctorBeginResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorBeginResponse)
  SharedDtor();
}

void DoctorBeginResponse::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorBeginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorBeginResponse& DoctorBeginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorBeginResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorBeginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorBeginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorBeginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string result = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "message.DoctorBeginResponse.result");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reason = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reason(), ptr, ctx, "message.DoctorBeginResponse.reason");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorBeginResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorBeginResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorBeginResponse.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorBeginResponse.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorBeginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorBeginResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorBeginResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorBeginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorBeginResponse.result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->result(), output);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorBeginResponse.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorBeginResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorBeginResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorBeginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorBeginResponse.result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorBeginResponse.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorBeginResponse)
  return target;
}

size_t DoctorBeginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorBeginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorBeginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorBeginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorBeginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorBeginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorBeginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorBeginResponse)
    MergeFrom(*source);
  }
}

void DoctorBeginResponse::MergeFrom(const DoctorBeginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorBeginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void DoctorBeginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorBeginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorBeginResponse::CopyFrom(const DoctorBeginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorBeginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorBeginResponse::IsInitialized() const {
  return true;
}

void DoctorBeginResponse::Swap(DoctorBeginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorBeginResponse::InternalSwap(DoctorBeginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorBeginResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisBeginRequest::InitAsDefaultInstance() {
}
class DiagnosisBeginRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisBeginRequest::kDiagnosisIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisBeginRequest::DiagnosisBeginRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisBeginRequest)
}
DiagnosisBeginRequest::DiagnosisBeginRequest(const DiagnosisBeginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisBeginRequest)
}

void DiagnosisBeginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisBeginRequest_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisBeginRequest::~DiagnosisBeginRequest() {
  // @@protoc_insertion_point(destructor:message.DiagnosisBeginRequest)
  SharedDtor();
}

void DiagnosisBeginRequest::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisBeginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisBeginRequest& DiagnosisBeginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisBeginRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisBeginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisBeginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisBeginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisBeginRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisBeginRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisBeginRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisBeginRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisBeginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisBeginRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisBeginRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisBeginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisBeginRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisBeginRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisBeginRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisBeginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisBeginRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisBeginRequest)
  return target;
}

size_t DiagnosisBeginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisBeginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisBeginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisBeginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisBeginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisBeginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisBeginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisBeginRequest)
    MergeFrom(*source);
  }
}

void DiagnosisBeginRequest::MergeFrom(const DiagnosisBeginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisBeginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
}

void DiagnosisBeginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisBeginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisBeginRequest::CopyFrom(const DiagnosisBeginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisBeginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisBeginRequest::IsInitialized() const {
  return true;
}

void DiagnosisBeginRequest::Swap(DiagnosisBeginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisBeginRequest::InternalSwap(DiagnosisBeginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisBeginRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisBeginResponse::InitAsDefaultInstance() {
}
class DiagnosisBeginResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisBeginResponse::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisBeginResponse::DiagnosisBeginResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisBeginResponse)
}
DiagnosisBeginResponse::DiagnosisBeginResponse(const DiagnosisBeginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisBeginResponse)
}

void DiagnosisBeginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisBeginResponse_TogetherCall_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisBeginResponse::~DiagnosisBeginResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisBeginResponse)
  SharedDtor();
}

void DiagnosisBeginResponse::SharedDtor() {
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisBeginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisBeginResponse& DiagnosisBeginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisBeginResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisBeginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisBeginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisBeginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string datetime = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DiagnosisBeginResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisBeginResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisBeginResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string datetime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisBeginResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisBeginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisBeginResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisBeginResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisBeginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisBeginResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisBeginResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisBeginResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisBeginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisBeginResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisBeginResponse)
  return target;
}

size_t DiagnosisBeginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisBeginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisBeginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisBeginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisBeginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisBeginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisBeginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisBeginResponse)
    MergeFrom(*source);
  }
}

void DiagnosisBeginResponse::MergeFrom(const DiagnosisBeginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisBeginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DiagnosisBeginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisBeginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisBeginResponse::CopyFrom(const DiagnosisBeginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisBeginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisBeginResponse::IsInitialized() const {
  return true;
}

void DiagnosisBeginResponse::Swap(DiagnosisBeginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisBeginResponse::InternalSwap(DiagnosisBeginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisBeginResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DioctorCallRequest::InitAsDefaultInstance() {
}
class DioctorCallRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DioctorCallRequest::kDoctorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DioctorCallRequest::DioctorCallRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DioctorCallRequest)
}
DioctorCallRequest::DioctorCallRequest(const DioctorCallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DioctorCallRequest)
}

void DioctorCallRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DioctorCallRequest_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DioctorCallRequest::~DioctorCallRequest() {
  // @@protoc_insertion_point(destructor:message.DioctorCallRequest)
  SharedDtor();
}

void DioctorCallRequest::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DioctorCallRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DioctorCallRequest& DioctorCallRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DioctorCallRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DioctorCallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DioctorCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DioctorCallRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DioctorCallRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DioctorCallRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DioctorCallRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DioctorCallRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DioctorCallRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DioctorCallRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DioctorCallRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DioctorCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DioctorCallRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DioctorCallRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DioctorCallRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DioctorCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DioctorCallRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DioctorCallRequest)
  return target;
}

size_t DioctorCallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DioctorCallRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DioctorCallRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DioctorCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DioctorCallRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DioctorCallRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DioctorCallRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DioctorCallRequest)
    MergeFrom(*source);
  }
}

void DioctorCallRequest::MergeFrom(const DioctorCallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DioctorCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
}

void DioctorCallRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DioctorCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DioctorCallRequest::CopyFrom(const DioctorCallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DioctorCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DioctorCallRequest::IsInitialized() const {
  return true;
}

void DioctorCallRequest::Swap(DioctorCallRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DioctorCallRequest::InternalSwap(DioctorCallRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DioctorCallRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorCallResponse::InitAsDefaultInstance() {
  ::message::_DoctorCallResponse_default_instance_._instance.get_mutable()->patient_info_ = const_cast< ::message::PatientBaseInfo*>(
      ::message::PatientBaseInfo::internal_default_instance());
  ::message::_DoctorCallResponse_default_instance_._instance.get_mutable()->diagnosis_info_ = const_cast< ::message::DiagnosisInfoResponse*>(
      ::message::DiagnosisInfoResponse::internal_default_instance());
}
class DoctorCallResponse::HasBitSetters {
 public:
  static const ::message::PatientBaseInfo& patient_info(const DoctorCallResponse* msg);
  static const ::message::DiagnosisInfoResponse& diagnosis_info(const DoctorCallResponse* msg);
};

const ::message::PatientBaseInfo&
DoctorCallResponse::HasBitSetters::patient_info(const DoctorCallResponse* msg) {
  return *msg->patient_info_;
}
const ::message::DiagnosisInfoResponse&
DoctorCallResponse::HasBitSetters::diagnosis_info(const DoctorCallResponse* msg) {
  return *msg->diagnosis_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorCallResponse::kResFieldNumber;
const int DoctorCallResponse::kRegisterIdFieldNumber;
const int DoctorCallResponse::kNowIdFieldNumber;
const int DoctorCallResponse::kNextIdFieldNumber;
const int DoctorCallResponse::kNowFieldNumber;
const int DoctorCallResponse::kNextFieldNumber;
const int DoctorCallResponse::kDiagnosisIdFieldNumber;
const int DoctorCallResponse::kDiagnosisNameFieldNumber;
const int DoctorCallResponse::kPatientInfoFieldNumber;
const int DoctorCallResponse::kDiagnosisInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorCallResponse::DoctorCallResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorCallResponse)
}
DoctorCallResponse::DoctorCallResponse(const DoctorCallResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.res().size() > 0) {
    res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  now_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.now_id().size() > 0) {
    now_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.now_id_);
  }
  next_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.next_id().size() > 0) {
    next_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_id_);
  }
  now_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.now().size() > 0) {
    now_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.now_);
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.next().size() > 0) {
    next_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_);
  }
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  diagnosis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_name().size() > 0) {
    diagnosis_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_name_);
  }
  if (from.has_patient_info()) {
    patient_info_ = new ::message::PatientBaseInfo(*from.patient_info_);
  } else {
    patient_info_ = nullptr;
  }
  if (from.has_diagnosis_info()) {
    diagnosis_info_ = new ::message::DiagnosisInfoResponse(*from.diagnosis_info_);
  } else {
    diagnosis_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorCallResponse)
}

void DoctorCallResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorCallResponse_TogetherCall_2eproto.base);
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&patient_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diagnosis_info_) -
      reinterpret_cast<char*>(&patient_info_)) + sizeof(diagnosis_info_));
}

DoctorCallResponse::~DoctorCallResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorCallResponse)
  SharedDtor();
}

void DoctorCallResponse::SharedDtor() {
  res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete patient_info_;
  if (this != internal_default_instance()) delete diagnosis_info_;
}

void DoctorCallResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorCallResponse& DoctorCallResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorCallResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorCallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorCallResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && patient_info_ != nullptr) {
    delete patient_info_;
  }
  patient_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && diagnosis_info_ != nullptr) {
    delete diagnosis_info_;
  }
  diagnosis_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorCallResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string res = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_res(), ptr, ctx, "message.DoctorCallResponse.res");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DoctorCallResponse.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string now_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_now_id(), ptr, ctx, "message.DoctorCallResponse.now_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string next_id = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_next_id(), ptr, ctx, "message.DoctorCallResponse.next_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string now = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_now(), ptr, ctx, "message.DoctorCallResponse.now");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string next = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_next(), ptr, ctx, "message.DoctorCallResponse.next");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string diagnosis_id = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DoctorCallResponse.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string diagnosis_name = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_name(), ptr, ctx, "message.DoctorCallResponse.diagnosis_name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .message.PatientBaseInfo patient_info = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_patient_info(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .message.DiagnosisInfoResponse diagnosis_info = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 82) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_diagnosis_info(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorCallResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorCallResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string res = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->res().data(), static_cast<int>(this->res().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCallResponse.res"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCallResponse.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string now_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_now_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->now_id().data(), static_cast<int>(this->now_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCallResponse.now_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_next_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->next_id().data(), static_cast<int>(this->next_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCallResponse.next_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string now = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_now()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->now().data(), static_cast<int>(this->now().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCallResponse.now"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_next()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->next().data(), static_cast<int>(this->next().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCallResponse.next"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diagnosis_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCallResponse.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diagnosis_name = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_name().data(), static_cast<int>(this->diagnosis_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCallResponse.diagnosis_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.PatientBaseInfo patient_info = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_patient_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.DiagnosisInfoResponse diagnosis_info = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_diagnosis_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorCallResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorCallResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorCallResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorCallResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string res = 1;
  if (this->res().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->res().data(), static_cast<int>(this->res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.res");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->res(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string now_id = 3;
  if (this->now_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->now_id().data(), static_cast<int>(this->now_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.now_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->now_id(), output);
  }

  // string next_id = 4;
  if (this->next_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next_id().data(), static_cast<int>(this->next_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.next_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->next_id(), output);
  }

  // string now = 5;
  if (this->now().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->now().data(), static_cast<int>(this->now().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.now");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->now(), output);
  }

  // string next = 6;
  if (this->next().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next().data(), static_cast<int>(this->next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.next");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->next(), output);
  }

  // string diagnosis_id = 7;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->diagnosis_id(), output);
  }

  // string diagnosis_name = 8;
  if (this->diagnosis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_name().data(), static_cast<int>(this->diagnosis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.diagnosis_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->diagnosis_name(), output);
  }

  // .message.PatientBaseInfo patient_info = 9;
  if (this->has_patient_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::patient_info(this), output);
  }

  // .message.DiagnosisInfoResponse diagnosis_info = 10;
  if (this->has_diagnosis_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::diagnosis_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorCallResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorCallResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorCallResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string res = 1;
  if (this->res().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->res().data(), static_cast<int>(this->res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.res");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->res(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string now_id = 3;
  if (this->now_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->now_id().data(), static_cast<int>(this->now_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.now_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->now_id(), target);
  }

  // string next_id = 4;
  if (this->next_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next_id().data(), static_cast<int>(this->next_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.next_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->next_id(), target);
  }

  // string now = 5;
  if (this->now().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->now().data(), static_cast<int>(this->now().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.now");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->now(), target);
  }

  // string next = 6;
  if (this->next().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next().data(), static_cast<int>(this->next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.next");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->next(), target);
  }

  // string diagnosis_id = 7;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->diagnosis_id(), target);
  }

  // string diagnosis_name = 8;
  if (this->diagnosis_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_name().data(), static_cast<int>(this->diagnosis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCallResponse.diagnosis_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->diagnosis_name(), target);
  }

  // .message.PatientBaseInfo patient_info = 9;
  if (this->has_patient_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::patient_info(this), target);
  }

  // .message.DiagnosisInfoResponse diagnosis_info = 10;
  if (this->has_diagnosis_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::diagnosis_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorCallResponse)
  return target;
}

size_t DoctorCallResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorCallResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res = 1;
  if (this->res().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->res());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string now_id = 3;
  if (this->now_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->now_id());
  }

  // string next_id = 4;
  if (this->next_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->next_id());
  }

  // string now = 5;
  if (this->now().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->now());
  }

  // string next = 6;
  if (this->next().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->next());
  }

  // string diagnosis_id = 7;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string diagnosis_name = 8;
  if (this->diagnosis_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_name());
  }

  // .message.PatientBaseInfo patient_info = 9;
  if (this->has_patient_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_info_);
  }

  // .message.DiagnosisInfoResponse diagnosis_info = 10;
  if (this->has_diagnosis_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diagnosis_info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorCallResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorCallResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorCallResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorCallResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorCallResponse)
    MergeFrom(*source);
  }
}

void DoctorCallResponse::MergeFrom(const DoctorCallResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.res().size() > 0) {

    res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.now_id().size() > 0) {

    now_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.now_id_);
  }
  if (from.next_id().size() > 0) {

    next_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_id_);
  }
  if (from.now().size() > 0) {

    now_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.now_);
  }
  if (from.next().size() > 0) {

    next_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_);
  }
  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.diagnosis_name().size() > 0) {

    diagnosis_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_name_);
  }
  if (from.has_patient_info()) {
    mutable_patient_info()->::message::PatientBaseInfo::MergeFrom(from.patient_info());
  }
  if (from.has_diagnosis_info()) {
    mutable_diagnosis_info()->::message::DiagnosisInfoResponse::MergeFrom(from.diagnosis_info());
  }
}

void DoctorCallResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorCallResponse::CopyFrom(const DoctorCallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorCallResponse::IsInitialized() const {
  return true;
}

void DoctorCallResponse::Swap(DoctorCallResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorCallResponse::InternalSwap(DoctorCallResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  res_.Swap(&other->res_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  now_id_.Swap(&other->now_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_id_.Swap(&other->next_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  now_.Swap(&other->now_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diagnosis_name_.Swap(&other->diagnosis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(patient_info_, other->patient_info_);
  swap(diagnosis_info_, other->diagnosis_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorCallResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisAcceptCallPush::InitAsDefaultInstance() {
  ::message::_DiagnosisAcceptCallPush_default_instance_._instance.get_mutable()->patient_info_ = const_cast< ::message::PatientBaseInfo*>(
      ::message::PatientBaseInfo::internal_default_instance());
  ::message::_DiagnosisAcceptCallPush_default_instance_._instance.get_mutable()->doctor_info_ = const_cast< ::message::DoctorInfoResponse*>(
      ::message::DoctorInfoResponse::internal_default_instance());
}
class DiagnosisAcceptCallPush::HasBitSetters {
 public:
  static const ::message::PatientBaseInfo& patient_info(const DiagnosisAcceptCallPush* msg);
  static const ::message::DoctorInfoResponse& doctor_info(const DiagnosisAcceptCallPush* msg);
};

const ::message::PatientBaseInfo&
DiagnosisAcceptCallPush::HasBitSetters::patient_info(const DiagnosisAcceptCallPush* msg) {
  return *msg->patient_info_;
}
const ::message::DoctorInfoResponse&
DiagnosisAcceptCallPush::HasBitSetters::doctor_info(const DiagnosisAcceptCallPush* msg) {
  return *msg->doctor_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisAcceptCallPush::kRegisterIdFieldNumber;
const int DiagnosisAcceptCallPush::kNowIdFieldNumber;
const int DiagnosisAcceptCallPush::kNextIdFieldNumber;
const int DiagnosisAcceptCallPush::kNowFieldNumber;
const int DiagnosisAcceptCallPush::kNextFieldNumber;
const int DiagnosisAcceptCallPush::kDoctorIdFieldNumber;
const int DiagnosisAcceptCallPush::kDoctorNameFieldNumber;
const int DiagnosisAcceptCallPush::kPatientInfoFieldNumber;
const int DiagnosisAcceptCallPush::kDoctorInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisAcceptCallPush::DiagnosisAcceptCallPush()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisAcceptCallPush)
}
DiagnosisAcceptCallPush::DiagnosisAcceptCallPush(const DiagnosisAcceptCallPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  now_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.now_id().size() > 0) {
    now_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.now_id_);
  }
  next_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.next_id().size() > 0) {
    next_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_id_);
  }
  now_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.now().size() > 0) {
    now_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.now_);
  }
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.next().size() > 0) {
    next_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_);
  }
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  doctor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_name().size() > 0) {
    doctor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_name_);
  }
  if (from.has_patient_info()) {
    patient_info_ = new ::message::PatientBaseInfo(*from.patient_info_);
  } else {
    patient_info_ = nullptr;
  }
  if (from.has_doctor_info()) {
    doctor_info_ = new ::message::DoctorInfoResponse(*from.doctor_info_);
  } else {
    doctor_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisAcceptCallPush)
}

void DiagnosisAcceptCallPush::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisAcceptCallPush_TogetherCall_2eproto.base);
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&patient_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doctor_info_) -
      reinterpret_cast<char*>(&patient_info_)) + sizeof(doctor_info_));
}

DiagnosisAcceptCallPush::~DiagnosisAcceptCallPush() {
  // @@protoc_insertion_point(destructor:message.DiagnosisAcceptCallPush)
  SharedDtor();
}

void DiagnosisAcceptCallPush::SharedDtor() {
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete patient_info_;
  if (this != internal_default_instance()) delete doctor_info_;
}

void DiagnosisAcceptCallPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisAcceptCallPush& DiagnosisAcceptCallPush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisAcceptCallPush_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisAcceptCallPush::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisAcceptCallPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  now_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  next_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && patient_info_ != nullptr) {
    delete patient_info_;
  }
  patient_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && doctor_info_ != nullptr) {
    delete doctor_info_;
  }
  doctor_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisAcceptCallPush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string register_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DiagnosisAcceptCallPush.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string now_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_now_id(), ptr, ctx, "message.DiagnosisAcceptCallPush.now_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string next_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_next_id(), ptr, ctx, "message.DiagnosisAcceptCallPush.next_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string now = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_now(), ptr, ctx, "message.DiagnosisAcceptCallPush.now");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string next = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_next(), ptr, ctx, "message.DiagnosisAcceptCallPush.next");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_id = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DiagnosisAcceptCallPush.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_name = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_name(), ptr, ctx, "message.DiagnosisAcceptCallPush.doctor_name");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .message.PatientBaseInfo patient_info = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_patient_info(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .message.DoctorInfoResponse doctor_info = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_doctor_info(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisAcceptCallPush::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisAcceptCallPush)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string register_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisAcceptCallPush.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string now_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_now_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->now_id().data(), static_cast<int>(this->now_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisAcceptCallPush.now_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_next_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->next_id().data(), static_cast<int>(this->next_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisAcceptCallPush.next_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string now = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_now()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->now().data(), static_cast<int>(this->now().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisAcceptCallPush.now"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_next()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->next().data(), static_cast<int>(this->next().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisAcceptCallPush.next"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisAcceptCallPush.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_name().data(), static_cast<int>(this->doctor_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisAcceptCallPush.doctor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.PatientBaseInfo patient_info = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_patient_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .message.DoctorInfoResponse doctor_info = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_doctor_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisAcceptCallPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisAcceptCallPush)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisAcceptCallPush::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisAcceptCallPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string register_id = 1;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->register_id(), output);
  }

  // string now_id = 2;
  if (this->now_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->now_id().data(), static_cast<int>(this->now_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.now_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->now_id(), output);
  }

  // string next_id = 3;
  if (this->next_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next_id().data(), static_cast<int>(this->next_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.next_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_id(), output);
  }

  // string now = 4;
  if (this->now().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->now().data(), static_cast<int>(this->now().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.now");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->now(), output);
  }

  // string next = 5;
  if (this->next().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next().data(), static_cast<int>(this->next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.next");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->next(), output);
  }

  // string doctor_id = 6;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->doctor_id(), output);
  }

  // string doctor_name = 7;
  if (this->doctor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_name().data(), static_cast<int>(this->doctor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.doctor_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->doctor_name(), output);
  }

  // .message.PatientBaseInfo patient_info = 8;
  if (this->has_patient_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::patient_info(this), output);
  }

  // .message.DoctorInfoResponse doctor_info = 9;
  if (this->has_doctor_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::doctor_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisAcceptCallPush)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisAcceptCallPush::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisAcceptCallPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string register_id = 1;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->register_id(), target);
  }

  // string now_id = 2;
  if (this->now_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->now_id().data(), static_cast<int>(this->now_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.now_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->now_id(), target);
  }

  // string next_id = 3;
  if (this->next_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next_id().data(), static_cast<int>(this->next_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.next_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->next_id(), target);
  }

  // string now = 4;
  if (this->now().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->now().data(), static_cast<int>(this->now().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.now");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->now(), target);
  }

  // string next = 5;
  if (this->next().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->next().data(), static_cast<int>(this->next().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.next");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->next(), target);
  }

  // string doctor_id = 6;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->doctor_id(), target);
  }

  // string doctor_name = 7;
  if (this->doctor_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_name().data(), static_cast<int>(this->doctor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisAcceptCallPush.doctor_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->doctor_name(), target);
  }

  // .message.PatientBaseInfo patient_info = 8;
  if (this->has_patient_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::patient_info(this), target);
  }

  // .message.DoctorInfoResponse doctor_info = 9;
  if (this->has_doctor_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::doctor_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisAcceptCallPush)
  return target;
}

size_t DiagnosisAcceptCallPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisAcceptCallPush)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string register_id = 1;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string now_id = 2;
  if (this->now_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->now_id());
  }

  // string next_id = 3;
  if (this->next_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->next_id());
  }

  // string now = 4;
  if (this->now().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->now());
  }

  // string next = 5;
  if (this->next().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->next());
  }

  // string doctor_id = 6;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string doctor_name = 7;
  if (this->doctor_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_name());
  }

  // .message.PatientBaseInfo patient_info = 8;
  if (this->has_patient_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patient_info_);
  }

  // .message.DoctorInfoResponse doctor_info = 9;
  if (this->has_doctor_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *doctor_info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisAcceptCallPush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisAcceptCallPush)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisAcceptCallPush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisAcceptCallPush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisAcceptCallPush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisAcceptCallPush)
    MergeFrom(*source);
  }
}

void DiagnosisAcceptCallPush::MergeFrom(const DiagnosisAcceptCallPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisAcceptCallPush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.now_id().size() > 0) {

    now_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.now_id_);
  }
  if (from.next_id().size() > 0) {

    next_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_id_);
  }
  if (from.now().size() > 0) {

    now_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.now_);
  }
  if (from.next().size() > 0) {

    next_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.next_);
  }
  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.doctor_name().size() > 0) {

    doctor_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_name_);
  }
  if (from.has_patient_info()) {
    mutable_patient_info()->::message::PatientBaseInfo::MergeFrom(from.patient_info());
  }
  if (from.has_doctor_info()) {
    mutable_doctor_info()->::message::DoctorInfoResponse::MergeFrom(from.doctor_info());
  }
}

void DiagnosisAcceptCallPush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisAcceptCallPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisAcceptCallPush::CopyFrom(const DiagnosisAcceptCallPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisAcceptCallPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisAcceptCallPush::IsInitialized() const {
  return true;
}

void DiagnosisAcceptCallPush::Swap(DiagnosisAcceptCallPush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisAcceptCallPush::InternalSwap(DiagnosisAcceptCallPush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  now_id_.Swap(&other->now_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_id_.Swap(&other->next_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  now_.Swap(&other->now_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_.Swap(&other->next_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_name_.Swap(&other->doctor_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(patient_info_, other->patient_info_);
  swap(doctor_info_, other->doctor_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisAcceptCallPush::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisResponseCallRequest::InitAsDefaultInstance() {
}
class DiagnosisResponseCallRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisResponseCallRequest::kResponseFieldNumber;
const int DiagnosisResponseCallRequest::kDoctorIdFieldNumber;
const int DiagnosisResponseCallRequest::kRegisterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisResponseCallRequest::DiagnosisResponseCallRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisResponseCallRequest)
}
DiagnosisResponseCallRequest::DiagnosisResponseCallRequest(const DiagnosisResponseCallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.response().size() > 0) {
    response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisResponseCallRequest)
}

void DiagnosisResponseCallRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisResponseCallRequest_TogetherCall_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisResponseCallRequest::~DiagnosisResponseCallRequest() {
  // @@protoc_insertion_point(destructor:message.DiagnosisResponseCallRequest)
  SharedDtor();
}

void DiagnosisResponseCallRequest::SharedDtor() {
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisResponseCallRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisResponseCallRequest& DiagnosisResponseCallRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisResponseCallRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisResponseCallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisResponseCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisResponseCallRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_response(), ptr, ctx, "message.DiagnosisResponseCallRequest.response");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DiagnosisResponseCallRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DiagnosisResponseCallRequest.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisResponseCallRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisResponseCallRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string response = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->response().data(), static_cast<int>(this->response().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisResponseCallRequest.response"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisResponseCallRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisResponseCallRequest.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisResponseCallRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisResponseCallRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisResponseCallRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisResponseCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallRequest.response");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->response(), output);
  }

  // string doctor_id = 2;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->doctor_id(), output);
  }

  // string register_id = 3;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallRequest.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->register_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisResponseCallRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisResponseCallRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisResponseCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallRequest.response");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }

  // string doctor_id = 2;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->doctor_id(), target);
  }

  // string register_id = 3;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallRequest.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->register_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisResponseCallRequest)
  return target;
}

size_t DiagnosisResponseCallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisResponseCallRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->response());
  }

  // string doctor_id = 2;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string register_id = 3;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisResponseCallRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisResponseCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisResponseCallRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisResponseCallRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisResponseCallRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisResponseCallRequest)
    MergeFrom(*source);
  }
}

void DiagnosisResponseCallRequest::MergeFrom(const DiagnosisResponseCallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisResponseCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {

    response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
}

void DiagnosisResponseCallRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisResponseCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisResponseCallRequest::CopyFrom(const DiagnosisResponseCallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisResponseCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisResponseCallRequest::IsInitialized() const {
  return true;
}

void DiagnosisResponseCallRequest::Swap(DiagnosisResponseCallRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisResponseCallRequest::InternalSwap(DiagnosisResponseCallRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisResponseCallRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisResponseCallResponse::InitAsDefaultInstance() {
}
class DiagnosisResponseCallResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisResponseCallResponse::kResponseFieldNumber;
const int DiagnosisResponseCallResponse::kRoomFieldNumber;
const int DiagnosisResponseCallResponse::kRegisterIdFieldNumber;
const int DiagnosisResponseCallResponse::kResultFieldNumber;
const int DiagnosisResponseCallResponse::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisResponseCallResponse::DiagnosisResponseCallResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisResponseCallResponse)
}
DiagnosisResponseCallResponse::DiagnosisResponseCallResponse(const DiagnosisResponseCallResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.response().size() > 0) {
    response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.room().size() > 0) {
    room_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.room_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisResponseCallResponse)
}

void DiagnosisResponseCallResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisResponseCallResponse_TogetherCall_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisResponseCallResponse::~DiagnosisResponseCallResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisResponseCallResponse)
  SharedDtor();
}

void DiagnosisResponseCallResponse::SharedDtor() {
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisResponseCallResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisResponseCallResponse& DiagnosisResponseCallResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisResponseCallResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisResponseCallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisResponseCallResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  room_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisResponseCallResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_response(), ptr, ctx, "message.DiagnosisResponseCallResponse.response");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string room = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_room(), ptr, ctx, "message.DiagnosisResponseCallResponse.room");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DiagnosisResponseCallResponse.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string result = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "message.DiagnosisResponseCallResponse.result");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reason = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reason(), ptr, ctx, "message.DiagnosisResponseCallResponse.reason");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisResponseCallResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisResponseCallResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string response = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->response().data(), static_cast<int>(this->response().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisResponseCallResponse.response"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->room().data(), static_cast<int>(this->room().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisResponseCallResponse.room"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisResponseCallResponse.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisResponseCallResponse.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisResponseCallResponse.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisResponseCallResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisResponseCallResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisResponseCallResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisResponseCallResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.response");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->response(), output);
  }

  // string room = 2;
  if (this->room().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->room().data(), static_cast<int>(this->room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.room");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room(), output);
  }

  // string register_id = 3;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->register_id(), output);
  }

  // string result = 4;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->result(), output);
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisResponseCallResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisResponseCallResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisResponseCallResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.response");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }

  // string room = 2;
  if (this->room().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->room().data(), static_cast<int>(this->room().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.room");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  // string register_id = 3;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->register_id(), target);
  }

  // string result = 4;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->result(), target);
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisResponseCallResponse.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisResponseCallResponse)
  return target;
}

size_t DiagnosisResponseCallResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisResponseCallResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->response());
  }

  // string room = 2;
  if (this->room().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->room());
  }

  // string register_id = 3;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string result = 4;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisResponseCallResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisResponseCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisResponseCallResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisResponseCallResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisResponseCallResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisResponseCallResponse)
    MergeFrom(*source);
  }
}

void DiagnosisResponseCallResponse::MergeFrom(const DiagnosisResponseCallResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisResponseCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {

    response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  if (from.room().size() > 0) {

    room_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.room_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void DiagnosisResponseCallResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisResponseCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisResponseCallResponse::CopyFrom(const DiagnosisResponseCallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisResponseCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisResponseCallResponse::IsInitialized() const {
  return true;
}

void DiagnosisResponseCallResponse::Swap(DiagnosisResponseCallResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisResponseCallResponse::InternalSwap(DiagnosisResponseCallResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  room_.Swap(&other->room_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisResponseCallResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorAcceptCallResultPush::InitAsDefaultInstance() {
}
class DoctorAcceptCallResultPush::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorAcceptCallResultPush::kResponseFieldNumber;
const int DoctorAcceptCallResultPush::kRegisterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorAcceptCallResultPush::DoctorAcceptCallResultPush()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorAcceptCallResultPush)
}
DoctorAcceptCallResultPush::DoctorAcceptCallResultPush(const DoctorAcceptCallResultPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.response().size() > 0) {
    response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorAcceptCallResultPush)
}

void DoctorAcceptCallResultPush::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorAcceptCallResultPush_TogetherCall_2eproto.base);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorAcceptCallResultPush::~DoctorAcceptCallResultPush() {
  // @@protoc_insertion_point(destructor:message.DoctorAcceptCallResultPush)
  SharedDtor();
}

void DoctorAcceptCallResultPush::SharedDtor() {
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorAcceptCallResultPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorAcceptCallResultPush& DoctorAcceptCallResultPush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorAcceptCallResultPush_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorAcceptCallResultPush::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorAcceptCallResultPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorAcceptCallResultPush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_response(), ptr, ctx, "message.DoctorAcceptCallResultPush.response");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DoctorAcceptCallResultPush.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorAcceptCallResultPush::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorAcceptCallResultPush)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string response = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->response().data(), static_cast<int>(this->response().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorAcceptCallResultPush.response"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorAcceptCallResultPush.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorAcceptCallResultPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorAcceptCallResultPush)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorAcceptCallResultPush::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorAcceptCallResultPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorAcceptCallResultPush.response");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->response(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorAcceptCallResultPush.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorAcceptCallResultPush)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorAcceptCallResultPush::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorAcceptCallResultPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->response().data(), static_cast<int>(this->response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorAcceptCallResultPush.response");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorAcceptCallResultPush.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorAcceptCallResultPush)
  return target;
}

size_t DoctorAcceptCallResultPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorAcceptCallResultPush)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->response());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorAcceptCallResultPush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorAcceptCallResultPush)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorAcceptCallResultPush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorAcceptCallResultPush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorAcceptCallResultPush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorAcceptCallResultPush)
    MergeFrom(*source);
  }
}

void DoctorAcceptCallResultPush::MergeFrom(const DoctorAcceptCallResultPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorAcceptCallResultPush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {

    response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
}

void DoctorAcceptCallResultPush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorAcceptCallResultPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorAcceptCallResultPush::CopyFrom(const DoctorAcceptCallResultPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorAcceptCallResultPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorAcceptCallResultPush::IsInitialized() const {
  return true;
}

void DoctorAcceptCallResultPush::Swap(DoctorAcceptCallResultPush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorAcceptCallResultPush::InternalSwap(DoctorAcceptCallResultPush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorAcceptCallResultPush::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorSurePassRequest::InitAsDefaultInstance() {
}
class DoctorSurePassRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorSurePassRequest::kDoctorIdFieldNumber;
const int DoctorSurePassRequest::kRegisterIdFieldNumber;
const int DoctorSurePassRequest::kWaitTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorSurePassRequest::DoctorSurePassRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorSurePassRequest)
}
DoctorSurePassRequest::DoctorSurePassRequest(const DoctorSurePassRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  wait_time_ = from.wait_time_;
  // @@protoc_insertion_point(copy_constructor:message.DoctorSurePassRequest)
}

void DoctorSurePassRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorSurePassRequest_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wait_time_ = 0;
}

DoctorSurePassRequest::~DoctorSurePassRequest() {
  // @@protoc_insertion_point(destructor:message.DoctorSurePassRequest)
  SharedDtor();
}

void DoctorSurePassRequest::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorSurePassRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorSurePassRequest& DoctorSurePassRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorSurePassRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorSurePassRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorSurePassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wait_time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorSurePassRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorSurePassRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DoctorSurePassRequest.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // sint32 wait_time = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        set_wait_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorSurePassRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorSurePassRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassRequest.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 wait_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorSurePassRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorSurePassRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorSurePassRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorSurePassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassRequest.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // sint32 wait_time = 3;
  if (this->wait_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(3, this->wait_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorSurePassRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorSurePassRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorSurePassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassRequest.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // sint32 wait_time = 3;
  if (this->wait_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->wait_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorSurePassRequest)
  return target;
}

size_t DoctorSurePassRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorSurePassRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // sint32 wait_time = 3;
  if (this->wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->wait_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorSurePassRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorSurePassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorSurePassRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorSurePassRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorSurePassRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorSurePassRequest)
    MergeFrom(*source);
  }
}

void DoctorSurePassRequest::MergeFrom(const DoctorSurePassRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorSurePassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.wait_time() != 0) {
    set_wait_time(from.wait_time());
  }
}

void DoctorSurePassRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorSurePassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorSurePassRequest::CopyFrom(const DoctorSurePassRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorSurePassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorSurePassRequest::IsInitialized() const {
  return true;
}

void DoctorSurePassRequest::Swap(DoctorSurePassRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorSurePassRequest::InternalSwap(DoctorSurePassRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(wait_time_, other->wait_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorSurePassRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorSurePassResponse::InitAsDefaultInstance() {
}
class DoctorSurePassResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorSurePassResponse::kDatetimeFieldNumber;
const int DoctorSurePassResponse::kRegisterIdFieldNumber;
const int DoctorSurePassResponse::kDoctorIdFieldNumber;
const int DoctorSurePassResponse::kResultFieldNumber;
const int DoctorSurePassResponse::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorSurePassResponse::DoctorSurePassResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorSurePassResponse)
}
DoctorSurePassResponse::DoctorSurePassResponse(const DoctorSurePassResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorSurePassResponse)
}

void DoctorSurePassResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorSurePassResponse_TogetherCall_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorSurePassResponse::~DoctorSurePassResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorSurePassResponse)
  SharedDtor();
}

void DoctorSurePassResponse::SharedDtor() {
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorSurePassResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorSurePassResponse& DoctorSurePassResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorSurePassResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorSurePassResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorSurePassResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorSurePassResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string datetime = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DoctorSurePassResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DoctorSurePassResponse.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorSurePassResponse.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string result = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "message.DoctorSurePassResponse.result");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reason = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reason(), ptr, ctx, "message.DoctorSurePassResponse.reason");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorSurePassResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorSurePassResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string datetime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassResponse.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassResponse.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassResponse.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassResponse.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorSurePassResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorSurePassResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorSurePassResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorSurePassResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->datetime(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->doctor_id(), output);
  }

  // string result = 4;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->result(), output);
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorSurePassResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorSurePassResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorSurePassResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->datetime(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->doctor_id(), target);
  }

  // string result = 4;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->result(), target);
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassResponse.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorSurePassResponse)
  return target;
}

size_t DoctorSurePassResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorSurePassResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string result = 4;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string reason = 5;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorSurePassResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorSurePassResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorSurePassResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorSurePassResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorSurePassResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorSurePassResponse)
    MergeFrom(*source);
  }
}

void DoctorSurePassResponse::MergeFrom(const DoctorSurePassResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorSurePassResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void DoctorSurePassResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorSurePassResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorSurePassResponse::CopyFrom(const DoctorSurePassResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorSurePassResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorSurePassResponse::IsInitialized() const {
  return true;
}

void DoctorSurePassResponse::Swap(DoctorSurePassResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorSurePassResponse::InternalSwap(DoctorSurePassResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorSurePassResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorSurePassPush::InitAsDefaultInstance() {
}
class DoctorSurePassPush::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorSurePassPush::kDatetimeFieldNumber;
const int DoctorSurePassPush::kRegisterIdFieldNumber;
const int DoctorSurePassPush::kDoctorIdFieldNumber;
const int DoctorSurePassPush::kPatientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorSurePassPush::DoctorSurePassPush()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorSurePassPush)
}
DoctorSurePassPush::DoctorSurePassPush(const DoctorSurePassPush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorSurePassPush)
}

void DoctorSurePassPush::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorSurePassPush_TogetherCall_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorSurePassPush::~DoctorSurePassPush() {
  // @@protoc_insertion_point(destructor:message.DoctorSurePassPush)
  SharedDtor();
}

void DoctorSurePassPush::SharedDtor() {
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorSurePassPush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorSurePassPush& DoctorSurePassPush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorSurePassPush_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorSurePassPush::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorSurePassPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorSurePassPush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string datetime = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DoctorSurePassPush.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DoctorSurePassPush.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorSurePassPush.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DoctorSurePassPush.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorSurePassPush::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorSurePassPush)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string datetime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassPush.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassPush.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassPush.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorSurePassPush.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorSurePassPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorSurePassPush)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorSurePassPush::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorSurePassPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassPush.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->datetime(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassPush.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassPush.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->doctor_id(), output);
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassPush.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->patient_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorSurePassPush)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorSurePassPush::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorSurePassPush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassPush.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->datetime(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassPush.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassPush.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->doctor_id(), target);
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorSurePassPush.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->patient_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorSurePassPush)
  return target;
}

size_t DoctorSurePassPush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorSurePassPush)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string datetime = 1;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorSurePassPush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorSurePassPush)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorSurePassPush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorSurePassPush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorSurePassPush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorSurePassPush)
    MergeFrom(*source);
  }
}

void DoctorSurePassPush::MergeFrom(const DoctorSurePassPush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorSurePassPush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
}

void DoctorSurePassPush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorSurePassPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorSurePassPush::CopyFrom(const DoctorSurePassPush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorSurePassPush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorSurePassPush::IsInitialized() const {
  return true;
}

void DoctorSurePassPush::Swap(DoctorSurePassPush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorSurePassPush::InternalSwap(DoctorSurePassPush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorSurePassPush::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorStopRequest::InitAsDefaultInstance() {
}
class DoctorStopRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorStopRequest::kDoctorIdFieldNumber;
const int DoctorStopRequest::kRegisterIdFieldNumber;
const int DoctorStopRequest::kPatientIdFieldNumber;
const int DoctorStopRequest::kDiagnosisIdFieldNumber;
const int DoctorStopRequest::kDatetimeFieldNumber;
const int DoctorStopRequest::kTreatMainFieldNumber;
const int DoctorStopRequest::kTreatProposeFieldNumber;
const int DoctorStopRequest::kDealProposeFieldNumber;
const int DoctorStopRequest::kPrescriptProposeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorStopRequest::DoctorStopRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorStopRequest)
}
DoctorStopRequest::DoctorStopRequest(const DoctorStopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  treat_main_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.treat_main().size() > 0) {
    treat_main_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.treat_main_);
  }
  treat_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.treat_propose().size() > 0) {
    treat_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.treat_propose_);
  }
  deal_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.deal_propose().size() > 0) {
    deal_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deal_propose_);
  }
  prescript_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.prescript_propose().size() > 0) {
    prescript_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prescript_propose_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorStopRequest)
}

void DoctorStopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorStopRequest_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_main_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deal_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prescript_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorStopRequest::~DoctorStopRequest() {
  // @@protoc_insertion_point(destructor:message.DoctorStopRequest)
  SharedDtor();
}

void DoctorStopRequest::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_main_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_propose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deal_propose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prescript_propose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorStopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorStopRequest& DoctorStopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorStopRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorStopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_main_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deal_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prescript_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorStopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorStopRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DoctorStopRequest.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DoctorStopRequest.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string diagnosis_id = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DoctorStopRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DoctorStopRequest.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string treat_main = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_treat_main(), ptr, ctx, "message.DoctorStopRequest.treat_main");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string treat_propose = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_treat_propose(), ptr, ctx, "message.DoctorStopRequest.treat_propose");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string deal_propose = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deal_propose(), ptr, ctx, "message.DoctorStopRequest.deal_propose");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string prescript_propose = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_prescript_propose(), ptr, ctx, "message.DoctorStopRequest.prescript_propose");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorStopRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorStopRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diagnosis_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string treat_main = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_treat_main()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->treat_main().data(), static_cast<int>(this->treat_main().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.treat_main"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string treat_propose = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_treat_propose()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->treat_propose().data(), static_cast<int>(this->treat_propose().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.treat_propose"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deal_propose = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deal_propose()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deal_propose().data(), static_cast<int>(this->deal_propose().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.deal_propose"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prescript_propose = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_prescript_propose()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->prescript_propose().data(), static_cast<int>(this->prescript_propose().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopRequest.prescript_propose"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorStopRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorStopRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorStopRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patient_id(), output);
  }

  // string diagnosis_id = 4;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->diagnosis_id(), output);
  }

  // string datetime = 5;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->datetime(), output);
  }

  // string treat_main = 6;
  if (this->treat_main().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->treat_main().data(), static_cast<int>(this->treat_main().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.treat_main");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->treat_main(), output);
  }

  // string treat_propose = 7;
  if (this->treat_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->treat_propose().data(), static_cast<int>(this->treat_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.treat_propose");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->treat_propose(), output);
  }

  // string deal_propose = 8;
  if (this->deal_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deal_propose().data(), static_cast<int>(this->deal_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.deal_propose");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->deal_propose(), output);
  }

  // string prescript_propose = 9;
  if (this->prescript_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prescript_propose().data(), static_cast<int>(this->prescript_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.prescript_propose");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->prescript_propose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorStopRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorStopRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorStopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->patient_id(), target);
  }

  // string diagnosis_id = 4;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->diagnosis_id(), target);
  }

  // string datetime = 5;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->datetime(), target);
  }

  // string treat_main = 6;
  if (this->treat_main().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->treat_main().data(), static_cast<int>(this->treat_main().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.treat_main");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->treat_main(), target);
  }

  // string treat_propose = 7;
  if (this->treat_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->treat_propose().data(), static_cast<int>(this->treat_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.treat_propose");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->treat_propose(), target);
  }

  // string deal_propose = 8;
  if (this->deal_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deal_propose().data(), static_cast<int>(this->deal_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.deal_propose");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->deal_propose(), target);
  }

  // string prescript_propose = 9;
  if (this->prescript_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prescript_propose().data(), static_cast<int>(this->prescript_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopRequest.prescript_propose");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->prescript_propose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorStopRequest)
  return target;
}

size_t DoctorStopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorStopRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  // string diagnosis_id = 4;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string datetime = 5;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  // string treat_main = 6;
  if (this->treat_main().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->treat_main());
  }

  // string treat_propose = 7;
  if (this->treat_propose().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->treat_propose());
  }

  // string deal_propose = 8;
  if (this->deal_propose().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deal_propose());
  }

  // string prescript_propose = 9;
  if (this->prescript_propose().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->prescript_propose());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorStopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorStopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorStopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorStopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorStopRequest)
    MergeFrom(*source);
  }
}

void DoctorStopRequest::MergeFrom(const DoctorStopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorStopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  if (from.treat_main().size() > 0) {

    treat_main_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.treat_main_);
  }
  if (from.treat_propose().size() > 0) {

    treat_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.treat_propose_);
  }
  if (from.deal_propose().size() > 0) {

    deal_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deal_propose_);
  }
  if (from.prescript_propose().size() > 0) {

    prescript_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prescript_propose_);
  }
}

void DoctorStopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorStopRequest::CopyFrom(const DoctorStopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorStopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorStopRequest::IsInitialized() const {
  return true;
}

void DoctorStopRequest::Swap(DoctorStopRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorStopRequest::InternalSwap(DoctorStopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  treat_main_.Swap(&other->treat_main_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  treat_propose_.Swap(&other->treat_propose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deal_propose_.Swap(&other->deal_propose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prescript_propose_.Swap(&other->prescript_propose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorStopRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorCompletePush::InitAsDefaultInstance() {
}
class DoctorCompletePush::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorCompletePush::kDoctorIdFieldNumber;
const int DoctorCompletePush::kTreatMainFieldNumber;
const int DoctorCompletePush::kTreatProposeFieldNumber;
const int DoctorCompletePush::kDealProposeFieldNumber;
const int DoctorCompletePush::kPrescriptProposeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorCompletePush::DoctorCompletePush()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorCompletePush)
}
DoctorCompletePush::DoctorCompletePush(const DoctorCompletePush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  treat_main_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.treat_main().size() > 0) {
    treat_main_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.treat_main_);
  }
  treat_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.treat_propose().size() > 0) {
    treat_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.treat_propose_);
  }
  deal_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.deal_propose().size() > 0) {
    deal_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deal_propose_);
  }
  prescript_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.prescript_propose().size() > 0) {
    prescript_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prescript_propose_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorCompletePush)
}

void DoctorCompletePush::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorCompletePush_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_main_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deal_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prescript_propose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorCompletePush::~DoctorCompletePush() {
  // @@protoc_insertion_point(destructor:message.DoctorCompletePush)
  SharedDtor();
}

void DoctorCompletePush::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_main_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_propose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deal_propose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prescript_propose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorCompletePush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorCompletePush& DoctorCompletePush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorCompletePush_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorCompletePush::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorCompletePush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_main_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  treat_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deal_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prescript_propose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorCompletePush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorCompletePush.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string treat_main = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_treat_main(), ptr, ctx, "message.DoctorCompletePush.treat_main");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string treat_propose = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_treat_propose(), ptr, ctx, "message.DoctorCompletePush.treat_propose");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string deal_propose = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deal_propose(), ptr, ctx, "message.DoctorCompletePush.deal_propose");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string prescript_propose = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_prescript_propose(), ptr, ctx, "message.DoctorCompletePush.prescript_propose");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorCompletePush::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorCompletePush)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompletePush.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string treat_main = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_treat_main()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->treat_main().data(), static_cast<int>(this->treat_main().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompletePush.treat_main"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string treat_propose = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_treat_propose()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->treat_propose().data(), static_cast<int>(this->treat_propose().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompletePush.treat_propose"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deal_propose = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deal_propose()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deal_propose().data(), static_cast<int>(this->deal_propose().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompletePush.deal_propose"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prescript_propose = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_prescript_propose()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->prescript_propose().data(), static_cast<int>(this->prescript_propose().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompletePush.prescript_propose"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorCompletePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorCompletePush)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorCompletePush::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorCompletePush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string treat_main = 2;
  if (this->treat_main().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->treat_main().data(), static_cast<int>(this->treat_main().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.treat_main");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->treat_main(), output);
  }

  // string treat_propose = 3;
  if (this->treat_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->treat_propose().data(), static_cast<int>(this->treat_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.treat_propose");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->treat_propose(), output);
  }

  // string deal_propose = 4;
  if (this->deal_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deal_propose().data(), static_cast<int>(this->deal_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.deal_propose");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deal_propose(), output);
  }

  // string prescript_propose = 5;
  if (this->prescript_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prescript_propose().data(), static_cast<int>(this->prescript_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.prescript_propose");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->prescript_propose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorCompletePush)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorCompletePush::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorCompletePush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string treat_main = 2;
  if (this->treat_main().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->treat_main().data(), static_cast<int>(this->treat_main().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.treat_main");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->treat_main(), target);
  }

  // string treat_propose = 3;
  if (this->treat_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->treat_propose().data(), static_cast<int>(this->treat_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.treat_propose");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->treat_propose(), target);
  }

  // string deal_propose = 4;
  if (this->deal_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deal_propose().data(), static_cast<int>(this->deal_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.deal_propose");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->deal_propose(), target);
  }

  // string prescript_propose = 5;
  if (this->prescript_propose().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prescript_propose().data(), static_cast<int>(this->prescript_propose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompletePush.prescript_propose");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->prescript_propose(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorCompletePush)
  return target;
}

size_t DoctorCompletePush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorCompletePush)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string treat_main = 2;
  if (this->treat_main().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->treat_main());
  }

  // string treat_propose = 3;
  if (this->treat_propose().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->treat_propose());
  }

  // string deal_propose = 4;
  if (this->deal_propose().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deal_propose());
  }

  // string prescript_propose = 5;
  if (this->prescript_propose().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->prescript_propose());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorCompletePush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorCompletePush)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorCompletePush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorCompletePush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorCompletePush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorCompletePush)
    MergeFrom(*source);
  }
}

void DoctorCompletePush::MergeFrom(const DoctorCompletePush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorCompletePush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.treat_main().size() > 0) {

    treat_main_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.treat_main_);
  }
  if (from.treat_propose().size() > 0) {

    treat_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.treat_propose_);
  }
  if (from.deal_propose().size() > 0) {

    deal_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deal_propose_);
  }
  if (from.prescript_propose().size() > 0) {

    prescript_propose_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prescript_propose_);
  }
}

void DoctorCompletePush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorCompletePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorCompletePush::CopyFrom(const DoctorCompletePush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorCompletePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorCompletePush::IsInitialized() const {
  return true;
}

void DoctorCompletePush::Swap(DoctorCompletePush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorCompletePush::InternalSwap(DoctorCompletePush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  treat_main_.Swap(&other->treat_main_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  treat_propose_.Swap(&other->treat_propose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deal_propose_.Swap(&other->deal_propose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prescript_propose_.Swap(&other->prescript_propose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorCompletePush::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorStopResponse::InitAsDefaultInstance() {
}
class DoctorStopResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorStopResponse::kResultFieldNumber;
const int DoctorStopResponse::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorStopResponse::DoctorStopResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorStopResponse)
}
DoctorStopResponse::DoctorStopResponse(const DoctorStopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorStopResponse)
}

void DoctorStopResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorStopResponse_TogetherCall_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorStopResponse::~DoctorStopResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorStopResponse)
  SharedDtor();
}

void DoctorStopResponse::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorStopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorStopResponse& DoctorStopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorStopResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorStopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorStopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string result = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_result(), ptr, ctx, "message.DoctorStopResponse.result");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reason = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reason(), ptr, ctx, "message.DoctorStopResponse.reason");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorStopResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorStopResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), static_cast<int>(this->result().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopResponse.result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorStopResponse.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorStopResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorStopResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorStopResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopResponse.result");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->result(), output);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopResponse.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorStopResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorStopResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorStopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), static_cast<int>(this->result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopResponse.result");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorStopResponse.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorStopResponse)
  return target;
}

size_t DoctorStopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorStopResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->result());
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorStopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorStopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorStopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorStopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorStopResponse)
    MergeFrom(*source);
  }
}

void DoctorStopResponse::MergeFrom(const DoctorStopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorStopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void DoctorStopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorStopResponse::CopyFrom(const DoctorStopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorStopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorStopResponse::IsInitialized() const {
  return true;
}

void DoctorStopResponse::Swap(DoctorStopResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorStopResponse::InternalSwap(DoctorStopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorStopResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorPauseRequest::InitAsDefaultInstance() {
}
class DoctorPauseRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorPauseRequest::kDoctorIdFieldNumber;
const int DoctorPauseRequest::kRegisterIdFieldNumber;
const int DoctorPauseRequest::kDiagnosisIdFieldNumber;
const int DoctorPauseRequest::kPatientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorPauseRequest::DoctorPauseRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorPauseRequest)
}
DoctorPauseRequest::DoctorPauseRequest(const DoctorPauseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorPauseRequest)
}

void DoctorPauseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorPauseRequest_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorPauseRequest::~DoctorPauseRequest() {
  // @@protoc_insertion_point(destructor:message.DoctorPauseRequest)
  SharedDtor();
}

void DoctorPauseRequest::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorPauseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorPauseRequest& DoctorPauseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorPauseRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorPauseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorPauseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorPauseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorPauseRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DoctorPauseRequest.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string diagnosis_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DoctorPauseRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DoctorPauseRequest.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorPauseRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorPauseRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorPauseRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorPauseRequest.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diagnosis_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorPauseRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorPauseRequest.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorPauseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorPauseRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorPauseRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorPauseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseRequest.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string diagnosis_id = 3;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->diagnosis_id(), output);
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseRequest.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->patient_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorPauseRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorPauseRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorPauseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseRequest.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string diagnosis_id = 3;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->diagnosis_id(), target);
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseRequest.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->patient_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorPauseRequest)
  return target;
}

size_t DoctorPauseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorPauseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string diagnosis_id = 3;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorPauseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorPauseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorPauseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorPauseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorPauseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorPauseRequest)
    MergeFrom(*source);
  }
}

void DoctorPauseRequest::MergeFrom(const DoctorPauseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorPauseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
}

void DoctorPauseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorPauseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorPauseRequest::CopyFrom(const DoctorPauseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorPauseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorPauseRequest::IsInitialized() const {
  return true;
}

void DoctorPauseRequest::Swap(DoctorPauseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorPauseRequest::InternalSwap(DoctorPauseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorPauseRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorPauseResponse::InitAsDefaultInstance() {
}
class DoctorPauseResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorPauseResponse::kDiagnosisIdFieldNumber;
const int DoctorPauseResponse::kRegisterIdFieldNumber;
const int DoctorPauseResponse::kDoctorIdFieldNumber;
const int DoctorPauseResponse::kPatientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorPauseResponse::DoctorPauseResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorPauseResponse)
}
DoctorPauseResponse::DoctorPauseResponse(const DoctorPauseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorPauseResponse)
}

void DoctorPauseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorPauseResponse_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorPauseResponse::~DoctorPauseResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorPauseResponse)
  SharedDtor();
}

void DoctorPauseResponse::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorPauseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorPauseResponse& DoctorPauseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorPauseResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorPauseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorPauseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorPauseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DoctorPauseResponse.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DoctorPauseResponse.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorPauseResponse.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DoctorPauseResponse.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorPauseResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorPauseResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorPauseResponse.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorPauseResponse.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorPauseResponse.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorPauseResponse.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorPauseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorPauseResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorPauseResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorPauseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseResponse.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseResponse.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseResponse.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->doctor_id(), output);
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseResponse.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->patient_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorPauseResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorPauseResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorPauseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseResponse.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseResponse.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseResponse.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->doctor_id(), target);
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorPauseResponse.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->patient_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorPauseResponse)
  return target;
}

size_t DoctorPauseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorPauseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorPauseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorPauseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorPauseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorPauseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorPauseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorPauseResponse)
    MergeFrom(*source);
  }
}

void DoctorPauseResponse::MergeFrom(const DoctorPauseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorPauseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
}

void DoctorPauseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorPauseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorPauseResponse::CopyFrom(const DoctorPauseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorPauseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorPauseResponse::IsInitialized() const {
  return true;
}

void DoctorPauseResponse::Swap(DoctorPauseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorPauseResponse::InternalSwap(DoctorPauseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorPauseResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisPausePush::InitAsDefaultInstance() {
}
class DiagnosisPausePush::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisPausePush::kDiagnosisIdFieldNumber;
const int DiagnosisPausePush::kRegisterIdFieldNumber;
const int DiagnosisPausePush::kDoctorIdFieldNumber;
const int DiagnosisPausePush::kPatientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisPausePush::DiagnosisPausePush()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisPausePush)
}
DiagnosisPausePush::DiagnosisPausePush(const DiagnosisPausePush& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisPausePush)
}

void DiagnosisPausePush::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisPausePush_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisPausePush::~DiagnosisPausePush() {
  // @@protoc_insertion_point(destructor:message.DiagnosisPausePush)
  SharedDtor();
}

void DiagnosisPausePush::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisPausePush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisPausePush& DiagnosisPausePush::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisPausePush_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisPausePush::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisPausePush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisPausePush::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisPausePush.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DiagnosisPausePush.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string doctor_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DiagnosisPausePush.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DiagnosisPausePush.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisPausePush::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisPausePush)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPausePush.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPausePush.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string doctor_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPausePush.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPausePush.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisPausePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisPausePush)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisPausePush::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisPausePush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPausePush.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPausePush.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPausePush.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->doctor_id(), output);
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPausePush.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->patient_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisPausePush)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisPausePush::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisPausePush)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPausePush.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPausePush.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPausePush.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->doctor_id(), target);
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPausePush.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->patient_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisPausePush)
  return target;
}

size_t DiagnosisPausePush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisPausePush)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string doctor_id = 3;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string patient_id = 4;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisPausePush::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisPausePush)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisPausePush* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisPausePush>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisPausePush)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisPausePush)
    MergeFrom(*source);
  }
}

void DiagnosisPausePush::MergeFrom(const DiagnosisPausePush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisPausePush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
}

void DiagnosisPausePush::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisPausePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisPausePush::CopyFrom(const DiagnosisPausePush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisPausePush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisPausePush::IsInitialized() const {
  return true;
}

void DiagnosisPausePush::Swap(DiagnosisPausePush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisPausePush::InternalSwap(DiagnosisPausePush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisPausePush::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisPauseRecoverRequest::InitAsDefaultInstance() {
}
class DiagnosisPauseRecoverRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisPauseRecoverRequest::kDiagnosisIdFieldNumber;
const int DiagnosisPauseRecoverRequest::kRegisterIdFieldNumber;
const int DiagnosisPauseRecoverRequest::kPatientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisPauseRecoverRequest::DiagnosisPauseRecoverRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisPauseRecoverRequest)
}
DiagnosisPauseRecoverRequest::DiagnosisPauseRecoverRequest(const DiagnosisPauseRecoverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisPauseRecoverRequest)
}

void DiagnosisPauseRecoverRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisPauseRecoverRequest_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisPauseRecoverRequest::~DiagnosisPauseRecoverRequest() {
  // @@protoc_insertion_point(destructor:message.DiagnosisPauseRecoverRequest)
  SharedDtor();
}

void DiagnosisPauseRecoverRequest::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisPauseRecoverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisPauseRecoverRequest& DiagnosisPauseRecoverRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisPauseRecoverRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisPauseRecoverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisPauseRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisPauseRecoverRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisPauseRecoverRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DiagnosisPauseRecoverRequest.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DiagnosisPauseRecoverRequest.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisPauseRecoverRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisPauseRecoverRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPauseRecoverRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPauseRecoverRequest.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPauseRecoverRequest.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisPauseRecoverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisPauseRecoverRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisPauseRecoverRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisPauseRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverRequest.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverRequest.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patient_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisPauseRecoverRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisPauseRecoverRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisPauseRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverRequest.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverRequest.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->patient_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisPauseRecoverRequest)
  return target;
}

size_t DiagnosisPauseRecoverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisPauseRecoverRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisPauseRecoverRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisPauseRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisPauseRecoverRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisPauseRecoverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisPauseRecoverRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisPauseRecoverRequest)
    MergeFrom(*source);
  }
}

void DiagnosisPauseRecoverRequest::MergeFrom(const DiagnosisPauseRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisPauseRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
}

void DiagnosisPauseRecoverRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisPauseRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisPauseRecoverRequest::CopyFrom(const DiagnosisPauseRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisPauseRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisPauseRecoverRequest::IsInitialized() const {
  return true;
}

void DiagnosisPauseRecoverRequest::Swap(DiagnosisPauseRecoverRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisPauseRecoverRequest::InternalSwap(DiagnosisPauseRecoverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisPauseRecoverRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisPauseRecoverResponse::InitAsDefaultInstance() {
}
class DiagnosisPauseRecoverResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisPauseRecoverResponse::kDiagnosisIdFieldNumber;
const int DiagnosisPauseRecoverResponse::kRegisterIdFieldNumber;
const int DiagnosisPauseRecoverResponse::kPatientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisPauseRecoverResponse::DiagnosisPauseRecoverResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisPauseRecoverResponse)
}
DiagnosisPauseRecoverResponse::DiagnosisPauseRecoverResponse(const DiagnosisPauseRecoverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisPauseRecoverResponse)
}

void DiagnosisPauseRecoverResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisPauseRecoverResponse_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisPauseRecoverResponse::~DiagnosisPauseRecoverResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisPauseRecoverResponse)
  SharedDtor();
}

void DiagnosisPauseRecoverResponse::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisPauseRecoverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisPauseRecoverResponse& DiagnosisPauseRecoverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisPauseRecoverResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisPauseRecoverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisPauseRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisPauseRecoverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisPauseRecoverResponse.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DiagnosisPauseRecoverResponse.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DiagnosisPauseRecoverResponse.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisPauseRecoverResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisPauseRecoverResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPauseRecoverResponse.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPauseRecoverResponse.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPauseRecoverResponse.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisPauseRecoverResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisPauseRecoverResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisPauseRecoverResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisPauseRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverResponse.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverResponse.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverResponse.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patient_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisPauseRecoverResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisPauseRecoverResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisPauseRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverResponse.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverResponse.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPauseRecoverResponse.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->patient_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisPauseRecoverResponse)
  return target;
}

size_t DiagnosisPauseRecoverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisPauseRecoverResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisPauseRecoverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisPauseRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisPauseRecoverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisPauseRecoverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisPauseRecoverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisPauseRecoverResponse)
    MergeFrom(*source);
  }
}

void DiagnosisPauseRecoverResponse::MergeFrom(const DiagnosisPauseRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisPauseRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
}

void DiagnosisPauseRecoverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisPauseRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisPauseRecoverResponse::CopyFrom(const DiagnosisPauseRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisPauseRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisPauseRecoverResponse::IsInitialized() const {
  return true;
}

void DiagnosisPauseRecoverResponse::Swap(DiagnosisPauseRecoverResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisPauseRecoverResponse::InternalSwap(DiagnosisPauseRecoverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisPauseRecoverResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisPassRecoverRequest::InitAsDefaultInstance() {
}
class DiagnosisPassRecoverRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisPassRecoverRequest::kDiagnosisIdFieldNumber;
const int DiagnosisPassRecoverRequest::kRegisterIdFieldNumber;
const int DiagnosisPassRecoverRequest::kPatientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisPassRecoverRequest::DiagnosisPassRecoverRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisPassRecoverRequest)
}
DiagnosisPassRecoverRequest::DiagnosisPassRecoverRequest(const DiagnosisPassRecoverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisPassRecoverRequest)
}

void DiagnosisPassRecoverRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisPassRecoverRequest_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisPassRecoverRequest::~DiagnosisPassRecoverRequest() {
  // @@protoc_insertion_point(destructor:message.DiagnosisPassRecoverRequest)
  SharedDtor();
}

void DiagnosisPassRecoverRequest::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisPassRecoverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisPassRecoverRequest& DiagnosisPassRecoverRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisPassRecoverRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisPassRecoverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisPassRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisPassRecoverRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisPassRecoverRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DiagnosisPassRecoverRequest.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DiagnosisPassRecoverRequest.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisPassRecoverRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisPassRecoverRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPassRecoverRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPassRecoverRequest.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPassRecoverRequest.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisPassRecoverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisPassRecoverRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisPassRecoverRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisPassRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverRequest.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverRequest.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patient_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisPassRecoverRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisPassRecoverRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisPassRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverRequest.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverRequest.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->patient_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisPassRecoverRequest)
  return target;
}

size_t DiagnosisPassRecoverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisPassRecoverRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisPassRecoverRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisPassRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisPassRecoverRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisPassRecoverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisPassRecoverRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisPassRecoverRequest)
    MergeFrom(*source);
  }
}

void DiagnosisPassRecoverRequest::MergeFrom(const DiagnosisPassRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisPassRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
}

void DiagnosisPassRecoverRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisPassRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisPassRecoverRequest::CopyFrom(const DiagnosisPassRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisPassRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisPassRecoverRequest::IsInitialized() const {
  return true;
}

void DiagnosisPassRecoverRequest::Swap(DiagnosisPassRecoverRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisPassRecoverRequest::InternalSwap(DiagnosisPassRecoverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisPassRecoverRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisPassRecoverResponse::InitAsDefaultInstance() {
}
class DiagnosisPassRecoverResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisPassRecoverResponse::kDiagnosisIdFieldNumber;
const int DiagnosisPassRecoverResponse::kRegisterIdFieldNumber;
const int DiagnosisPassRecoverResponse::kPatientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisPassRecoverResponse::DiagnosisPassRecoverResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisPassRecoverResponse)
}
DiagnosisPassRecoverResponse::DiagnosisPassRecoverResponse(const DiagnosisPassRecoverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.register_id().size() > 0) {
    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.patient_id().size() > 0) {
    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisPassRecoverResponse)
}

void DiagnosisPassRecoverResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisPassRecoverResponse_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisPassRecoverResponse::~DiagnosisPassRecoverResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisPassRecoverResponse)
  SharedDtor();
}

void DiagnosisPassRecoverResponse::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisPassRecoverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisPassRecoverResponse& DiagnosisPassRecoverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisPassRecoverResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisPassRecoverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisPassRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  patient_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisPassRecoverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisPassRecoverResponse.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string register_id = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_register_id(), ptr, ctx, "message.DiagnosisPassRecoverResponse.register_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string patient_id = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_patient_id(), ptr, ctx, "message.DiagnosisPassRecoverResponse.patient_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisPassRecoverResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisPassRecoverResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPassRecoverResponse.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string register_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), static_cast<int>(this->register_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPassRecoverResponse.register_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string patient_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisPassRecoverResponse.patient_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisPassRecoverResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisPassRecoverResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisPassRecoverResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisPassRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverResponse.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverResponse.register_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->register_id(), output);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverResponse.patient_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->patient_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisPassRecoverResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisPassRecoverResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisPassRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverResponse.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), static_cast<int>(this->register_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverResponse.register_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->register_id(), target);
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisPassRecoverResponse.patient_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->patient_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisPassRecoverResponse)
  return target;
}

size_t DiagnosisPassRecoverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisPassRecoverResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string register_id = 2;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  // string patient_id = 3;
  if (this->patient_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisPassRecoverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisPassRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisPassRecoverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisPassRecoverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisPassRecoverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisPassRecoverResponse)
    MergeFrom(*source);
  }
}

void DiagnosisPassRecoverResponse::MergeFrom(const DiagnosisPassRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisPassRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
  if (from.patient_id().size() > 0) {

    patient_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
}

void DiagnosisPassRecoverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisPassRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisPassRecoverResponse::CopyFrom(const DiagnosisPassRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisPassRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisPassRecoverResponse::IsInitialized() const {
  return true;
}

void DiagnosisPassRecoverResponse::Swap(DiagnosisPassRecoverResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisPassRecoverResponse::InternalSwap(DiagnosisPassRecoverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  register_id_.Swap(&other->register_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  patient_id_.Swap(&other->patient_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisPassRecoverResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorLeaveRequest::InitAsDefaultInstance() {
}
class DoctorLeaveRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorLeaveRequest::kDoctorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorLeaveRequest::DoctorLeaveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorLeaveRequest)
}
DoctorLeaveRequest::DoctorLeaveRequest(const DoctorLeaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorLeaveRequest)
}

void DoctorLeaveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorLeaveRequest_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorLeaveRequest::~DoctorLeaveRequest() {
  // @@protoc_insertion_point(destructor:message.DoctorLeaveRequest)
  SharedDtor();
}

void DoctorLeaveRequest::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorLeaveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorLeaveRequest& DoctorLeaveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorLeaveRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorLeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorLeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorLeaveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorLeaveRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorLeaveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorLeaveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorLeaveRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorLeaveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorLeaveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorLeaveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorLeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorLeaveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorLeaveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorLeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorLeaveRequest)
  return target;
}

size_t DoctorLeaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorLeaveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorLeaveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorLeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorLeaveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorLeaveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorLeaveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorLeaveRequest)
    MergeFrom(*source);
  }
}

void DoctorLeaveRequest::MergeFrom(const DoctorLeaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorLeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
}

void DoctorLeaveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorLeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorLeaveRequest::CopyFrom(const DoctorLeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorLeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorLeaveRequest::IsInitialized() const {
  return true;
}

void DoctorLeaveRequest::Swap(DoctorLeaveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorLeaveRequest::InternalSwap(DoctorLeaveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorLeaveRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorLeaveResponse::InitAsDefaultInstance() {
}
class DoctorLeaveResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorLeaveResponse::kDoctorIdFieldNumber;
const int DoctorLeaveResponse::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorLeaveResponse::DoctorLeaveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorLeaveResponse)
}
DoctorLeaveResponse::DoctorLeaveResponse(const DoctorLeaveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorLeaveResponse)
}

void DoctorLeaveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorLeaveResponse_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorLeaveResponse::~DoctorLeaveResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorLeaveResponse)
  SharedDtor();
}

void DoctorLeaveResponse::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorLeaveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorLeaveResponse& DoctorLeaveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorLeaveResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorLeaveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorLeaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorLeaveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorLeaveResponse.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DoctorLeaveResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorLeaveResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorLeaveResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorLeaveResponse.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorLeaveResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorLeaveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorLeaveResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorLeaveResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorLeaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveResponse.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorLeaveResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorLeaveResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorLeaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveResponse.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorLeaveResponse)
  return target;
}

size_t DoctorLeaveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorLeaveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorLeaveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorLeaveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorLeaveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorLeaveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorLeaveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorLeaveResponse)
    MergeFrom(*source);
  }
}

void DoctorLeaveResponse::MergeFrom(const DoctorLeaveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorLeaveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DoctorLeaveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorLeaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorLeaveResponse::CopyFrom(const DoctorLeaveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorLeaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorLeaveResponse::IsInitialized() const {
  return true;
}

void DoctorLeaveResponse::Swap(DoctorLeaveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorLeaveResponse::InternalSwap(DoctorLeaveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorLeaveResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorLeaveRecoverRequest::InitAsDefaultInstance() {
}
class DoctorLeaveRecoverRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorLeaveRecoverRequest::kDoctorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorLeaveRecoverRequest::DoctorLeaveRecoverRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorLeaveRecoverRequest)
}
DoctorLeaveRecoverRequest::DoctorLeaveRecoverRequest(const DoctorLeaveRecoverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorLeaveRecoverRequest)
}

void DoctorLeaveRecoverRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorLeaveRecoverRequest_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorLeaveRecoverRequest::~DoctorLeaveRecoverRequest() {
  // @@protoc_insertion_point(destructor:message.DoctorLeaveRecoverRequest)
  SharedDtor();
}

void DoctorLeaveRecoverRequest::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorLeaveRecoverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorLeaveRecoverRequest& DoctorLeaveRecoverRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorLeaveRecoverRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorLeaveRecoverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorLeaveRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorLeaveRecoverRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorLeaveRecoverRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorLeaveRecoverRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorLeaveRecoverRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorLeaveRecoverRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorLeaveRecoverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorLeaveRecoverRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorLeaveRecoverRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorLeaveRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveRecoverRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorLeaveRecoverRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorLeaveRecoverRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorLeaveRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveRecoverRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorLeaveRecoverRequest)
  return target;
}

size_t DoctorLeaveRecoverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorLeaveRecoverRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorLeaveRecoverRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorLeaveRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorLeaveRecoverRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorLeaveRecoverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorLeaveRecoverRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorLeaveRecoverRequest)
    MergeFrom(*source);
  }
}

void DoctorLeaveRecoverRequest::MergeFrom(const DoctorLeaveRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorLeaveRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
}

void DoctorLeaveRecoverRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorLeaveRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorLeaveRecoverRequest::CopyFrom(const DoctorLeaveRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorLeaveRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorLeaveRecoverRequest::IsInitialized() const {
  return true;
}

void DoctorLeaveRecoverRequest::Swap(DoctorLeaveRecoverRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorLeaveRecoverRequest::InternalSwap(DoctorLeaveRecoverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorLeaveRecoverRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorLeaveRecoverResponse::InitAsDefaultInstance() {
}
class DoctorLeaveRecoverResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorLeaveRecoverResponse::kDoctorIdFieldNumber;
const int DoctorLeaveRecoverResponse::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorLeaveRecoverResponse::DoctorLeaveRecoverResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorLeaveRecoverResponse)
}
DoctorLeaveRecoverResponse::DoctorLeaveRecoverResponse(const DoctorLeaveRecoverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorLeaveRecoverResponse)
}

void DoctorLeaveRecoverResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorLeaveRecoverResponse_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorLeaveRecoverResponse::~DoctorLeaveRecoverResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorLeaveRecoverResponse)
  SharedDtor();
}

void DoctorLeaveRecoverResponse::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorLeaveRecoverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorLeaveRecoverResponse& DoctorLeaveRecoverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorLeaveRecoverResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorLeaveRecoverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorLeaveRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorLeaveRecoverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorLeaveRecoverResponse.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DoctorLeaveRecoverResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorLeaveRecoverResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorLeaveRecoverResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorLeaveRecoverResponse.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorLeaveRecoverResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorLeaveRecoverResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorLeaveRecoverResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorLeaveRecoverResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorLeaveRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveRecoverResponse.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveRecoverResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorLeaveRecoverResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorLeaveRecoverResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorLeaveRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveRecoverResponse.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorLeaveRecoverResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorLeaveRecoverResponse)
  return target;
}

size_t DoctorLeaveRecoverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorLeaveRecoverResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorLeaveRecoverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorLeaveRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorLeaveRecoverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorLeaveRecoverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorLeaveRecoverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorLeaveRecoverResponse)
    MergeFrom(*source);
  }
}

void DoctorLeaveRecoverResponse::MergeFrom(const DoctorLeaveRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorLeaveRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DoctorLeaveRecoverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorLeaveRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorLeaveRecoverResponse::CopyFrom(const DoctorLeaveRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorLeaveRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorLeaveRecoverResponse::IsInitialized() const {
  return true;
}

void DoctorLeaveRecoverResponse::Swap(DoctorLeaveRecoverResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorLeaveRecoverResponse::InternalSwap(DoctorLeaveRecoverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorLeaveRecoverResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorCompleteRequest::InitAsDefaultInstance() {
}
class DoctorCompleteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorCompleteRequest::kDoctorIdFieldNumber;
const int DoctorCompleteRequest::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorCompleteRequest::DoctorCompleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorCompleteRequest)
}
DoctorCompleteRequest::DoctorCompleteRequest(const DoctorCompleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorCompleteRequest)
}

void DoctorCompleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorCompleteRequest_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorCompleteRequest::~DoctorCompleteRequest() {
  // @@protoc_insertion_point(destructor:message.DoctorCompleteRequest)
  SharedDtor();
}

void DoctorCompleteRequest::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorCompleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorCompleteRequest& DoctorCompleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorCompleteRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorCompleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorCompleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorCompleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorCompleteRequest.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DoctorCompleteRequest.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorCompleteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorCompleteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompleteRequest.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompleteRequest.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorCompleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorCompleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorCompleteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorCompleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompleteRequest.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompleteRequest.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorCompleteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorCompleteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorCompleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompleteRequest.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompleteRequest.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorCompleteRequest)
  return target;
}

size_t DoctorCompleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorCompleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorCompleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorCompleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorCompleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorCompleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorCompleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorCompleteRequest)
    MergeFrom(*source);
  }
}

void DoctorCompleteRequest::MergeFrom(const DoctorCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorCompleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DoctorCompleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorCompleteRequest::CopyFrom(const DoctorCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorCompleteRequest::IsInitialized() const {
  return true;
}

void DoctorCompleteRequest::Swap(DoctorCompleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorCompleteRequest::InternalSwap(DoctorCompleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorCompleteRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DoctorCompleteResponse::InitAsDefaultInstance() {
}
class DoctorCompleteResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoctorCompleteResponse::kDoctorIdFieldNumber;
const int DoctorCompleteResponse::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoctorCompleteResponse::DoctorCompleteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DoctorCompleteResponse)
}
DoctorCompleteResponse::DoctorCompleteResponse(const DoctorCompleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.doctor_id().size() > 0) {
    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DoctorCompleteResponse)
}

void DoctorCompleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DoctorCompleteResponse_TogetherCall_2eproto.base);
  doctor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DoctorCompleteResponse::~DoctorCompleteResponse() {
  // @@protoc_insertion_point(destructor:message.DoctorCompleteResponse)
  SharedDtor();
}

void DoctorCompleteResponse::SharedDtor() {
  doctor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoctorCompleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoctorCompleteResponse& DoctorCompleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoctorCompleteResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DoctorCompleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DoctorCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doctor_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoctorCompleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_doctor_id(), ptr, ctx, "message.DoctorCompleteResponse.doctor_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DoctorCompleteResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoctorCompleteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DoctorCompleteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string doctor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_doctor_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompleteResponse.doctor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DoctorCompleteResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DoctorCompleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DoctorCompleteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoctorCompleteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DoctorCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompleteResponse.doctor_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->doctor_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompleteResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DoctorCompleteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoctorCompleteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DoctorCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->doctor_id().data(), static_cast<int>(this->doctor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompleteResponse.doctor_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->doctor_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DoctorCompleteResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DoctorCompleteResponse)
  return target;
}

size_t DoctorCompleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DoctorCompleteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doctor_id = 1;
  if (this->doctor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->doctor_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoctorCompleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DoctorCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DoctorCompleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoctorCompleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DoctorCompleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DoctorCompleteResponse)
    MergeFrom(*source);
  }
}

void DoctorCompleteResponse::MergeFrom(const DoctorCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DoctorCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doctor_id().size() > 0) {

    doctor_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.doctor_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DoctorCompleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DoctorCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoctorCompleteResponse::CopyFrom(const DoctorCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DoctorCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoctorCompleteResponse::IsInitialized() const {
  return true;
}

void DoctorCompleteResponse::Swap(DoctorCompleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoctorCompleteResponse::InternalSwap(DoctorCompleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doctor_id_.Swap(&other->doctor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DoctorCompleteResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisLeaveRequest::InitAsDefaultInstance() {
}
class DiagnosisLeaveRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisLeaveRequest::kDiagnosisIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisLeaveRequest::DiagnosisLeaveRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisLeaveRequest)
}
DiagnosisLeaveRequest::DiagnosisLeaveRequest(const DiagnosisLeaveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisLeaveRequest)
}

void DiagnosisLeaveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisLeaveRequest_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisLeaveRequest::~DiagnosisLeaveRequest() {
  // @@protoc_insertion_point(destructor:message.DiagnosisLeaveRequest)
  SharedDtor();
}

void DiagnosisLeaveRequest::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisLeaveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisLeaveRequest& DiagnosisLeaveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisLeaveRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisLeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisLeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisLeaveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisLeaveRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisLeaveRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisLeaveRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisLeaveRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisLeaveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisLeaveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisLeaveRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisLeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisLeaveRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisLeaveRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisLeaveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisLeaveRequest)
  return target;
}

size_t DiagnosisLeaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisLeaveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisLeaveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisLeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisLeaveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisLeaveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisLeaveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisLeaveRequest)
    MergeFrom(*source);
  }
}

void DiagnosisLeaveRequest::MergeFrom(const DiagnosisLeaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisLeaveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
}

void DiagnosisLeaveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisLeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisLeaveRequest::CopyFrom(const DiagnosisLeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisLeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisLeaveRequest::IsInitialized() const {
  return true;
}

void DiagnosisLeaveRequest::Swap(DiagnosisLeaveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisLeaveRequest::InternalSwap(DiagnosisLeaveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisLeaveRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisLeaveResponse::InitAsDefaultInstance() {
}
class DiagnosisLeaveResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisLeaveResponse::kDiagnosisIdFieldNumber;
const int DiagnosisLeaveResponse::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisLeaveResponse::DiagnosisLeaveResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisLeaveResponse)
}
DiagnosisLeaveResponse::DiagnosisLeaveResponse(const DiagnosisLeaveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisLeaveResponse)
}

void DiagnosisLeaveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisLeaveResponse_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisLeaveResponse::~DiagnosisLeaveResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisLeaveResponse)
  SharedDtor();
}

void DiagnosisLeaveResponse::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisLeaveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisLeaveResponse& DiagnosisLeaveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisLeaveResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisLeaveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisLeaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisLeaveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisLeaveResponse.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DiagnosisLeaveResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisLeaveResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisLeaveResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisLeaveResponse.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisLeaveResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisLeaveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisLeaveResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisLeaveResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisLeaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveResponse.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisLeaveResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisLeaveResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisLeaveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveResponse.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisLeaveResponse)
  return target;
}

size_t DiagnosisLeaveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisLeaveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisLeaveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisLeaveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisLeaveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisLeaveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisLeaveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisLeaveResponse)
    MergeFrom(*source);
  }
}

void DiagnosisLeaveResponse::MergeFrom(const DiagnosisLeaveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisLeaveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DiagnosisLeaveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisLeaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisLeaveResponse::CopyFrom(const DiagnosisLeaveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisLeaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisLeaveResponse::IsInitialized() const {
  return true;
}

void DiagnosisLeaveResponse::Swap(DiagnosisLeaveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisLeaveResponse::InternalSwap(DiagnosisLeaveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisLeaveResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisLeaveRecoverRequest::InitAsDefaultInstance() {
}
class DiagnosisLeaveRecoverRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisLeaveRecoverRequest::kDiagnosisIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisLeaveRecoverRequest::DiagnosisLeaveRecoverRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisLeaveRecoverRequest)
}
DiagnosisLeaveRecoverRequest::DiagnosisLeaveRecoverRequest(const DiagnosisLeaveRecoverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisLeaveRecoverRequest)
}

void DiagnosisLeaveRecoverRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisLeaveRecoverRequest_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisLeaveRecoverRequest::~DiagnosisLeaveRecoverRequest() {
  // @@protoc_insertion_point(destructor:message.DiagnosisLeaveRecoverRequest)
  SharedDtor();
}

void DiagnosisLeaveRecoverRequest::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisLeaveRecoverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisLeaveRecoverRequest& DiagnosisLeaveRecoverRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisLeaveRecoverRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisLeaveRecoverRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisLeaveRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisLeaveRecoverRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisLeaveRecoverRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisLeaveRecoverRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisLeaveRecoverRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisLeaveRecoverRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisLeaveRecoverRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisLeaveRecoverRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisLeaveRecoverRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisLeaveRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveRecoverRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisLeaveRecoverRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisLeaveRecoverRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisLeaveRecoverRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveRecoverRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisLeaveRecoverRequest)
  return target;
}

size_t DiagnosisLeaveRecoverRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisLeaveRecoverRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisLeaveRecoverRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisLeaveRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisLeaveRecoverRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisLeaveRecoverRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisLeaveRecoverRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisLeaveRecoverRequest)
    MergeFrom(*source);
  }
}

void DiagnosisLeaveRecoverRequest::MergeFrom(const DiagnosisLeaveRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisLeaveRecoverRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
}

void DiagnosisLeaveRecoverRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisLeaveRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisLeaveRecoverRequest::CopyFrom(const DiagnosisLeaveRecoverRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisLeaveRecoverRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisLeaveRecoverRequest::IsInitialized() const {
  return true;
}

void DiagnosisLeaveRecoverRequest::Swap(DiagnosisLeaveRecoverRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisLeaveRecoverRequest::InternalSwap(DiagnosisLeaveRecoverRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisLeaveRecoverRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisLeaveRecoverResponse::InitAsDefaultInstance() {
}
class DiagnosisLeaveRecoverResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisLeaveRecoverResponse::kDiagnosisIdFieldNumber;
const int DiagnosisLeaveRecoverResponse::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisLeaveRecoverResponse::DiagnosisLeaveRecoverResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisLeaveRecoverResponse)
}
DiagnosisLeaveRecoverResponse::DiagnosisLeaveRecoverResponse(const DiagnosisLeaveRecoverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisLeaveRecoverResponse)
}

void DiagnosisLeaveRecoverResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisLeaveRecoverResponse_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisLeaveRecoverResponse::~DiagnosisLeaveRecoverResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisLeaveRecoverResponse)
  SharedDtor();
}

void DiagnosisLeaveRecoverResponse::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisLeaveRecoverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisLeaveRecoverResponse& DiagnosisLeaveRecoverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisLeaveRecoverResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisLeaveRecoverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisLeaveRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisLeaveRecoverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisLeaveRecoverResponse.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DiagnosisLeaveRecoverResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisLeaveRecoverResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisLeaveRecoverResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisLeaveRecoverResponse.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisLeaveRecoverResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisLeaveRecoverResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisLeaveRecoverResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisLeaveRecoverResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisLeaveRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveRecoverResponse.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveRecoverResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisLeaveRecoverResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisLeaveRecoverResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisLeaveRecoverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveRecoverResponse.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisLeaveRecoverResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisLeaveRecoverResponse)
  return target;
}

size_t DiagnosisLeaveRecoverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisLeaveRecoverResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisLeaveRecoverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisLeaveRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisLeaveRecoverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisLeaveRecoverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisLeaveRecoverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisLeaveRecoverResponse)
    MergeFrom(*source);
  }
}

void DiagnosisLeaveRecoverResponse::MergeFrom(const DiagnosisLeaveRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisLeaveRecoverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DiagnosisLeaveRecoverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisLeaveRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisLeaveRecoverResponse::CopyFrom(const DiagnosisLeaveRecoverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisLeaveRecoverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisLeaveRecoverResponse::IsInitialized() const {
  return true;
}

void DiagnosisLeaveRecoverResponse::Swap(DiagnosisLeaveRecoverResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisLeaveRecoverResponse::InternalSwap(DiagnosisLeaveRecoverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisLeaveRecoverResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisCompleteRequest::InitAsDefaultInstance() {
}
class DiagnosisCompleteRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisCompleteRequest::kDiagnosisIdFieldNumber;
const int DiagnosisCompleteRequest::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisCompleteRequest::DiagnosisCompleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisCompleteRequest)
}
DiagnosisCompleteRequest::DiagnosisCompleteRequest(const DiagnosisCompleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisCompleteRequest)
}

void DiagnosisCompleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisCompleteRequest_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisCompleteRequest::~DiagnosisCompleteRequest() {
  // @@protoc_insertion_point(destructor:message.DiagnosisCompleteRequest)
  SharedDtor();
}

void DiagnosisCompleteRequest::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisCompleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisCompleteRequest& DiagnosisCompleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisCompleteRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisCompleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisCompleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisCompleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisCompleteRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DiagnosisCompleteRequest.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisCompleteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisCompleteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisCompleteRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisCompleteRequest.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisCompleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisCompleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisCompleteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisCompleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisCompleteRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisCompleteRequest.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisCompleteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisCompleteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisCompleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisCompleteRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisCompleteRequest.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisCompleteRequest)
  return target;
}

size_t DiagnosisCompleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisCompleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisCompleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisCompleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisCompleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisCompleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisCompleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisCompleteRequest)
    MergeFrom(*source);
  }
}

void DiagnosisCompleteRequest::MergeFrom(const DiagnosisCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisCompleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DiagnosisCompleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisCompleteRequest::CopyFrom(const DiagnosisCompleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisCompleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisCompleteRequest::IsInitialized() const {
  return true;
}

void DiagnosisCompleteRequest::Swap(DiagnosisCompleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisCompleteRequest::InternalSwap(DiagnosisCompleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisCompleteRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisCompleteResponse::InitAsDefaultInstance() {
}
class DiagnosisCompleteResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisCompleteResponse::kDiagnosisIdFieldNumber;
const int DiagnosisCompleteResponse::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisCompleteResponse::DiagnosisCompleteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisCompleteResponse)
}
DiagnosisCompleteResponse::DiagnosisCompleteResponse(const DiagnosisCompleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisCompleteResponse)
}

void DiagnosisCompleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisCompleteResponse_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisCompleteResponse::~DiagnosisCompleteResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisCompleteResponse)
  SharedDtor();
}

void DiagnosisCompleteResponse::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisCompleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisCompleteResponse& DiagnosisCompleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisCompleteResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisCompleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisCompleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisCompleteResponse.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DiagnosisCompleteResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisCompleteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisCompleteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisCompleteResponse.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisCompleteResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisCompleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisCompleteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisCompleteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisCompleteResponse.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisCompleteResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisCompleteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisCompleteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisCompleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisCompleteResponse.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisCompleteResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisCompleteResponse)
  return target;
}

size_t DiagnosisCompleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisCompleteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisCompleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisCompleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisCompleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisCompleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisCompleteResponse)
    MergeFrom(*source);
  }
}

void DiagnosisCompleteResponse::MergeFrom(const DiagnosisCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisCompleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DiagnosisCompleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisCompleteResponse::CopyFrom(const DiagnosisCompleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisCompleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisCompleteResponse::IsInitialized() const {
  return true;
}

void DiagnosisCompleteResponse::Swap(DiagnosisCompleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisCompleteResponse::InternalSwap(DiagnosisCompleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisCompleteResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisSpareRequest::InitAsDefaultInstance() {
}
class DiagnosisSpareRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisSpareRequest::kDiagnosisIdFieldNumber;
const int DiagnosisSpareRequest::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisSpareRequest::DiagnosisSpareRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisSpareRequest)
}
DiagnosisSpareRequest::DiagnosisSpareRequest(const DiagnosisSpareRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisSpareRequest)
}

void DiagnosisSpareRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisSpareRequest_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisSpareRequest::~DiagnosisSpareRequest() {
  // @@protoc_insertion_point(destructor:message.DiagnosisSpareRequest)
  SharedDtor();
}

void DiagnosisSpareRequest::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisSpareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisSpareRequest& DiagnosisSpareRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisSpareRequest_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisSpareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisSpareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisSpareRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisSpareRequest.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string content = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_content(), ptr, ctx, "message.DiagnosisSpareRequest.content");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisSpareRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisSpareRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisSpareRequest.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisSpareRequest.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisSpareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisSpareRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisSpareRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisSpareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisSpareRequest.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisSpareRequest.content");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisSpareRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisSpareRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisSpareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisSpareRequest.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisSpareRequest.content");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisSpareRequest)
  return target;
}

size_t DiagnosisSpareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisSpareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->content());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisSpareRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisSpareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisSpareRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisSpareRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisSpareRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisSpareRequest)
    MergeFrom(*source);
  }
}

void DiagnosisSpareRequest::MergeFrom(const DiagnosisSpareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisSpareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void DiagnosisSpareRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisSpareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisSpareRequest::CopyFrom(const DiagnosisSpareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisSpareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisSpareRequest::IsInitialized() const {
  return true;
}

void DiagnosisSpareRequest::Swap(DiagnosisSpareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisSpareRequest::InternalSwap(DiagnosisSpareRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisSpareRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DiagnosisSpareResponse::InitAsDefaultInstance() {
}
class DiagnosisSpareResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisSpareResponse::kDiagnosisIdFieldNumber;
const int DiagnosisSpareResponse::kDatetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisSpareResponse::DiagnosisSpareResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.DiagnosisSpareResponse)
}
DiagnosisSpareResponse::DiagnosisSpareResponse(const DiagnosisSpareResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.diagnosis_id().size() > 0) {
    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.datetime().size() > 0) {
    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
  // @@protoc_insertion_point(copy_constructor:message.DiagnosisSpareResponse)
}

void DiagnosisSpareResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_DiagnosisSpareResponse_TogetherCall_2eproto.base);
  diagnosis_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosisSpareResponse::~DiagnosisSpareResponse() {
  // @@protoc_insertion_point(destructor:message.DiagnosisSpareResponse)
  SharedDtor();
}

void DiagnosisSpareResponse::SharedDtor() {
  diagnosis_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosisSpareResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosisSpareResponse& DiagnosisSpareResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosisSpareResponse_TogetherCall_2eproto.base);
  return *internal_default_instance();
}


void DiagnosisSpareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DiagnosisSpareResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diagnosis_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiagnosisSpareResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_diagnosis_id(), ptr, ctx, "message.DiagnosisSpareResponse.diagnosis_id");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string datetime = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_datetime(), ptr, ctx, "message.DiagnosisSpareResponse.datetime");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiagnosisSpareResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.DiagnosisSpareResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diagnosis_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnosis_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisSpareResponse.diagnosis_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string datetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->datetime().data(), static_cast<int>(this->datetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "message.DiagnosisSpareResponse.datetime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.DiagnosisSpareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.DiagnosisSpareResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiagnosisSpareResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.DiagnosisSpareResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisSpareResponse.diagnosis_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diagnosis_id(), output);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisSpareResponse.datetime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.DiagnosisSpareResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosisSpareResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DiagnosisSpareResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->diagnosis_id().data(), static_cast<int>(this->diagnosis_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisSpareResponse.diagnosis_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->diagnosis_id(), target);
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->datetime().data(), static_cast<int>(this->datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.DiagnosisSpareResponse.datetime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->datetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DiagnosisSpareResponse)
  return target;
}

size_t DiagnosisSpareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DiagnosisSpareResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diagnosis_id = 1;
  if (this->diagnosis_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->diagnosis_id());
  }

  // string datetime = 2;
  if (this->datetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->datetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosisSpareResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DiagnosisSpareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosisSpareResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosisSpareResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DiagnosisSpareResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DiagnosisSpareResponse)
    MergeFrom(*source);
  }
}

void DiagnosisSpareResponse::MergeFrom(const DiagnosisSpareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DiagnosisSpareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diagnosis_id().size() > 0) {

    diagnosis_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diagnosis_id_);
  }
  if (from.datetime().size() > 0) {

    datetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datetime_);
  }
}

void DiagnosisSpareResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DiagnosisSpareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisSpareResponse::CopyFrom(const DiagnosisSpareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DiagnosisSpareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisSpareResponse::IsInitialized() const {
  return true;
}

void DiagnosisSpareResponse::Swap(DiagnosisSpareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisSpareResponse::InternalSwap(DiagnosisSpareResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  diagnosis_id_.Swap(&other->diagnosis_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosisSpareResponse::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_TogetherCall_2eproto);
  return ::file_level_metadata_TogetherCall_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::PatientBaseInfo* Arena::CreateMaybeMessage< ::message::PatientBaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::message::PatientBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisInfoResponse* Arena::CreateMaybeMessage< ::message::DiagnosisInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorInfoResponse* Arena::CreateMaybeMessage< ::message::DoctorInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorBeginRequest* Arena::CreateMaybeMessage< ::message::DoctorBeginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorBeginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorBeginResponse* Arena::CreateMaybeMessage< ::message::DoctorBeginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorBeginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisBeginRequest* Arena::CreateMaybeMessage< ::message::DiagnosisBeginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisBeginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisBeginResponse* Arena::CreateMaybeMessage< ::message::DiagnosisBeginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisBeginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DioctorCallRequest* Arena::CreateMaybeMessage< ::message::DioctorCallRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DioctorCallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorCallResponse* Arena::CreateMaybeMessage< ::message::DoctorCallResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorCallResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisAcceptCallPush* Arena::CreateMaybeMessage< ::message::DiagnosisAcceptCallPush >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisAcceptCallPush >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisResponseCallRequest* Arena::CreateMaybeMessage< ::message::DiagnosisResponseCallRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisResponseCallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisResponseCallResponse* Arena::CreateMaybeMessage< ::message::DiagnosisResponseCallResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisResponseCallResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorAcceptCallResultPush* Arena::CreateMaybeMessage< ::message::DoctorAcceptCallResultPush >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorAcceptCallResultPush >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorSurePassRequest* Arena::CreateMaybeMessage< ::message::DoctorSurePassRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorSurePassRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorSurePassResponse* Arena::CreateMaybeMessage< ::message::DoctorSurePassResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorSurePassResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorSurePassPush* Arena::CreateMaybeMessage< ::message::DoctorSurePassPush >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorSurePassPush >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorStopRequest* Arena::CreateMaybeMessage< ::message::DoctorStopRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorStopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorCompletePush* Arena::CreateMaybeMessage< ::message::DoctorCompletePush >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorCompletePush >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorStopResponse* Arena::CreateMaybeMessage< ::message::DoctorStopResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorStopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorPauseRequest* Arena::CreateMaybeMessage< ::message::DoctorPauseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorPauseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorPauseResponse* Arena::CreateMaybeMessage< ::message::DoctorPauseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorPauseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisPausePush* Arena::CreateMaybeMessage< ::message::DiagnosisPausePush >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisPausePush >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisPauseRecoverRequest* Arena::CreateMaybeMessage< ::message::DiagnosisPauseRecoverRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisPauseRecoverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisPauseRecoverResponse* Arena::CreateMaybeMessage< ::message::DiagnosisPauseRecoverResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisPauseRecoverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisPassRecoverRequest* Arena::CreateMaybeMessage< ::message::DiagnosisPassRecoverRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisPassRecoverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisPassRecoverResponse* Arena::CreateMaybeMessage< ::message::DiagnosisPassRecoverResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisPassRecoverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorLeaveRequest* Arena::CreateMaybeMessage< ::message::DoctorLeaveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorLeaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorLeaveResponse* Arena::CreateMaybeMessage< ::message::DoctorLeaveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorLeaveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorLeaveRecoverRequest* Arena::CreateMaybeMessage< ::message::DoctorLeaveRecoverRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorLeaveRecoverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorLeaveRecoverResponse* Arena::CreateMaybeMessage< ::message::DoctorLeaveRecoverResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorLeaveRecoverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorCompleteRequest* Arena::CreateMaybeMessage< ::message::DoctorCompleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorCompleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DoctorCompleteResponse* Arena::CreateMaybeMessage< ::message::DoctorCompleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DoctorCompleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisLeaveRequest* Arena::CreateMaybeMessage< ::message::DiagnosisLeaveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisLeaveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisLeaveResponse* Arena::CreateMaybeMessage< ::message::DiagnosisLeaveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisLeaveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisLeaveRecoverRequest* Arena::CreateMaybeMessage< ::message::DiagnosisLeaveRecoverRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisLeaveRecoverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisLeaveRecoverResponse* Arena::CreateMaybeMessage< ::message::DiagnosisLeaveRecoverResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisLeaveRecoverResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisCompleteRequest* Arena::CreateMaybeMessage< ::message::DiagnosisCompleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisCompleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisCompleteResponse* Arena::CreateMaybeMessage< ::message::DiagnosisCompleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisCompleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisSpareRequest* Arena::CreateMaybeMessage< ::message::DiagnosisSpareRequest >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisSpareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DiagnosisSpareResponse* Arena::CreateMaybeMessage< ::message::DiagnosisSpareResponse >(Arena* arena) {
  return Arena::CreateInternal< ::message::DiagnosisSpareResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
