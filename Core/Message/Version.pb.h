// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Version.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Version_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Version_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Version_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Version_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_Version_2eproto();
namespace message {
class VersionList;
class VersionListDefaultTypeInternal;
extern VersionListDefaultTypeInternal _VersionList_default_instance_;
class VersionRequest;
class VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
class VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::VersionList* Arena::CreateMaybeMessage<::message::VersionList>(Arena*);
template<> ::message::VersionRequest* Arena::CreateMaybeMessage<::message::VersionRequest>(Arena*);
template<> ::message::VersionResponse* Arena::CreateMaybeMessage<::message::VersionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class VersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.VersionRequest) */ {
 public:
  VersionRequest();
  virtual ~VersionRequest();

  VersionRequest(const VersionRequest& from);
  VersionRequest(VersionRequest&& from) noexcept
    : VersionRequest() {
    *this = ::std::move(from);
  }

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VersionRequest* other);
  friend void swap(VersionRequest& a, VersionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionRequest* New() const final {
    return CreateMaybeMessage<VersionRequest>(nullptr);
  }

  VersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionRequest& from);
  void MergeFrom(const VersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.VersionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version_type = 1;
  void clear_version_type();
  static const int kVersionTypeFieldNumber = 1;
  const std::string& version_type() const;
  void set_version_type(const std::string& value);
  void set_version_type(std::string&& value);
  void set_version_type(const char* value);
  void set_version_type(const char* value, size_t size);
  std::string* mutable_version_type();
  std::string* release_version_type();
  void set_allocated_version_type(std::string* version_type);

  // @@protoc_insertion_point(class_scope:message.VersionRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Version_2eproto;
};
// -------------------------------------------------------------------

class VersionList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.VersionList) */ {
 public:
  VersionList();
  virtual ~VersionList();

  VersionList(const VersionList& from);
  VersionList(VersionList&& from) noexcept
    : VersionList() {
    *this = ::std::move(from);
  }

  inline VersionList& operator=(const VersionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionList& operator=(VersionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VersionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionList* internal_default_instance() {
    return reinterpret_cast<const VersionList*>(
               &_VersionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VersionList* other);
  friend void swap(VersionList& a, VersionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionList* New() const final {
    return CreateMaybeMessage<VersionList>(nullptr);
  }

  VersionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionList& from);
  void MergeFrom(const VersionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.VersionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version_uuid = 1;
  void clear_version_uuid();
  static const int kVersionUuidFieldNumber = 1;
  const std::string& version_uuid() const;
  void set_version_uuid(const std::string& value);
  void set_version_uuid(std::string&& value);
  void set_version_uuid(const char* value);
  void set_version_uuid(const char* value, size_t size);
  std::string* mutable_version_uuid();
  std::string* release_version_uuid();
  void set_allocated_version_uuid(std::string* version_uuid);

  // string version_description = 2;
  void clear_version_description();
  static const int kVersionDescriptionFieldNumber = 2;
  const std::string& version_description() const;
  void set_version_description(const std::string& value);
  void set_version_description(std::string&& value);
  void set_version_description(const char* value);
  void set_version_description(const char* value, size_t size);
  std::string* mutable_version_description();
  std::string* release_version_description();
  void set_allocated_version_description(std::string* version_description);

  // string version_value = 3;
  void clear_version_value();
  static const int kVersionValueFieldNumber = 3;
  const std::string& version_value() const;
  void set_version_value(const std::string& value);
  void set_version_value(std::string&& value);
  void set_version_value(const char* value);
  void set_version_value(const char* value, size_t size);
  std::string* mutable_version_value();
  std::string* release_version_value();
  void set_allocated_version_value(std::string* version_value);

  // string url = 5;
  void clear_url();
  static const int kUrlFieldNumber = 5;
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // @@protoc_insertion_point(class_scope:message.VersionList)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Version_2eproto;
};
// -------------------------------------------------------------------

class VersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.VersionResponse) */ {
 public:
  VersionResponse();
  virtual ~VersionResponse();

  VersionResponse(const VersionResponse& from);
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VersionResponse* other);
  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionResponse* New() const final {
    return CreateMaybeMessage<VersionResponse>(nullptr);
  }

  VersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionResponse& from);
  void MergeFrom(const VersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.VersionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .message.VersionList version_list = 1;
  int version_list_size() const;
  void clear_version_list();
  static const int kVersionListFieldNumber = 1;
  ::message::VersionList* mutable_version_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::VersionList >*
      mutable_version_list();
  const ::message::VersionList& version_list(int index) const;
  ::message::VersionList* add_version_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::VersionList >&
      version_list() const;

  // @@protoc_insertion_point(class_scope:message.VersionResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::VersionList > version_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Version_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionRequest

// string version_type = 1;
inline void VersionRequest::clear_version_type() {
  version_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionRequest::version_type() const {
  // @@protoc_insertion_point(field_get:message.VersionRequest.version_type)
  return version_type_.GetNoArena();
}
inline void VersionRequest::set_version_type(const std::string& value) {
  
  version_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.VersionRequest.version_type)
}
inline void VersionRequest::set_version_type(std::string&& value) {
  
  version_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.VersionRequest.version_type)
}
inline void VersionRequest::set_version_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.VersionRequest.version_type)
}
inline void VersionRequest::set_version_type(const char* value, size_t size) {
  
  version_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.VersionRequest.version_type)
}
inline std::string* VersionRequest::mutable_version_type() {
  
  // @@protoc_insertion_point(field_mutable:message.VersionRequest.version_type)
  return version_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionRequest::release_version_type() {
  // @@protoc_insertion_point(field_release:message.VersionRequest.version_type)
  
  return version_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionRequest::set_allocated_version_type(std::string* version_type) {
  if (version_type != nullptr) {
    
  } else {
    
  }
  version_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_type);
  // @@protoc_insertion_point(field_set_allocated:message.VersionRequest.version_type)
}

// -------------------------------------------------------------------

// VersionList

// string version_uuid = 1;
inline void VersionList::clear_version_uuid() {
  version_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionList::version_uuid() const {
  // @@protoc_insertion_point(field_get:message.VersionList.version_uuid)
  return version_uuid_.GetNoArena();
}
inline void VersionList::set_version_uuid(const std::string& value) {
  
  version_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.VersionList.version_uuid)
}
inline void VersionList::set_version_uuid(std::string&& value) {
  
  version_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.VersionList.version_uuid)
}
inline void VersionList::set_version_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.VersionList.version_uuid)
}
inline void VersionList::set_version_uuid(const char* value, size_t size) {
  
  version_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.VersionList.version_uuid)
}
inline std::string* VersionList::mutable_version_uuid() {
  
  // @@protoc_insertion_point(field_mutable:message.VersionList.version_uuid)
  return version_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionList::release_version_uuid() {
  // @@protoc_insertion_point(field_release:message.VersionList.version_uuid)
  
  return version_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionList::set_allocated_version_uuid(std::string* version_uuid) {
  if (version_uuid != nullptr) {
    
  } else {
    
  }
  version_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_uuid);
  // @@protoc_insertion_point(field_set_allocated:message.VersionList.version_uuid)
}

// string version_description = 2;
inline void VersionList::clear_version_description() {
  version_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionList::version_description() const {
  // @@protoc_insertion_point(field_get:message.VersionList.version_description)
  return version_description_.GetNoArena();
}
inline void VersionList::set_version_description(const std::string& value) {
  
  version_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.VersionList.version_description)
}
inline void VersionList::set_version_description(std::string&& value) {
  
  version_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.VersionList.version_description)
}
inline void VersionList::set_version_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.VersionList.version_description)
}
inline void VersionList::set_version_description(const char* value, size_t size) {
  
  version_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.VersionList.version_description)
}
inline std::string* VersionList::mutable_version_description() {
  
  // @@protoc_insertion_point(field_mutable:message.VersionList.version_description)
  return version_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionList::release_version_description() {
  // @@protoc_insertion_point(field_release:message.VersionList.version_description)
  
  return version_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionList::set_allocated_version_description(std::string* version_description) {
  if (version_description != nullptr) {
    
  } else {
    
  }
  version_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_description);
  // @@protoc_insertion_point(field_set_allocated:message.VersionList.version_description)
}

// string version_value = 3;
inline void VersionList::clear_version_value() {
  version_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionList::version_value() const {
  // @@protoc_insertion_point(field_get:message.VersionList.version_value)
  return version_value_.GetNoArena();
}
inline void VersionList::set_version_value(const std::string& value) {
  
  version_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.VersionList.version_value)
}
inline void VersionList::set_version_value(std::string&& value) {
  
  version_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.VersionList.version_value)
}
inline void VersionList::set_version_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.VersionList.version_value)
}
inline void VersionList::set_version_value(const char* value, size_t size) {
  
  version_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.VersionList.version_value)
}
inline std::string* VersionList::mutable_version_value() {
  
  // @@protoc_insertion_point(field_mutable:message.VersionList.version_value)
  return version_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionList::release_version_value() {
  // @@protoc_insertion_point(field_release:message.VersionList.version_value)
  
  return version_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionList::set_allocated_version_value(std::string* version_value) {
  if (version_value != nullptr) {
    
  } else {
    
  }
  version_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_value);
  // @@protoc_insertion_point(field_set_allocated:message.VersionList.version_value)
}

// string url = 5;
inline void VersionList::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VersionList::url() const {
  // @@protoc_insertion_point(field_get:message.VersionList.url)
  return url_.GetNoArena();
}
inline void VersionList::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.VersionList.url)
}
inline void VersionList::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.VersionList.url)
}
inline void VersionList::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.VersionList.url)
}
inline void VersionList::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.VersionList.url)
}
inline std::string* VersionList::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:message.VersionList.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionList::release_url() {
  // @@protoc_insertion_point(field_release:message.VersionList.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionList::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:message.VersionList.url)
}

// -------------------------------------------------------------------

// VersionResponse

// repeated .message.VersionList version_list = 1;
inline int VersionResponse::version_list_size() const {
  return version_list_.size();
}
inline void VersionResponse::clear_version_list() {
  version_list_.Clear();
}
inline ::message::VersionList* VersionResponse::mutable_version_list(int index) {
  // @@protoc_insertion_point(field_mutable:message.VersionResponse.version_list)
  return version_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::VersionList >*
VersionResponse::mutable_version_list() {
  // @@protoc_insertion_point(field_mutable_list:message.VersionResponse.version_list)
  return &version_list_;
}
inline const ::message::VersionList& VersionResponse::version_list(int index) const {
  // @@protoc_insertion_point(field_get:message.VersionResponse.version_list)
  return version_list_.Get(index);
}
inline ::message::VersionList* VersionResponse::add_version_list() {
  // @@protoc_insertion_point(field_add:message.VersionResponse.version_list)
  return version_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::VersionList >&
VersionResponse::version_list() const {
  // @@protoc_insertion_point(field_list:message.VersionResponse.version_list)
  return version_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Version_2eproto
